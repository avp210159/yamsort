–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –í—Å–∫ 08 –ê–ø—Ä 2012 09:44:45
]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ cat /proc/c[u[K[Kpy[Kuinfo 
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 42
model name	: Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz
stepping	: 7
cpu MHz		: 3163.484
cache size	: 6144 KB
physical id	: 0
siblings	: 4
core id		: 0
cpu cores	: 4
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 5
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc rep_good pni ssse3 lahf_lm
bogomips	: 6326.96
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 42
model name	: Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz
stepping	: 7
cpu MHz		: 3163.484
cache size	: 6144 KB
physical id	: 0
siblings	: 4
core id		: 1
cpu cores	: 4
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 5
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc rep_good pni ssse3 lahf_lm
bogomips	: 6197.94
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 42
model name	: Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz
stepping	: 7
cpu MHz		: 3163.484
cache size	: 6144 KB
physical id	: 0
siblings	: 4
core id		: 2
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 5
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc rep_good pni ssse3 lahf_lm
bogomips	: 6349.72
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 42
model name	: Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz
stepping	: 7
cpu MHz		: 3163.484
cache size	: 6144 KB
physical id	: 0
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 3
initial apicid	: 3
fpu		: yes
fpu_exception	: yes
cpuid level	: 5
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc rep_good pni ssse3 lahf_lm
bogomips	: 6263.58
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ ./measure -l
List of algorithms
0 system qsort [qsort style] 
1 yamsort [qsort style] 
2 timsort [qsort style] 
3 mmsort [qsort style] 
4 symmsort [qsort style] 
5 libc _quicksort [qsort style] 
6 template yamsort [C template style] 
7 template Swenson tim_sort [C template style] 
8 template mmsort [C template style] 
9 template symmsort [C template style] 
10 template Swenson quick_sort [C template style] 
11 template aamsort [C template style] 
]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ ./ms.sh 
–í—Å–∫ –ê–ø—Ä  8 09:45:31 MSK 2012
============TEST measure algorithms N=1000 MAX=0 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 143 fill 10 msec (0.143000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     724 kB
Cost 0.104 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 104 fill 10 msec (0.104000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.078 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 41 fill 4 msec (0.041000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     740 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 52 fill 3 msec (0.052000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 58 fill 5 msec (0.058000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 70 fill 5 msec (0.070000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.052 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 75 fill 7 msec (0.075000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.056 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 73 fill 7 msec (0.073000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.054 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 151 fill 10 msec (0.151000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     692 kB
Cost 0.104 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 258 fill 13 msec (0.258000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 5 fill 4 msec (0.005000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.003 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 328 fill 4 msec (0.328000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.230 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 74 fill 5 msec (0.074000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.052 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 268 fill 5 msec (0.268000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.188 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 255 fill 7 msec (0.255000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.179 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 113 fill 7 msec (0.113000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.079 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 236 fill 10 msec (0.236000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.162 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 238 fill 10 msec (0.238000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.168 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 9 fill 3 msec (0.009000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.006 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 11 fill 4 msec (0.011000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.008 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 101 fill 5 msec (0.101000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     708 kB
Cost 0.072 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 239 fill 5 msec (0.239000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.168 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 257 fill 7 msec (0.257000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 149 fill 8 msec (0.149000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.105 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 130 fill 11 msec (0.130000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.088 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 202 fill 10 msec (0.202000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.141 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4 fill 3 msec (0.004000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.003 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 302 fill 4 msec (0.302000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.211 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 54 fill 5 msec (0.054000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.038 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 290 fill 5 msec (0.290000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.202 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 272 fill 7 msec (0.272000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.189 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 95 fill 7 msec (0.095000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.066 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 199 fill 10 msec (0.199000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     676 kB
Cost 0.135 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 239 fill 11 msec (0.239000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.164 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4 fill 4 msec (0.004000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.003 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 152 fill 4 msec (0.152000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.105 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 58 fill 5 msec (0.058000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 185 fill 5 msec (0.185000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.127 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 203 fill 7 msec (0.203000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.140 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 116 fill 8 msec (0.116000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.080 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 81 fill 11 msec (0.081000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     676 kB
Cost 0.055 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 92 fill 10 msec (0.092000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.063 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 29 fill 3 msec (0.029000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.020 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 28 fill 4 msec (0.028000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.019 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 32 fill 5 msec (0.032000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.022 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 63 fill 5 msec (0.063000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 74 fill 7 msec (0.074000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.051 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 44 fill 8 msec (0.044000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.030 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 57 fill 10 msec (0.057000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 10 msec (0.062000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 3 fill 3 msec (0.003000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.002 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 36 fill 3 msec (0.036000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 26 fill 4 msec (0.026000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 43 fill 5 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 46 fill 6 msec (0.046000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.032 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 35 fill 8 msec (0.035000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.025 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 57 fill 11 msec (0.057000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 67 fill 10 msec (0.067000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.048 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 3 fill 3 msec (0.003000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.002 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 4 fill 3 msec (0.004000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.003 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 21 fill 4 msec (0.021000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     716 kB
Cost 0.015 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 43 fill 5 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 50 fill 7 msec (0.050000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.036 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 33 fill 8 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.023 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 40 fill 10 msec (0.040000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     684 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 46 fill 11 msec (0.046000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.032 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 2 fill 3 msec (0.002000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.001 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 39 fill 4 msec (0.039000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 12 fill 5 msec (0.012000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.008 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 43 fill 5 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 44 fill 7 msec (0.044000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 21 fill 8 msec (0.021000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.015 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 98 fill 9 msec (0.098000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.066 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 102 fill 11 msec (0.102000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 11 fill 3 msec (0.011000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.008 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 27 fill 4 msec (0.027000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.019 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 40 fill 5 msec (0.040000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.028 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 53 fill 5 msec (0.053000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.036 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 71 fill 6 msec (0.071000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.049 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 66 fill 7 msec (0.066000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.045 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 40 fill 10 msec (0.040000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 44 fill 11 msec (0.044000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 9 fill 3 msec (0.009000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.006 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 14 fill 3 msec (0.014000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 20 fill 5 msec (0.020000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 22 fill 5 msec (0.022000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.015 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 29 fill 7 msec (0.029000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.020 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 29 fill 8 msec (0.029000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.020 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 52 fill 9 msec (0.052000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.035 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 59 fill 10 msec (0.059000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 4 fill 3 msec (0.004000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.003 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 21 fill 3 msec (0.021000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 28 fill 4 msec (0.028000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.019 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 36 fill 5 msec (0.036000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 39 fill 8 msec (0.039000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 38 fill 7 msec (0.038000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.026 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=0 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 420 fill 51 msec (0.420000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     752 kB
Cost 0.316 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 638 fill 54 msec (0.638000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.559 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 240 fill 16 msec (0.240000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     840 kB
Cost 0.202 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 314 fill 16 msec (0.314000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 370 fill 21 msec (0.370000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.324 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 422 fill 23 msec (0.422000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.370 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 459 fill 34 msec (0.459000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.402 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 448 fill 36 msec (0.448000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.392 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 909 fill 52 msec (0.909000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.640 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1112 fill 53 msec (1.112000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.854 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 21 fill 17 msec (0.021000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     760 kB
Cost 0.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1265 fill 17 msec (1.265000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.966 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 491 fill 22 msec (0.491000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.375 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1259 fill 23 msec (1.259000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.967 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1232 fill 34 msec (1.232000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.951 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 670 fill 35 msec (0.670000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.512 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 1140 fill 50 msec (1.140000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     708 kB
Cost 0.807 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1180 fill 53 msec (1.180000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.935 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 44 fill 16 msec (0.044000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 60 fill 17 msec (0.060000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     756 kB
Cost 0.045 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 548 fill 22 msec (0.548000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.438 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 959 fill 24 msec (0.959000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     804 kB
Cost 0.771 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1102 fill 34 msec (1.102000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.882 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 773 fill 37 msec (0.773000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     804 kB
Cost 0.621 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 684 fill 50 msec (0.684000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     708 kB
Cost 0.484 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 893 fill 54 msec (0.893000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.707 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 21 fill 17 msec (0.021000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1097 fill 16 msec (1.097000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.869 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 345 fill 22 msec (0.345000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.273 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1089 fill 23 msec (1.089000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.867 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1044 fill 35 msec (1.044000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.827 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 504 fill 36 msec (0.504000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.401 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1429 fill 51 msec (1.429000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     692 kB
Cost 0.989 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1582 fill 52 msec (1.582000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 1.183 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 28 fill 17 msec (0.028000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 935 fill 16 msec (0.935000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.699 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 366 fill 23 msec (0.366000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.272 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1169 fill 23 msec (1.169000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.874 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1261 fill 33 msec (1.261000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.943 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 720 fill 37 msec (0.720000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.541 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 488 fill 50 msec (0.488000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     692 kB
Cost 0.338 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 561 fill 52 msec (0.561000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.420 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 154 fill 37 msec (0.154000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.115 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 224 fill 17 msec (0.224000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.167 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 194 fill 22 msec (0.194000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.145 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 386 fill 24 msec (0.386000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.287 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 426 fill 34 msec (0.426000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.319 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 269 fill 36 msec (0.269000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.200 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 360 fill 50 msec (0.360000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     700 kB
Cost 0.252 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 407 fill 52 msec (0.407000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.313 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 13 fill 17 msec (0.013000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 194 fill 17 msec (0.194000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.149 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 182 fill 22 msec (0.182000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.139 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 242 fill 23 msec (0.242000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.186 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 270 fill 34 msec (0.270000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.208 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 239 fill 36 msec (0.239000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.183 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 328 fill 52 msec (0.328000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     712 kB
Cost 0.234 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 380 fill 52 msec (0.380000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.304 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 11 fill 17 msec (0.011000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     756 kB
Cost 0.008 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 16 fill 17 msec (0.016000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     760 kB
Cost 0.012 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 121 fill 22 msec (0.121000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.098 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 185 fill 24 msec (0.185000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     812 kB
Cost 0.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 232 fill 35 msec (0.232000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     812 kB
Cost 0.188 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 208 fill 36 msec (0.208000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.168 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 247 fill 52 msec (0.247000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.174 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 294 fill 54 msec (0.294000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.235 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 9 fill 18 msec (0.009000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     760 kB
Cost 0.007 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 171 fill 17 msec (0.171000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 96 fill 22 msec (0.096000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.077 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 199 fill 24 msec (0.199000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 210 fill 34 msec (0.210000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.166 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 143 fill 35 msec (0.143000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.114 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 768 fill 51 msec (0.768000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.528 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 819 fill 53 msec (0.819000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.613 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 60 fill 16 msec (0.060000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.045 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 168 fill 17 msec (0.168000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.126 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 297 fill 21 msec (0.297000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.221 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 368 fill 24 msec (0.368000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 498 fill 34 msec (0.498000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.373 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 489 fill 36 msec (0.489000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.366 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 244 fill 51 msec (0.244000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.168 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 260 fill 52 msec (0.260000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.193 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 65 fill 17 msec (0.065000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.048 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 86 fill 16 msec (0.086000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 133 fill 22 msec (0.133000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.099 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 138 fill 24 msec (0.138000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.103 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 177 fill 34 msec (0.177000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.132 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 185 fill 37 msec (0.185000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.138 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 297 fill 51 msec (0.297000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     696 kB
Cost 0.207 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 346 fill 52 msec (0.346000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.259 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 13 fill 17 msec (0.013000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 120 fill 17 msec (0.120000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.090 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 161 fill 22 msec (0.161000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.120 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 204 fill 24 msec (0.204000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.153 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 238 fill 35 msec (0.238000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.178 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 216 fill 36 msec (0.216000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.162 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=0 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 90 fill 10 msec (0.900000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     792 kB
Cost 0.713 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 140 fill 10 msec (1.400000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.445 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 53 fill 3 msec (0.530000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	     956 kB
Cost 0.507 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 67 fill 4 msec (0.670000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.691 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 82 fill 4 msec (0.820000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.846 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 93 fill 4 msec (0.930000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.960 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 101 fill 7 msec (1.010000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1036 kB
Cost 1.046 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 98 fill 7 msec (0.980000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.011 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 197 fill 10 msec (1.970000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     724 kB
Cost 1.426 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 241 fill 11 msec (2.410000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     860 kB
Cost 2.073 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4 fill 3 msec (0.040000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     844 kB
Cost 0.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 266 fill 4 msec (2.660000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 2.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 110 fill 4 msec (1.100000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     848 kB
Cost 0.933 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 265 fill 5 msec (2.650000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 2.258 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 258 fill 7 msec (2.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 2.208 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 147 fill 7 msec (1.470000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     848 kB
Cost 1.247 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 242 fill 10 msec (2.420000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     736 kB
Cost 1.781 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 245 fill 10 msec (2.450000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 2.215 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 8 fill 3 msec (0.080000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.067 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 13 fill 3 msec (0.130000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.109 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 120 fill 4 msec (1.200000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     920 kB
Cost 1.104 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 203 fill 4 msec (2.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     920 kB
Cost 1.868 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 230 fill 7 msec (2.300000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 2.079 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 163 fill 8 msec (1.630000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.474 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 148 fill 10 msec (1.480000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     732 kB
Cost 1.083 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 187 fill 11 msec (1.870000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.705 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4 fill 3 msec (0.040000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     836 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 226 fill 4 msec (2.260000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 2.061 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 78 fill 4 msec (0.780000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 0.711 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 229 fill 4 msec (2.290000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 2.088 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 218 fill 6 msec (2.180000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.988 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 108 fill 7 msec (1.080000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.989 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 323 fill 10 msec (3.230000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     708 kB
Cost 2.287 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 354 fill 11 msec (3.540000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.945 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4 fill 3 msec (0.040000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 187 fill 4 msec (1.870000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 1.563 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 82 fill 4 msec (0.820000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.682 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 237 fill 5 msec (2.370000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.972 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 264 fill 7 msec (2.640000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.196 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 157 fill 7 msec (1.570000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.306 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 105 fill 10 msec (1.050000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     708 kB
Cost 0.743 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 112 fill 10 msec (1.120000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.927 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 35 fill 4 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.290 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 35 fill 4 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.291 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 43 fill 4 msec (0.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.358 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 84 fill 4 msec (0.840000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.696 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 88 fill 7 msec (0.880000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.729 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 59 fill 7 msec (0.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.489 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 81 fill 10 msec (0.810000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     720 kB
Cost 0.583 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 92 fill 10 msec (0.920000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.788 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 3 fill 3 msec (0.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     840 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 43 fill 3 msec (0.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     848 kB
Cost 0.365 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 40 fill 4 msec (0.400000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     848 kB
Cost 0.339 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 55 fill 4 msec (0.550000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 0.469 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 59 fill 8 msec (0.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 0.503 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 56 fill 7 msec (0.560000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     848 kB
Cost 0.475 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 71 fill 10 msec (0.710000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     736 kB
Cost 0.523 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 83 fill 11 msec (0.830000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     908 kB
Cost 0.754 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2 fill 3 msec (0.020000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     840 kB
Cost 0.017 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 3 fill 3 msec (0.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     840 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 26 fill 5 msec (0.260000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     928 kB
Cost 0.241 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 39 fill 5 msec (0.390000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     928 kB
Cost 0.362 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 50 fill 7 msec (0.500000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     916 kB
Cost 0.458 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 40 fill 8 msec (0.400000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.365 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 53 fill 10 msec (0.530000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     732 kB
Cost 0.388 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 66 fill 10 msec (0.660000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.605 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 3 fill 3 msec (0.030000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     840 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 38 fill 3 msec (0.380000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.348 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 21 fill 5 msec (0.210000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.192 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 43 fill 5 msec (0.430000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.394 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 6 msec (0.470000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.431 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 31 fill 8 msec (0.310000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     920 kB
Cost 0.285 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 172 fill 10 msec (1.720000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     704 kB
Cost 1.211 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 187 fill 10 msec (1.870000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.556 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 12 fill 3 msec (0.120000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.100 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 35 fill 3 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.291 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 66 fill 5 msec (0.660000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.546 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 80 fill 5 msec (0.800000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.666 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 111 fill 6 msec (1.110000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.924 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 110 fill 7 msec (1.100000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.915 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 53 fill 10 msec (0.530000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     704 kB
Cost 0.373 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 57 fill 10 msec (0.570000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.472 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 14 fill 3 msec (0.140000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.116 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 17 fill 4 msec (0.170000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.141 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 29 fill 4 msec (0.290000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.240 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 28 fill 6 msec (0.280000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     824 kB
Cost 0.231 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 39 fill 6 msec (0.390000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.323 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 42 fill 7 msec (0.420000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.348 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 66 fill 10 msec (0.660000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     712 kB
Cost 0.470 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 75 fill 10 msec (0.750000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.621 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 3 fill 3 msec (0.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 26 fill 3 msec (0.260000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.216 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 35 fill 5 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.291 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 44 fill 4 msec (0.440000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.366 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 51 fill 7 msec (0.510000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.426 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 48 fill 7 msec (0.480000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.399 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=0 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 300 fill 30 msec (3.000000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     948 kB
Cost 2.844 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 462 fill 32 msec (4.620000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 7.669 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 172 fill 10 msec (1.720000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1424 kB
Cost 2.449 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 219 fill 10 msec (2.190000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 3.635 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 273 fill 13 msec (2.730000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 4.532 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 306 fill 15 msec (3.060000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 5.080 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 336 fill 21 msec (3.360000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 5.578 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 325 fill 22 msec (3.250000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1656 kB
Cost 5.382 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 694 fill 31 msec (6.940000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     808 kB
Cost 5.608 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 890 fill 32 msec (8.900000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 10.609 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 13 fill 10 msec (0.130000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 0.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1088 fill 10 msec (10.880000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1164 kB
Cost 12.664 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 385 fill 12 msec (3.850000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1164 kB
Cost 4.481 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1072 fill 14 msec (10.720000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1180 kB
Cost 12.650 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1018 fill 21 msec (10.180000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1184 kB
Cost 12.053 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 515 fill 22 msec (5.150000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1172 kB
Cost 6.036 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 875 fill 30 msec (8.750000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     844 kB
Cost 7.385 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 890 fill 31 msec (8.900000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 12.140 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 26 fill 10 msec (0.260000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 0.300 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 37 fill 10 msec (0.370000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 0.425 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 429 fill 13 msec (4.290000 one sort cycle)
VmPeak:	    9132 kB
VmHWM:	    1444 kB
Cost 6.195 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 831 fill 14 msec (8.310000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1452 kB
Cost 12.066 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 904 fill 20 msec (9.040000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 12.331 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 581 fill 22 msec (5.810000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1368 kB
Cost 7.948 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 547 fill 29 msec (5.470000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     852 kB
Cost 4.660 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 720 fill 31 msec (7.200000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 9.965 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 13 fill 10 msec (0.130000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1156 kB
Cost 0.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 971 fill 10 msec (9.710000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 13.439 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 276 fill 14 msec (2.760000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 3.820 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 934 fill 15 msec (9.340000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1380 kB
Cost 12.889 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 877 fill 20 msec (8.770000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 12.138 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 403 fill 22 msec (4.030000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 5.594 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1191 fill 29 msec (11.910000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     788 kB
Cost 9.385 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1320 fill 31 msec (13.200000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 15.101 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 16 fill 10 msec (0.160000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 0.183 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 834 fill 10 msec (8.340000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 9.541 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 290 fill 13 msec (2.900000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.318 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1004 fill 14 msec (10.040000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 11.486 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1063 fill 21 msec (10.630000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 12.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 565 fill 22 msec (5.650000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 6.441 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 346 fill 30 msec (3.460000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     788 kB
Cost 2.726 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 364 fill 31 msec (3.640000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 4.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 125 fill 10 msec (1.250000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.425 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 145 fill 10 msec (1.450000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.659 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 142 fill 14 msec (1.420000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.619 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 264 fill 14 msec (2.640000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 3.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 290 fill 20 msec (2.900000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 3.306 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 194 fill 22 msec (1.940000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.212 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 258 fill 31 msec (2.580000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     804 kB
Cost 2.074 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 302 fill 31 msec (3.020000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 3.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 6 fill 11 msec (0.060000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1156 kB
Cost 0.069 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 150 fill 10 msec (1.500000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1164 kB
Cost 1.746 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 136 fill 13 msec (1.360000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1164 kB
Cost 1.583 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 185 fill 15 msec (1.850000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1176 kB
Cost 2.176 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 198 fill 21 msec (1.980000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1184 kB
Cost 2.344 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 169 fill 22 msec (1.690000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1168 kB
Cost 1.974 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 244 fill 30 msec (2.440000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     844 kB
Cost 2.059 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 288 fill 31 msec (2.880000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 3.951 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 6 fill 11 msec (0.060000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 0.069 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 11 fill 10 msec (0.110000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 0.127 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 91 fill 13 msec (0.910000 one sort cycle)
VmPeak:	    9132 kB
VmHWM:	    1448 kB
Cost 1.318 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 155 fill 14 msec (1.550000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1452 kB
Cost 2.251 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 186 fill 20 msec (1.860000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.552 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 141 fill 22 msec (1.410000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 1.935 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 187 fill 30 msec (1.870000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     852 kB
Cost 1.593 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 226 fill 31 msec (2.260000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 3.137 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 5 fill 11 msec (0.050000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1156 kB
Cost 0.058 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 141 fill 10 msec (1.410000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 1.951 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 75 fill 14 msec (0.750000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 164 fill 14 msec (1.640000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 2.276 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 165 fill 21 msec (1.650000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 2.290 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 108 fill 22 msec (1.080000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.499 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 550 fill 30 msec (5.500000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     784 kB
Cost 4.312 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 602 fill 31 msec (6.020000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 6.887 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 33 fill 10 msec (0.330000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 0.378 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 116 fill 11 msec (1.160000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.327 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 223 fill 13 msec (2.230000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 2.551 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 275 fill 14 msec (2.750000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.146 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 357 fill 21 msec (3.570000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 4.084 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 367 fill 21 msec (3.670000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 4.198 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 180 fill 30 msec (1.800000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     784 kB
Cost 1.411 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 185 fill 32 msec (1.850000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.109 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 46 fill 10 msec (0.460000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 0.524 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 64 fill 10 msec (0.640000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 0.732 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 99 fill 14 msec (0.990000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.129 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 100 fill 14 msec (1.000000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.140 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 125 fill 20 msec (1.250000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.425 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 138 fill 22 msec (1.380000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.573 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 207 fill 31 msec (2.070000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     792 kB
Cost 1.639 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 241 fill 31 msec (2.410000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 2.767 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 8 fill 10 msec (0.080000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 0.092 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 89 fill 10 msec (0.890000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 105 fill 13 msec (1.050000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.201 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 135 fill 14 msec (1.350000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 154 fill 20 msec (1.540000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.762 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 165 fill 22 msec (1.650000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.888 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=0 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 114 fill 10 msec (11.400000 one sort cycle)
VmPeak:	    9100 kB
VmHWM:	    1496 kB
Cost 17.054 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 219 fill 11 msec (21.900000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 84.096 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 94 fill 4 msec (9.400000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3064 kB
Cost 28.802 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 86 fill 3 msec (8.600000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3844 kB
Cost 33.058 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 106 fill 5 msec (10.600000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 40.704 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 116 fill 5 msec (11.600000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 44.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 128 fill 7 msec (12.800000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3844 kB
Cost 49.203 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 122 fill 8 msec (12.200000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3844 kB
Cost 46.897 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 254 fill 10 msec (25.400000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1100 kB
Cost 27.940 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 309 fill 10 msec (30.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 72.430 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3 fill 4 msec (0.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2248 kB
Cost 0.674 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 336 fill 3 msec (33.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2268 kB
Cost 76.205 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 150 fill 4 msec (15.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2260 kB
Cost 33.900 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 351 fill 5 msec (35.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2296 kB
Cost 80.590 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 325 fill 7 msec (32.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2320 kB
Cost 75.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 194 fill 7 msec (19.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2276 kB
Cost 44.154 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 297 fill 10 msec (29.700000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1236 kB
Cost 36.709 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 310 fill 10 msec (31.000000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2856 kB
Cost 88.536 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 9 fill 3 msec (0.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 2.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 13 fill 3 msec (1.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 2.912 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 157 fill 4 msec (15.700000 one sort cycle)
VmPeak:	   11012 kB
VmHWM:	    3340 kB
Cost 52.438 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 331 fill 5 msec (33.100000 one sort cycle)
VmPeak:	   10620 kB
VmHWM:	    3040 kB
Cost 100.624 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 286 fill 8 msec (28.600000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 81.796 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 203 fill 8 msec (20.300000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2856 kB
Cost 57.977 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 191 fill 10 msec (19.100000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 24.142 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 244 fill 11 msec (24.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 73.883 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4 fill 3 msec (0.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    2244 kB
Cost 0.898 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 288 fill 3 msec (28.800000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 87.091 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 106 fill 4 msec (10.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 32.097 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 290 fill 5 msec (29.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 87.696 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 275 fill 7 msec (27.500000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 83.160 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 143 fill 7 msec (14.300000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 43.243 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 466 fill 10 msec (46.600000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1064 kB
Cost 49.582 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 518 fill 22 msec (51.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 115.825 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 12 fill 7 msec (1.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 2.688 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 274 fill 3 msec (27.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 61.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 137 fill 5 msec (13.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 30.633 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 337 fill 4 msec (33.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 75.218 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 333 fill 7 msec (33.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 74.459 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 202 fill 7 msec (20.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 45.086 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 128 fill 10 msec (12.800000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1060 kB
Cost 13.568 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 135 fill 10 msec (13.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 30.186 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 45 fill 3 msec (4.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 10.044 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 45 fill 3 msec (4.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 10.044 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 54 fill 4 msec (5.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 12.074 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 93 fill 5 msec (9.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 20.758 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 104 fill 7 msec (10.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 23.213 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 72 fill 7 msec (7.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 16.070 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 104 fill 10 msec (10.400000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1096 kB
Cost 11.398 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 118 fill 10 msec (11.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2348 kB
Cost 27.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1 fill 4 msec (0.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2248 kB
Cost 0.225 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 71 fill 3 msec (7.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2268 kB
Cost 16.103 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 53 fill 4 msec (5.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2264 kB
Cost 11.999 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 68 fill 5 msec (6.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2288 kB
Cost 15.558 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 78 fill 6 msec (7.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2324 kB
Cost 18.127 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 68 fill 7 msec (6.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2276 kB
Cost 15.477 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 90 fill 10 msec (9.000000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1236 kB
Cost 11.124 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 110 fill 10 msec (11.000000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 31.548 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 3 fill 3 msec (0.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2244 kB
Cost 0.673 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 4 fill 3 msec (0.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2248 kB
Cost 0.899 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 36 fill 5 msec (3.600000 one sort cycle)
VmPeak:	   11012 kB
VmHWM:	    3348 kB
Cost 12.053 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 53 fill 5 msec (5.300000 one sort cycle)
VmPeak:	   10620 kB
VmHWM:	    3052 kB
Cost 16.176 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 63 fill 7 msec (6.300000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2864 kB
Cost 18.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 53 fill 7 msec (5.300000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2864 kB
Cost 15.179 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 71 fill 10 msec (7.100000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 8.974 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 85 fill 11 msec (8.500000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 25.738 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 2 fill 3 msec (0.200000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    2248 kB
Cost 0.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 4 msec (4.700000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 14.232 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 29 fill 5 msec (2.900000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 8.781 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 56 fill 6 msec (5.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 16.957 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 61 fill 7 msec (6.100000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3032 kB
Cost 18.495 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 44 fill 7 msec (4.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 13.323 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 227 fill 9 msec (22.700000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1060 kB
Cost 24.062 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 245 fill 10 msec (24.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 54.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 12 fill 3 msec (1.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 2.683 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 44 fill 3 msec (4.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 9.838 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 87 fill 5 msec (8.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 19.488 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 105 fill 5 msec (10.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 23.478 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 140 fill 7 msec (14.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 31.304 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 137 fill 7 msec (13.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 30.688 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson quick_sort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 65 fill 10 msec (6.500000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1060 kB
Cost 6.890 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 70 fill 10 msec (7.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2228 kB
Cost 15.596 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 17 fill 3 msec (1.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 3.794 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 23 fill 3 msec (2.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 5.134 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 40 fill 4 msec (4.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 8.928 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 37 fill 5 msec (3.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 8.258 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 48 fill 7 msec (4.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 10.714 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 53 fill 7 msec (5.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 11.830 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 75 fill 10 msec (7.500000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1068 kB
Cost 8.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 88 fill 11 msec (8.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 19.712 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 3 fill 3 msec (0.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 0.671 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 53 fill 7 msec (5.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 11.851 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 39 fill 5 msec (3.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 8.720 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 48 fill 4 msec (4.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 10.733 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 55 fill 7 msec (5.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 12.298 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 54 fill 7 msec (5.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 12.074 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=0 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 365 fill 32 msec (36.500000 one sort cycle)
VmPeak:	   10660 kB
VmHWM:	    3056 kB
Cost 111.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 572 fill 32 msec (57.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10088 kB
Cost 577.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 210 fill 10 msec (21.000000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    7748 kB
Cost 162.708 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 283 fill 10 msec (28.300000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10088 kB
Cost 285.490 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 352 fill 14 msec (35.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10088 kB
Cost 355.098 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 383 fill 16 msec (38.300000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10088 kB
Cost 386.370 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 420 fill 23 msec (42.000000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10092 kB
Cost 423.864 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 444 fill 24 msec (44.400000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10092 kB
Cost 448.085 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 850 fill 30 msec (85.000000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1928 kB
Cost 163.880 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 944 fill 31 msec (94.400000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5584 kB
Cost 527.130 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 14 fill 10 msec (1.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5372 kB
Cost 7.521 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 939 fill 10 msec (93.900000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5404 kB
Cost 507.436 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 494 fill 13 msec (49.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5412 kB
Cost 267.353 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 921 fill 15 msec (92.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5484 kB
Cost 505.076 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 946 fill 24 msec (94.600000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5516 kB
Cost 521.814 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 604 fill 26 msec (60.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5440 kB
Cost 328.576 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 897 fill 30 msec (89.700000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2360 kB
Cost 211.692 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 922 fill 33 msec (92.200000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 664.578 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 26 fill 11 msec (2.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5368 kB
Cost 13.957 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 38 fill 10 msec (3.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 20.383 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 496 fill 14 msec (49.600000 one sort cycle)
VmPeak:	   15036 kB
VmHWM:	    7352 kB
Cost 364.659 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 727 fill 16 msec (72.700000 one sort cycle)
VmPeak:	   15088 kB
VmHWM:	    7480 kB
Cost 543.796 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 830 fill 25 msec (83.000000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7720 kB
Cost 640.760 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 646 fill 26 msec (64.600000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7712 kB
Cost 498.195 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 630 fill 30 msec (63.000000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2436 kB
Cost 153.468 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 722 fill 32 msec (72.200000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 556.518 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 13 fill 10 msec (1.300000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    5368 kB
Cost 6.978 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 758 fill 10 msec (75.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 584.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 352 fill 14 msec (35.200000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 271.322 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 772 fill 16 msec (77.200000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 595.058 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 742 fill 24 msec (74.200000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 571.934 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 453 fill 25 msec (45.300000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 349.172 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1608 fill 30 msec (160.800000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1848 kB
Cost 297.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1533 fill 31 msec (153.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 821.688 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 16 fill 11 msec (1.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 8.576 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 562 fill 10 msec (56.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 301.232 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 354 fill 15 msec (35.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 189.744 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 822 fill 15 msec (82.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 440.592 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 971 fill 23 msec (97.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 520.844 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 654 fill 25 msec (65.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 350.544 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 412 fill 30 msec (41.200000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1840 kB
Cost 75.808 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 431 fill 33 msec (43.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 230.844 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 148 fill 9 msec (14.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 79.328 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 150 fill 10 msec (15.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 80.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 206 fill 14 msec (20.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 110.334 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 307 fill 16 msec (30.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 164.552 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 338 fill 25 msec (33.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 181.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 235 fill 25 msec (23.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 125.866 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 349 fill 30 msec (34.900000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1924 kB
Cost 67.148 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 394 fill 32 msec (39.400000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5584 kB
Cost 220.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 7 fill 11 msec (0.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5372 kB
Cost 3.760 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 176 fill 10 msec (17.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5408 kB
Cost 95.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 184 fill 14 msec (18.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5416 kB
Cost 99.654 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 225 fill 16 msec (22.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5484 kB
Cost 123.390 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 253 fill 25 msec (25.300000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5516 kB
Cost 139.555 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 232 fill 25 msec (23.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5444 kB
Cost 126.301 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 282 fill 32 msec (28.200000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2356 kB
Cost 66.439 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 352 fill 32 msec (35.200000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7212 kB
Cost 253.862 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 8 fill 10 msec (0.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5368 kB
Cost 4.294 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 12 fill 10 msec (1.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5368 kB
Cost 6.442 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 122 fill 13 msec (12.200000 one sort cycle)
VmPeak:	   15036 kB
VmHWM:	    7360 kB
Cost 89.792 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 156 fill 16 msec (15.600000 one sort cycle)
VmPeak:	   15088 kB
VmHWM:	    7488 kB
Cost 116.813 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 198 fill 24 msec (19.800000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7728 kB
Cost 153.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 175 fill 24 msec (17.500000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7716 kB
Cost 135.030 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 228 fill 31 msec (22.800000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2436 kB
Cost 55.541 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 288 fill 31 msec (28.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 222.106 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 8 fill 10 msec (0.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    5372 kB
Cost 4.298 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 136 fill 10 msec (13.600000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 104.883 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 107 fill 13 msec (10.700000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7716 kB
Cost 82.561 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 163 fill 15 msec (16.300000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 125.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 181 fill 23 msec (18.100000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 139.587 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 144 fill 25 msec (14.400000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 111.053 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 822 fill 30 msec (82.200000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1840 kB
Cost 151.248 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 953 fill 32 msec (95.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 510.808 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 36 fill 10 msec (3.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 19.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 134 fill 11 msec (13.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 71.824 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 314 fill 15 msec (31.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 168.430 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 370 fill 16 msec (37.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 198.320 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 491 fill 24 msec (49.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 263.176 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 621 fill 24 msec (62.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 332.856 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson quick_sort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 217 fill 30 msec (21.700000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1836 kB
Cost 39.841 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 227 fill 32 msec (22.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 121.672 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 62 fill 9 msec (6.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 33.207 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 76 fill 10 msec (7.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 40.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 126 fill 14 msec (12.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 67.486 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 124 fill 16 msec (12.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 66.414 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 160 fill 23 msec (16.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5352 kB
Cost 85.632 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 176 fill 25 msec (17.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 94.266 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 249 fill 30 msec (24.900000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1848 kB
Cost 46.015 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 300 fill 32 msec (30.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 160.800 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 9 fill 10 msec (0.900000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 4.824 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 111 fill 10 msec (11.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 59.540 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 141 fill 14 msec (14.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 75.576 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 167 fill 15 msec (16.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 89.579 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 195 fill 24 msec (19.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 104.520 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 187 fill 24 msec (18.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 100.232 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=0 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 1324 fill 104 msec (132.400000 one sort cycle)
VmPeak:	   16132 kB
VmHWM:	    8532 kB
Cost 1129.637 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 2118 fill 109 msec (211.800000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31968 kB
Cost 6770.822 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 778 fill 34 msec (77.800000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   24164 kB
Cost 1879.959 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1035 fill 35 msec (103.500000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31972 kB
Cost 3309.102 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1320 fill 64 msec (132.000000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31968 kB
Cost 4219.776 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1406 fill 76 msec (140.600000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31968 kB
Cost 4494.701 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1524 fill 134 msec (152.400000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31968 kB
Cost 4871.923 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1497 fill 142 msec (149.700000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31972 kB
Cost 4786.208 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 3144 fill 122 msec (314.400000 one sort cycle)
VmPeak:	   12356 kB
VmHWM:	    4748 kB
Cost 1492.771 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3742 fill 105 msec (374.200000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17132 kB
Cost 6410.794 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 45 fill 33 msec (4.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16312 kB
Cost 73.404 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3971 fill 33 msec (397.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16372 kB
Cost 6501.321 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1891 fill 65 msec (189.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16388 kB
Cost 3098.971 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3992 fill 75 msec (399.200000 one sort cycle)
VmPeak:	   24228 kB
VmHWM:	   16580 kB
Cost 6618.736 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3890 fill 135 msec (389.000000 one sort cycle)
VmPeak:	   24512 kB
VmHWM:	   16892 kB
Cost 6570.988 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2376 fill 144 msec (237.600000 one sort cycle)
VmPeak:	   24084 kB
VmHWM:	   16448 kB
Cost 3908.045 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 3636 fill 102 msec (363.600000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6124 kB
Cost 2226.686 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3748 fill 106 msec (374.800000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 8361.038 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 90 fill 33 msec (9.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16308 kB
Cost 146.772 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 128 fill 34 msec (12.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 208.691 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2071 fill 64 msec (207.100000 one sort cycle)
VmPeak:	   35208 kB
VmHWM:	   23376 kB
Cost 4841.170 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3384 fill 74 msec (338.400000 one sort cycle)
VmPeak:	   35408 kB
VmHWM:	   23964 kB
Cost 8109.418 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3752 fill 135 msec (375.200000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   23768 kB
Cost 8917.754 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2526 fill 143 msec (252.600000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 5635.001 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 2339 fill 103 msec (233.900000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 1529.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3106 fill 107 msec (310.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 7491.672 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 44 fill 34 msec (4.400000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   16308 kB
Cost 71.755 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3648 fill 33 msec (364.800000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 8798.976 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1363 fill 66 msec (136.300000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 3287.556 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3672 fill 77 msec (367.200000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 8856.864 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3459 fill 133 msec (345.900000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 8343.108 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1771 fill 145 msec (177.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 4272.360 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 6380 fill 104 msec (638.000000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4580 kB
Cost 2922.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 6085 fill 105 msec (608.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 9918.550 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 57 fill 34 msec (5.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 92.910 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2266 fill 34 msec (226.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 3694.486 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1357 fill 65 msec (135.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2211.910 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3279 fill 76 msec (327.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 5344.770 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3724 fill 135 msec (372.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 6070.120 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2607 fill 145 msec (260.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4249.410 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 1492 fill 102 msec (149.200000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4572 kB
Cost 682.142 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1564 fill 105 msec (156.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 2548.694 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 556 fill 35 msec (55.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 906.058 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 564 fill 34 msec (56.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 919.094 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 659 fill 67 msec (65.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1074.170 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1104 fill 74 msec (110.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1799.078 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1223 fill 136 msec (122.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1993.001 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 868 fill 144 msec (86.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1414.493 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 1307 fill 104 msec (130.700000 one sort cycle)
VmPeak:	   12356 kB
VmHWM:	    4744 kB
Cost 620.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1445 fill 107 msec (144.500000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17132 kB
Cost 2475.574 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 29 fill 35 msec (2.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16316 kB
Cost 47.316 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 694 fill 34 msec (69.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16372 kB
Cost 1136.217 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 680 fill 66 msec (68.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16388 kB
Cost 1114.384 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 873 fill 76 msec (87.300000 one sort cycle)
VmPeak:	   24228 kB
VmHWM:	   16580 kB
Cost 1447.434 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 928 fill 134 msec (92.800000 one sort cycle)
VmPeak:	   24512 kB
VmHWM:	   16896 kB
Cost 1567.949 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 837 fill 143 msec (83.700000 one sort cycle)
VmPeak:	   24084 kB
VmHWM:	   16448 kB
Cost 1376.698 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 1082 fill 102 msec (108.200000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6124 kB
Cost 662.617 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 1314 fill 106 msec (131.400000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 2932.322 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 49 fill 35 msec (4.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16308 kB
Cost 79.909 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 55 fill 34 msec (5.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16308 kB
Cost 89.694 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 478 fill 66 msec (47.800000 one sort cycle)
VmPeak:	   35208 kB
VmHWM:	   23388 kB
Cost 1117.946 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 705 fill 77 msec (70.500000 one sort cycle)
VmPeak:	   35408 kB
VmHWM:	   23972 kB
Cost 1690.026 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 802 fill 133 msec (80.200000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   23776 kB
Cost 1906.835 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 647 fill 146 msec (64.700000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1443.845 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 866 fill 103 msec (86.600000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 566.364 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1110 fill 107 msec (111.000000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 2677.764 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 27 fill 33 msec (2.700000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   16312 kB
Cost 44.042 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 649 fill 33 msec (64.900000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 1565.388 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 410 fill 66 msec (41.000000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 989.084 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 717 fill 75 msec (71.700000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1729.691 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 797 fill 137 msec (79.700000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24128 kB
Cost 1923.002 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 549 fill 146 msec (54.900000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1324.408 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 2793 fill 101 msec (279.300000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4576 kB
Cost 1278.077 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3190 fill 106 msec (319.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 5199.700 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 116 fill 34 msec (11.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 189.126 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 479 fill 33 msec (47.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 780.770 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1180 fill 66 msec (118.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1923.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1375 fill 76 msec (137.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2241.250 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1734 fill 136 msec (173.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2826.420 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1722 fill 145 msec (172.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2806.860 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson quick_sort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 772 fill 101 msec (77.200000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4576 kB
Cost 353.267 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 855 fill 105 msec (85.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1393.308 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 228 fill 34 msec (22.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 371.549 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 310 fill 33 msec (31.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 505.176 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 514 fill 65 msec (51.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 837.614 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 481 fill 75 msec (48.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 783.838 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 573 fill 158 msec (57.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 933.761 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 662 fill 147 msec (66.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1078.795 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 884 fill 102 msec (88.400000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4584 kB
Cost 405.226 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1087 fill 105 msec (108.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1771.810 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 28 fill 33 msec (2.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 45.640 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 428 fill 35 msec (42.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 697.640 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 483 fill 67 msec (48.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 787.483 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 586 fill 74 msec (58.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 955.180 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 659 fill 133 msec (65.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1074.170 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 624 fill 143 msec (62.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 1017.370 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000 MAX=10 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 60 fill 10 msec (0.060000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     720 kB
Cost 0.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 89 fill 10 msec (0.089000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.067 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 66 fill 4 msec (0.066000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.049 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 68 fill 4 msec (0.068000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.051 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 72 fill 6 msec (0.072000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.054 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 77 fill 6 msec (0.077000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.058 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 82 fill 8 msec (0.082000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.061 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 81 fill 8 msec (0.081000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.060 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 122 fill 10 msec (0.122000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.084 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 177 fill 10 msec (0.177000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.124 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 159 fill 4 msec (0.159000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.112 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 187 fill 3 msec (0.187000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.132 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 163 fill 5 msec (0.163000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.114 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 187 fill 6 msec (0.187000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.131 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 185 fill 8 msec (0.185000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.130 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 167 fill 8 msec (0.167000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.117 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 192 fill 10 msec (0.192000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.132 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 197 fill 10 msec (0.197000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.139 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 187 fill 4 msec (0.187000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.132 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 222 fill 4 msec (0.222000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.156 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 189 fill 5 msec (0.189000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.133 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 193 fill 6 msec (0.193000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 195 fill 7 msec (0.195000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.137 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 195 fill 8 msec (0.195000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.137 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 109 fill 11 msec (0.109000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.074 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 166 fill 10 msec (0.166000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.116 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 159 fill 3 msec (0.159000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.111 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 176 fill 4 msec (0.176000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 159 fill 6 msec (0.159000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.111 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 174 fill 6 msec (0.174000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 176 fill 8 msec (0.176000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 166 fill 8 msec (0.166000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.116 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 159 fill 10 msec (0.159000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     676 kB
Cost 0.107 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 189 fill 10 msec (0.189000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.130 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 153 fill 5 msec (0.153000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.105 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 177 fill 4 msec (0.177000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 177 fill 5 msec (0.177000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 198 fill 6 msec (0.198000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 197 fill 8 msec (0.197000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 180 fill 8 msec (0.180000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.124 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 52 fill 11 msec (0.052000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.035 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 51 fill 10 msec (0.051000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.035 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 45 fill 4 msec (0.045000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 48 fill 4 msec (0.048000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 51 fill 5 msec (0.051000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.035 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 50 fill 6 msec (0.050000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 50 fill 8 msec (0.050000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 51 fill 8 msec (0.051000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.035 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 40 fill 10 msec (0.040000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     684 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 45 fill 10 msec (0.045000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.032 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 31 fill 4 msec (0.031000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.022 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 33 fill 4 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.023 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 41 fill 5 msec (0.041000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.029 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 41 fill 6 msec (0.041000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.029 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 43 fill 8 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 43 fill 8 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.030 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 45 fill 10 msec (0.045000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     692 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 51 fill 10 msec (0.051000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.036 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 31 fill 4 msec (0.031000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.022 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 33 fill 5 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.023 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 42 fill 5 msec (0.042000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 43 fill 6 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     716 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 46 fill 8 msec (0.046000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 46 fill 9 msec (0.046000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.033 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 31 fill 10 msec (0.031000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 31 fill 11 msec (0.031000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.022 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 25 fill 4 msec (0.025000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 26 fill 4 msec (0.026000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 29 fill 6 msec (0.029000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.020 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 33 fill 5 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.023 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 33 fill 8 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.023 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 31 fill 8 msec (0.031000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.022 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 81 fill 10 msec (0.081000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.054 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 83 fill 10 msec (0.083000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.057 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 53 fill 4 msec (0.053000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.037 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 56 fill 4 msec (0.056000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 71 fill 6 msec (0.071000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.049 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 77 fill 5 msec (0.077000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.053 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 80 fill 8 msec (0.080000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.055 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 78 fill 9 msec (0.078000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.054 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 89 fill 10 msec (0.089000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.060 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 95 fill 10 msec (0.095000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.065 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 90 fill 4 msec (0.090000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.062 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 87 fill 4 msec (0.087000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.060 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 92 fill 6 msec (0.092000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.063 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 93 fill 5 msec (0.093000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 93 fill 9 msec (0.093000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 95 fill 8 msec (0.095000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.065 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 39 fill 10 msec (0.039000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 45 fill 10 msec (0.045000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 23 fill 4 msec (0.023000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 28 fill 4 msec (0.028000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.019 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 35 fill 6 msec (0.035000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.024 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 39 fill 6 msec (0.039000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 44 fill 8 msec (0.044000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 41 fill 8 msec (0.041000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.028 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=10 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 315 fill 51 msec (0.315000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     752 kB
Cost 0.237 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 510 fill 53 msec (0.510000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.447 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 390 fill 22 msec (0.390000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     872 kB
Cost 0.340 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 431 fill 21 msec (0.431000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.378 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 422 fill 26 msec (0.422000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.370 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 457 fill 28 msec (0.457000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 487 fill 39 msec (0.487000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.427 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 470 fill 42 msec (0.470000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.412 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 696 fill 52 msec (0.696000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.490 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 897 fill 52 msec (0.897000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.689 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 834 fill 21 msec (0.834000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.641 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 946 fill 21 msec (0.946000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.730 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 875 fill 27 msec (0.875000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.672 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 959 fill 28 msec (0.959000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.737 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1139 fill 39 msec (1.139000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.875 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 923 fill 41 msec (0.923000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.713 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 921 fill 50 msec (0.921000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     708 kB
Cost 0.652 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 935 fill 54 msec (0.935000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.741 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 815 fill 22 msec (0.815000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.645 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 949 fill 21 msec (0.949000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.755 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 834 fill 27 msec (0.834000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.661 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 975 fill 28 msec (0.975000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.776 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 962 fill 39 msec (0.962000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.762 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 862 fill 42 msec (0.862000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.683 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 547 fill 50 msec (0.547000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.385 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 757 fill 52 msec (0.757000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 646 fill 20 msec (0.646000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.514 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 798 fill 21 msec (0.798000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.632 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 755 fill 26 msec (0.755000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.598 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 790 fill 28 msec (0.790000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.626 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 759 fill 39 msec (0.759000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.601 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 796 fill 42 msec (0.796000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.630 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1001 fill 52 msec (1.001000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     692 kB
Cost 0.693 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1004 fill 53 msec (1.004000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.755 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 853 fill 21 msec (0.853000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.638 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1118 fill 20 msec (1.118000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.836 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 946 fill 27 msec (0.946000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.704 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1067 fill 29 msec (1.067000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.798 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1053 fill 39 msec (1.053000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.788 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 974 fill 40 msec (0.974000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.729 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 298 fill 51 msec (0.298000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.205 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 283 fill 52 msec (0.283000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.212 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 267 fill 21 msec (0.267000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.199 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 263 fill 22 msec (0.263000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.196 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 278 fill 27 msec (0.278000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.207 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 319 fill 28 msec (0.319000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.237 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 281 fill 40 msec (0.281000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.209 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 287 fill 40 msec (0.287000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.214 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 226 fill 51 msec (0.226000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     700 kB
Cost 0.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 263 fill 53 msec (0.263000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.202 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 196 fill 45 msec (0.196000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.151 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 218 fill 21 msec (0.218000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.168 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 240 fill 27 msec (0.240000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.184 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 249 fill 29 msec (0.249000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.191 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 263 fill 39 msec (0.263000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.202 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 261 fill 40 msec (0.261000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.200 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 226 fill 52 msec (0.226000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     712 kB
Cost 0.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 259 fill 54 msec (0.259000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.207 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 145 fill 21 msec (0.145000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.116 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 178 fill 21 msec (0.178000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.142 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 176 fill 26 msec (0.176000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.141 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 199 fill 29 msec (0.199000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.159 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 225 fill 39 msec (0.225000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.179 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 216 fill 41 msec (0.216000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.172 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 160 fill 52 msec (0.160000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.113 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 170 fill 53 msec (0.170000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.135 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 130 fill 21 msec (0.130000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.103 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 133 fill 21 msec (0.133000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.106 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 152 fill 27 msec (0.152000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.121 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 167 fill 28 msec (0.167000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.133 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 172 fill 40 msec (0.172000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.137 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 167 fill 41 msec (0.167000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.133 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 516 fill 50 msec (0.516000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.355 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 545 fill 52 msec (0.545000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.408 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 404 fill 21 msec (0.404000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.302 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 398 fill 21 msec (0.398000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.299 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 486 fill 27 msec (0.486000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.364 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 503 fill 28 msec (0.503000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.376 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 527 fill 39 msec (0.527000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.396 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 522 fill 40 msec (0.522000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.390 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 1283 fill 51 msec (1.283000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.903 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1986 fill 53 msec (1.986000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 1.525 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1959 fill 21 msec (1.959000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 1.497 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1960 fill 21 msec (1.960000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 1.497 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1980 fill 26 msec (1.980000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 1.521 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2015 fill 28 msec (2.015000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 1.539 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1979 fill 38 msec (1.979000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 1.512 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1985 fill 41 msec (1.985000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 1.517 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 196 fill 50 msec (0.196000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     696 kB
Cost 0.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 239 fill 52 msec (0.239000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.179 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 142 fill 21 msec (0.142000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.106 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 157 fill 21 msec (0.157000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.117 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 216 fill 26 msec (0.216000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 207 fill 27 msec (0.207000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.156 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 222 fill 39 msec (0.222000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.167 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 215 fill 41 msec (0.215000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.162 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=10 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 65 fill 11 msec (0.650000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     796 kB
Cost 0.517 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 109 fill 11 msec (1.090000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.125 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 85 fill 4 msec (0.850000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1028 kB
Cost 0.874 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 92 fill 3 msec (0.920000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.949 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 90 fill 6 msec (0.900000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.929 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 97 fill 5 msec (0.970000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1028 kB
Cost 0.997 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 102 fill 7 msec (1.020000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1028 kB
Cost 1.049 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 103 fill 8 msec (1.030000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.063 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 148 fill 11 msec (1.480000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     728 kB
Cost 1.077 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 191 fill 10 msec (1.910000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 1.627 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 175 fill 4 msec (1.750000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.498 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 198 fill 4 msec (1.980000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 1.687 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 179 fill 5 msec (1.790000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.532 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 202 fill 6 msec (2.020000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.729 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 200 fill 7 msec (2.000000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.712 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 186 fill 8 msec (1.860000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 1.585 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 196 fill 9 msec (1.960000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     740 kB
Cost 1.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 201 fill 11 msec (2.010000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.817 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 238 fill 4 msec (2.380000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 2.152 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 202 fill 4 msec (2.020000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.826 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 176 fill 6 msec (1.760000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.591 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 203 fill 6 msec (2.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     908 kB
Cost 1.843 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 206 fill 8 msec (2.060000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.862 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 186 fill 8 msec (1.860000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.681 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 116 fill 10 msec (1.160000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     736 kB
Cost 0.854 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 154 fill 11 msec (1.540000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.404 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 138 fill 4 msec (1.380000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 1.264 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 159 fill 4 msec (1.590000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 142 fill 6 msec (1.420000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.295 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 160 fill 6 msec (1.600000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.459 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 162 fill 7 msec (1.620000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     908 kB
Cost 1.471 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 146 fill 8 msec (1.460000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 1.337 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 196 fill 10 msec (1.960000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     712 kB
Cost 1.396 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 207 fill 10 msec (2.070000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.722 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 176 fill 4 msec (1.760000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 1.457 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 198 fill 5 msec (1.980000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 1.639 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 192 fill 6 msec (1.920000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.597 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 213 fill 6 msec (2.130000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.772 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 233 fill 8 msec (2.330000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.939 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 203 fill 8 msec (2.030000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.689 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 64 fill 11 msec (0.640000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     704 kB
Cost 0.451 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 59 fill 11 msec (0.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     824 kB
Cost 0.486 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 58 fill 4 msec (0.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 56 fill 4 msec (0.560000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.466 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 58 fill 6 msec (0.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 59 fill 5 msec (0.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.489 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 58 fill 8 msec (0.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 60 fill 8 msec (0.600000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.497 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 49 fill 11 msec (0.490000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     724 kB
Cost 0.355 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 58 fill 11 msec (0.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.496 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 47 fill 4 msec (0.470000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 0.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 46 fill 5 msec (0.460000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 0.392 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 53 fill 5 msec (0.530000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.454 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 54 fill 6 msec (0.540000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     860 kB
Cost 0.464 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 57 fill 8 msec (0.570000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.488 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 59 fill 8 msec (0.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.505 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 46 fill 11 msec (0.460000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     740 kB
Cost 0.340 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 54 fill 10 msec (0.540000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     908 kB
Cost 0.490 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 32 fill 4 msec (0.320000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.292 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 35 fill 5 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.319 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 39 fill 5 msec (0.390000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.356 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 42 fill 6 msec (0.420000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.383 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 48 fill 8 msec (0.480000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.438 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 48 fill 8 msec (0.480000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.438 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 33 fill 11 msec (0.330000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     732 kB
Cost 0.242 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 38 fill 10 msec (0.380000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.348 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 28 fill 4 msec (0.280000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.256 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 30 fill 5 msec (0.300000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 35 fill 5 msec (0.350000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.321 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 35 fill 6 msec (0.350000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.321 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 37 fill 7 msec (0.370000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.339 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 38 fill 8 msec (0.380000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     920 kB
Cost 0.350 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 107 fill 11 msec (1.070000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     708 kB
Cost 0.758 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 132 fill 11 msec (1.320000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.098 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 85 fill 4 msec (0.850000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.707 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 119 fill 3 msec (1.190000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.990 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 102 fill 6 msec (1.020000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.853 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 105 fill 5 msec (1.050000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.874 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 111 fill 8 msec (1.110000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.928 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 111 fill 8 msec (1.110000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.924 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 497 fill 10 msec (4.970000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     736 kB
Cost 3.658 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 783 fill 10 msec (7.830000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     880 kB
Cost 6.890 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 775 fill 4 msec (7.750000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     872 kB
Cost 6.758 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 766 fill 4 msec (7.660000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     872 kB
Cost 6.680 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 779 fill 5 msec (7.790000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     872 kB
Cost 6.793 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 784 fill 6 msec (7.840000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     872 kB
Cost 6.836 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 816 fill 7 msec (8.160000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     872 kB
Cost 7.116 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 779 fill 8 msec (7.790000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     868 kB
Cost 6.762 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 41 fill 11 msec (0.410000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     712 kB
Cost 0.292 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 51 fill 10 msec (0.510000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.424 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 33 fill 4 msec (0.330000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 35 fill 4 msec (0.350000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.291 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 41 fill 6 msec (0.410000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.343 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 44 fill 6 msec (0.440000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.368 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 47 fill 8 msec (0.470000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.391 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 45 fill 8 msec (0.450000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.374 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=10 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 217 fill 31 msec (2.170000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     948 kB
Cost 2.057 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 358 fill 32 msec (3.580000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1636 kB
Cost 5.857 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 275 fill 13 msec (2.750000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1640 kB
Cost 4.510 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 291 fill 12 msec (2.910000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1640 kB
Cost 4.772 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 310 fill 16 msec (3.100000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1640 kB
Cost 5.084 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 320 fill 18 msec (3.200000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1640 kB
Cost 5.248 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 331 fill 23 msec (3.310000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1640 kB
Cost 5.428 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 337 fill 25 msec (3.370000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1636 kB
Cost 5.513 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 523 fill 31 msec (5.230000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     812 kB
Cost 4.247 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 707 fill 31 msec (7.070000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 8.456 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 681 fill 12 msec (6.810000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 8.145 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 742 fill 13 msec (7.420000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 8.845 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 687 fill 15 msec (6.870000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 8.189 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 742 fill 17 msec (7.420000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 8.845 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 731 fill 23 msec (7.310000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 8.714 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 702 fill 24 msec (7.020000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 8.368 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 685 fill 30 msec (6.850000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     844 kB
Cost 5.781 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 703 fill 31 msec (7.030000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 9.589 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 683 fill 12 msec (6.830000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 9.316 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 687 fill 13 msec (6.870000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1368 kB
Cost 9.398 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 691 fill 16 msec (6.910000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 9.425 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 713 fill 16 msec (7.130000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1360 kB
Cost 9.697 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 773 fill 23 msec (7.730000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 10.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 690 fill 25 msec (6.900000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 9.412 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 417 fill 31 msec (4.170000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 3.536 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 614 fill 31 msec (6.140000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 8.522 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 545 fill 13 msec (5.450000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 7.543 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 607 fill 12 msec (6.070000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 8.401 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 551 fill 16 msec (5.510000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 7.626 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 605 fill 17 msec (6.050000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 8.373 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 606 fill 23 msec (6.060000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 8.411 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 567 fill 25 msec (5.670000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 7.847 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 683 fill 31 msec (6.830000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     788 kB
Cost 5.382 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 731 fill 33 msec (7.310000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 8.392 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 676 fill 13 msec (6.760000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 7.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 748 fill 13 msec (7.480000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.557 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 702 fill 17 msec (7.020000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 767 fill 17 msec (7.670000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.774 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 766 fill 24 msec (7.660000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.763 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 718 fill 24 msec (7.180000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.214 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 211 fill 31 msec (2.110000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     784 kB
Cost 1.654 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 195 fill 33 msec (1.950000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.223 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 185 fill 13 msec (1.850000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.109 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 170 fill 27 msec (1.700000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 1.938 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 204 fill 16 msec (2.040000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 2.334 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 187 fill 17 msec (1.870000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.132 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 192 fill 23 msec (1.920000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.189 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 192 fill 24 msec (1.920000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 2.196 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 152 fill 30 msec (1.520000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     808 kB
Cost 1.228 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 184 fill 31 msec (1.840000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 2.201 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 153 fill 12 msec (1.530000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 1.824 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 160 fill 12 msec (1.600000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 1.907 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 169 fill 16 msec (1.690000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 175 fill 18 msec (1.750000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.086 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 183 fill 22 msec (1.830000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 178 fill 25 msec (1.780000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.122 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 154 fill 30 msec (1.540000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 1.306 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 177 fill 32 msec (1.770000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.428 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 125 fill 12 msec (1.250000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 1.715 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 175 fill 13 msec (1.750000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.401 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 154 fill 15 msec (1.540000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.113 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 158 fill 17 msec (1.580000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.168 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 168 fill 24 msec (1.680000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.305 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 167 fill 25 msec (1.670000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.291 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 110 fill 31 msec (1.100000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 0.933 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 129 fill 32 msec (1.290000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.791 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 110 fill 13 msec (1.100000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 1.522 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 112 fill 13 msec (1.120000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.555 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 117 fill 16 msec (1.170000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1392 kB
Cost 1.629 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 280 fill 20 msec (2.800000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 3.886 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 126 fill 24 msec (1.260000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.749 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 126 fill 25 msec (1.260000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.749 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 303 fill 31 msec (3.030000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     788 kB
Cost 2.388 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 335 fill 32 msec (3.350000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.832 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 263 fill 13 msec (2.630000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 3.019 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 270 fill 13 msec (2.700000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 3.100 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 313 fill 17 msec (3.130000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.581 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 325 fill 17 msec (3.250000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.718 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 324 fill 23 msec (3.240000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.707 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 324 fill 25 msec (3.240000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.707 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 4374 fill 30 msec (43.740000 one sort cycle)
VmPeak:	    8464 kB
VmHWM:	     880 kB
Cost 38.491 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6984 fill 32 msec (69.840000 one sort cycle)
VmPeak:	    8868 kB
VmHWM:	    1284 kB
Cost 89.675 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6855 fill 13 msec (68.550000 one sort cycle)
VmPeak:	    8856 kB
VmHWM:	    1276 kB
Cost 87.470 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6792 fill 12 msec (67.920000 one sort cycle)
VmPeak:	    8860 kB
VmHWM:	    1276 kB
Cost 86.666 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7006 fill 16 msec (70.060000 one sort cycle)
VmPeak:	    8856 kB
VmHWM:	    1276 kB
Cost 89.397 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6816 fill 17 msec (68.160000 one sort cycle)
VmPeak:	    8856 kB
VmHWM:	    1276 kB
Cost 86.972 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6877 fill 24 msec (68.770000 one sort cycle)
VmPeak:	    8856 kB
VmHWM:	    1276 kB
Cost 87.751 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6901 fill 25 msec (69.010000 one sort cycle)
VmPeak:	    8860 kB
VmHWM:	    1276 kB
Cost 88.057 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 123 fill 31 msec (1.230000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     792 kB
Cost 0.974 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 154 fill 31 msec (1.540000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.762 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 104 fill 13 msec (1.040000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.190 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 110 fill 13 msec (1.100000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 1.263 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 122 fill 15 msec (1.220000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 1.401 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 132 fill 17 msec (1.320000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 1.515 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 145 fill 23 msec (1.450000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 1.665 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 141 fill 25 msec (1.410000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 1.619 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=10 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 74 fill 11 msec (7.400000 one sort cycle)
VmPeak:	    9100 kB
VmHWM:	    1484 kB
Cost 10.982 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 130 fill 10 msec (13.000000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3768 kB
Cost 48.984 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 107 fill 4 msec (10.700000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3768 kB
Cost 40.318 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 111 fill 4 msec (11.100000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3772 kB
Cost 41.869 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 114 fill 6 msec (11.400000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3772 kB
Cost 43.001 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 121 fill 5 msec (12.100000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3772 kB
Cost 45.641 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 123 fill 8 msec (12.300000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3772 kB
Cost 46.396 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 121 fill 9 msec (12.100000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3768 kB
Cost 45.593 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 187 fill 10 msec (18.700000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1108 kB
Cost 20.720 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 239 fill 10 msec (23.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 56.786 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 246 fill 5 msec (24.600000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 58.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 248 fill 4 msec (24.800000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 58.925 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 231 fill 5 msec (23.100000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2380 kB
Cost 54.978 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 249 fill 6 msec (24.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 59.162 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 260 fill 10 msec (26.000000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2380 kB
Cost 61.880 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 238 fill 9 msec (23.800000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 56.549 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 230 fill 11 msec (23.000000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1236 kB
Cost 28.428 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 237 fill 11 msec (23.700000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 67.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 227 fill 4 msec (22.700000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 64.922 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 237 fill 4 msec (23.700000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 67.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 229 fill 6 msec (22.900000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 65.494 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 237 fill 6 msec (23.700000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 67.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 253 fill 8 msec (25.300000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2856 kB
Cost 72.257 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 251 fill 9 msec (25.100000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 71.786 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 143 fill 10 msec (14.300000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 18.075 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 188 fill 11 msec (18.800000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 56.926 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 179 fill 4 msec (17.900000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 54.130 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 199 fill 4 msec (19.900000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 60.178 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 183 fill 5 msec (18.300000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3020 kB
Cost 55.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 200 fill 6 msec (20.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 60.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 199 fill 8 msec (19.900000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 60.257 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 187 fill 9 msec (18.700000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 56.549 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 230 fill 10 msec (23.000000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1064 kB
Cost 24.472 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 231 fill 10 msec (23.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 51.652 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 206 fill 4 msec (20.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 46.062 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 229 fill 4 msec (22.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 51.204 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 222 fill 5 msec (22.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 49.639 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 243 fill 6 msec (24.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 54.335 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 245 fill 8 msec (24.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 54.880 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 224 fill 9 msec (22.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 50.086 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 79 fill 10 msec (7.900000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1060 kB
Cost 8.374 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 72 fill 11 msec (7.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 16.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 68 fill 4 msec (6.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2228 kB
Cost 15.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 70 fill 4 msec (7.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 15.624 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 69 fill 5 msec (6.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 15.401 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 69 fill 6 msec (6.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 15.401 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 70 fill 8 msec (7.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 15.624 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 70 fill 8 msec (7.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 15.624 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 58 fill 10 msec (5.800000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1104 kB
Cost 6.403 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 69 fill 10 msec (6.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 16.394 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 59 fill 4 msec (5.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 14.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 63 fill 4 msec (6.300000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 14.969 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 5 msec (6.700000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 15.919 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 68 fill 6 msec (6.800000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 16.157 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 69 fill 8 msec (6.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2376 kB
Cost 16.394 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 68 fill 8 msec (6.800000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    2380 kB
Cost 16.184 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 53 fill 11 msec (5.300000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1240 kB
Cost 6.572 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 62 fill 11 msec (6.200000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 17.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 45 fill 4 msec (4.500000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 12.906 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 45 fill 4 msec (4.500000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 12.906 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 54 fill 5 msec (5.400000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 15.487 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 57 fill 6 msec (5.700000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 16.348 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 61 fill 7 msec (6.100000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 17.495 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 61 fill 8 msec (6.100000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 17.495 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 41 fill 10 msec (4.100000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 5.182 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 10 msec (4.700000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 14.232 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 38 fill 5 msec (3.800000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 11.506 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 40 fill 4 msec (4.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3032 kB
Cost 12.128 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 44 fill 5 msec (4.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 13.323 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 46 fill 5 msec (4.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 13.929 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 7 msec (4.700000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3032 kB
Cost 14.250 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 46 fill 8 msec (4.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 13.929 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 113 fill 10 msec (11.300000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1060 kB
Cost 11.978 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 124 fill 10 msec (12.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 27.726 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 97 fill 5 msec (9.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 21.689 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 98 fill 4 msec (9.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 21.874 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 116 fill 5 msec (11.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 25.984 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 120 fill 5 msec (12.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 26.832 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 120 fill 8 msec (12.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 26.832 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 119 fill 8 msec (11.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 26.656 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 44 fill 10 msec (4.400000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1068 kB
Cost 4.699 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 53 fill 11 msec (5.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 11.851 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 35 fill 5 msec (3.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 7.840 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 40 fill 4 msec (4.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 8.944 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 44 fill 5 msec (4.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 9.856 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 47 fill 6 msec (4.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 10.528 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 51 fill 8 msec (5.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 11.404 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 47 fill 9 msec (4.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 10.509 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=10 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 234 fill 32 msec (23.400000 one sort cycle)
VmPeak:	   10660 kB
VmHWM:	    3008 kB
Cost 70.387 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 432 fill 31 msec (43.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9864 kB
Cost 426.125 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 354 fill 12 msec (35.400000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9864 kB
Cost 349.186 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 369 fill 14 msec (36.900000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9864 kB
Cost 363.982 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 382 fill 17 msec (38.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9860 kB
Cost 376.652 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 390 fill 18 msec (39.000000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9864 kB
Cost 384.696 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 407 fill 25 msec (40.700000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9860 kB
Cost 401.302 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 402 fill 27 msec (40.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	    9864 kB
Cost 396.533 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 587 fill 30 msec (58.700000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1968 kB
Cost 115.522 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 733 fill 31 msec (73.300000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5760 kB
Cost 422.208 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 662 fill 13 msec (66.200000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5736 kB
Cost 379.723 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 738 fill 13 msec (73.800000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5736 kB
Cost 423.317 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 687 fill 17 msec (68.700000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5752 kB
Cost 395.162 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 846 fill 19 msec (84.600000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5744 kB
Cost 485.942 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 836 fill 27 msec (83.600000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5748 kB
Cost 480.533 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 727 fill 28 msec (72.700000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5744 kB
Cost 417.589 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 684 fill 30 msec (68.400000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2364 kB
Cost 161.698 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 727 fill 32 msec (72.700000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 524.022 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 680 fill 12 msec (68.000000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 490.144 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 713 fill 12 msec (71.300000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 513.930 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 694 fill 18 msec (69.400000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 500.235 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 703 fill 18 msec (70.300000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7204 kB
Cost 506.441 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 705 fill 29 msec (70.500000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 508.164 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 705 fill 27 msec (70.500000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 508.164 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 452 fill 30 msec (45.200000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2436 kB
Cost 110.107 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 549 fill 31 msec (54.900000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 423.169 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 503 fill 12 msec (50.300000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 387.914 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 594 fill 13 msec (59.400000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 458.093 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 517 fill 18 msec (51.700000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 398.504 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 580 fill 19 msec (58.000000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 447.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 576 fill 27 msec (57.600000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 443.981 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 538 fill 29 msec (53.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 414.690 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 724 fill 31 msec (72.400000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1844 kB
Cost 133.506 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 655 fill 31 msec (65.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 351.342 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 602 fill 12 msec (60.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 322.672 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 661 fill 13 msec (66.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 354.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 630 fill 18 msec (63.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 337.680 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 688 fill 18 msec (68.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 368.768 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 685 fill 25 msec (68.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 367.160 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 641 fill 28 msec (64.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 343.576 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 250 fill 31 msec (25.000000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1840 kB
Cost 46.000 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 229 fill 32 msec (22.900000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 122.652 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 221 fill 12 msec (22.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 118.368 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 214 fill 14 msec (21.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 114.618 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 222 fill 17 msec (22.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 118.903 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 222 fill 19 msec (22.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 118.903 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 227 fill 26 msec (22.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 121.581 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 227 fill 32 msec (22.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 121.672 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 207 fill 31 msec (20.700000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1964 kB
Cost 40.655 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 230 fill 32 msec (23.000000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5760 kB
Cost 132.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 202 fill 13 msec (20.200000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5740 kB
Cost 115.948 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 207 fill 12 msec (20.700000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5736 kB
Cost 118.735 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 218 fill 17 msec (21.800000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5752 kB
Cost 125.394 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 224 fill 18 msec (22.400000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5744 kB
Cost 128.666 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 230 fill 27 msec (23.000000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5752 kB
Cost 132.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 236 fill 27 msec (23.600000 one sort cycle)
VmPeak:	   13404 kB
VmHWM:	    5744 kB
Cost 135.558 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 163 fill 30 msec (16.300000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2364 kB
Cost 38.533 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 200 fill 31 msec (20.000000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 144.320 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 140 fill 13 msec (14.000000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 101.024 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 142 fill 13 msec (14.200000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7212 kB
Cost 102.410 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 181 fill 21 msec (18.100000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 130.610 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 185 fill 18 msec (18.500000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 133.496 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 189 fill 27 msec (18.900000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 136.382 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 191 fill 31 msec (19.100000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7212 kB
Cost 137.749 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 115 fill 32 msec (11.500000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2432 kB
Cost 27.968 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 144 fill 32 msec (14.400000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 111.053 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 121 fill 13 msec (12.100000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 93.315 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 130 fill 13 msec (13.000000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 100.256 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 136 fill 18 msec (13.600000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7716 kB
Cost 104.938 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 144 fill 18 msec (14.400000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 111.053 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 146 fill 27 msec (14.600000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 112.595 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 144 fill 29 msec (14.400000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 111.053 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 359 fill 31 msec (35.900000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1840 kB
Cost 66.056 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 414 fill 32 msec (41.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 221.904 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 341 fill 13 msec (34.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 182.776 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 357 fill 12 msec (35.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 191.209 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 383 fill 17 msec (38.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 205.288 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 395 fill 18 msec (39.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 211.720 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 402 fill 26 msec (40.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 215.472 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 397 fill 32 msec (39.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 212.792 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 140 fill 30 msec (14.000000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1848 kB
Cost 25.872 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 186 fill 31 msec (18.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 99.696 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 130 fill 13 msec (13.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 69.732 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 140 fill 12 msec (14.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 75.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 154 fill 18 msec (15.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 82.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 163 fill 19 msec (16.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 87.368 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 178 fill 28 msec (17.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 95.408 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 171 fill 28 msec (17.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 91.724 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=10 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 808 fill 103 msec (80.800000 one sort cycle)
VmPeak:	   16132 kB
VmHWM:	    8344 kB
Cost 674.195 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1526 fill 108 msec (152.600000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31196 kB
Cost 4760.510 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1353 fill 45 msec (135.300000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31192 kB
Cost 4220.278 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1331 fill 43 msec (133.100000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31192 kB
Cost 4151.655 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1393 fill 73 msec (139.300000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31196 kB
Cost 4345.603 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1554 fill 93 msec (155.400000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31196 kB
Cost 4847.858 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1566 fill 155 msec (156.600000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31196 kB
Cost 4885.294 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1517 fill 163 msec (151.700000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31196 kB
Cost 4732.433 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 2280 fill 104 msec (228.000000 one sort cycle)
VmPeak:	   12488 kB
VmHWM:	    4912 kB
Cost 1119.936 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2884 fill 107 msec (288.400000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 5123.138 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2796 fill 43 msec (279.600000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17744 kB
Cost 4961.222 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3022 fill 43 msec (302.200000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17748 kB
Cost 5363.446 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2803 fill 78 msec (280.300000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 4979.249 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2998 fill 89 msec (299.800000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 5325.647 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2970 fill 152 msec (297.000000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 5275.908 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2833 fill 165 msec (283.300000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 5032.541 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 2778 fill 104 msec (277.800000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6124 kB
Cost 1701.247 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2864 fill 105 msec (286.400000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6389.011 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2738 fill 42 msec (273.800000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6107.930 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2796 fill 43 msec (279.600000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22304 kB
Cost 6236.198 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2760 fill 82 msec (276.000000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6157.008 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3103 fill 91 msec (310.300000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6922.172 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2945 fill 150 msec (294.500000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6569.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3030 fill 172 msec (303.000000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 6759.324 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 1713 fill 134 msec (171.300000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 1120.302 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2385 fill 108 msec (238.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 5752.620 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2256 fill 42 msec (225.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 5441.472 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2452 fill 43 msec (245.200000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 5914.224 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2285 fill 75 msec (228.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24116 kB
Cost 5510.506 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2481 fill 86 msec (248.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 5984.172 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2461 fill 152 msec (246.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 5935.932 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2296 fill 158 msec (229.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 5538.870 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 2684 fill 102 msec (268.400000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4580 kB
Cost 1229.272 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2489 fill 110 msec (248.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4057.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2326 fill 42 msec (232.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 3790.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2515 fill 43 msec (251.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4099.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2430 fill 75 msec (243.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 3960.900 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2607 fill 86 msec (260.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4249.410 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2580 fill 148 msec (258.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4205.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2444 fill 178 msec (244.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 3984.698 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 908 fill 102 msec (90.800000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4576 kB
Cost 415.501 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 836 fill 109 msec (83.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1362.680 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 796 fill 42 msec (79.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16292 kB
Cost 1296.843 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 787 fill 44 msec (78.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1282.495 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 805 fill 77 msec (80.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1312.150 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 806 fill 85 msec (80.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1313.458 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 803 fill 148 msec (80.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1308.569 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 820 fill 157 msec (82.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1336.272 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 671 fill 102 msec (67.100000 one sort cycle)
VmPeak:	   12488 kB
VmHWM:	    4908 kB
Cost 329.327 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 829 fill 107 msec (82.900000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 1472.636 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 746 fill 42 msec (74.600000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17748 kB
Cost 1324.001 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 757 fill 43 msec (75.700000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17748 kB
Cost 1343.524 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 792 fill 75 msec (79.200000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 1406.909 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 809 fill 85 msec (80.900000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17760 kB
Cost 1436.784 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 830 fill 147 msec (83.000000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17764 kB
Cost 1474.412 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 813 fill 160 msec (81.300000 one sort cycle)
VmPeak:	   25364 kB
VmHWM:	   17760 kB
Cost 1443.888 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 596 fill 103 msec (59.600000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6128 kB
Cost 365.229 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 743 fill 105 msec (74.300000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1658.079 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 555 fill 43 msec (55.500000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1238.538 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 557 fill 43 msec (55.700000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1243.001 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 656 fill 76 msec (65.600000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1463.930 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 669 fill 86 msec (66.900000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1492.940 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 707 fill 148 msec (70.700000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1577.741 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 715 fill 160 msec (71.500000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1595.594 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 429 fill 105 msec (42.900000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 280.566 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 576 fill 108 msec (57.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1389.542 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 523 fill 44 msec (52.300000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1261.685 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 541 fill 44 msec (54.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1305.108 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 562 fill 76 msec (56.200000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24128 kB
Cost 1355.994 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 573 fill 86 msec (57.300000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1382.305 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 576 fill 147 msec (57.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1389.542 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 575 fill 158 msec (57.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1387.130 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 1117 fill 101 msec (111.700000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4580 kB
Cost 511.586 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1357 fill 106 msec (135.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2211.910 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1163 fill 43 msec (116.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 1896.155 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1146 fill 44 msec (114.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1867.980 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1276 fill 76 msec (127.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2079.880 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1323 fill 90 msec (132.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2156.490 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1335 fill 149 msec (133.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 2176.584 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1319 fill 160 msec (131.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 2150.498 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 445 fill 102 msec (44.500000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4584 kB
Cost 203.988 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 631 fill 106 msec (63.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1028.530 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 443 fill 43 msec (44.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 722.090 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 474 fill 43 msec (47.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 772.620 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 508 fill 76 msec (50.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 828.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 545 fill 85 msec (54.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 888.568 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 589 fill 149 msec (58.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 960.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 651 fill 163 msec (65.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1061.130 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000 MAX=100 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 69 fill 11 msec (0.069000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     724 kB
Cost 0.050 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 100 fill 11 msec (0.100000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.074 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 55 fill 4 msec (0.055000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 63 fill 4 msec (0.063000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.047 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 63 fill 6 msec (0.063000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.047 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 72 fill 6 msec (0.072000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.054 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 80 fill 8 msec (0.080000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     744 kB
Cost 0.060 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 107 fill 9 msec (0.107000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     748 kB
Cost 0.080 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 147 fill 9 msec (0.147000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     684 kB
Cost 0.101 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 202 fill 10 msec (0.202000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.141 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 75 fill 4 msec (0.075000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.052 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 265 fill 4 msec (0.265000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.185 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 100 fill 5 msec (0.100000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 259 fill 6 msec (0.259000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.180 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 251 fill 8 msec (0.251000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.176 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 135 fill 9 msec (0.135000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.095 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 230 fill 10 msec (0.230000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     688 kB
Cost 0.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 229 fill 11 msec (0.229000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 33 fill 4 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.023 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 57 fill 5 msec (0.057000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 145 fill 5 msec (0.145000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.102 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 232 fill 5 msec (0.232000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     708 kB
Cost 0.164 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 244 fill 8 msec (0.244000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.172 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 181 fill 8 msec (0.181000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     704 kB
Cost 0.127 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 128 fill 11 msec (0.128000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.087 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 191 fill 11 msec (0.191000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.133 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 65 fill 4 msec (0.065000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.045 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 278 fill 4 msec (0.278000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.195 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 84 fill 5 msec (0.084000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.059 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 269 fill 5 msec (0.269000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.187 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 259 fill 8 msec (0.259000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 117 fill 8 msec (0.117000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     696 kB
Cost 0.081 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 200 fill 10 msec (0.200000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     676 kB
Cost 0.135 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 242 fill 10 msec (0.242000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.166 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 109 fill 5 msec (0.109000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.075 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 234 fill 4 msec (0.234000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 146 fill 6 msec (0.146000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.100 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 262 fill 5 msec (0.262000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.180 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 268 fill 7 msec (0.268000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.185 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 184 fill 8 msec (0.184000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.127 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 67 fill 11 msec (0.067000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.045 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 67 fill 11 msec (0.067000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.046 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 57 fill 5 msec (0.057000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 60 fill 4 msec (0.060000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 63 fill 5 msec (0.063000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.043 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 64 fill 6 msec (0.064000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.044 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 67 fill 7 msec (0.067000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.046 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 65 fill 8 msec (0.065000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.045 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 52 fill 10 msec (0.052000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     684 kB
Cost 0.036 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 58 fill 11 msec (0.058000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 23 fill 4 msec (0.023000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 36 fill 5 msec (0.036000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 34 fill 5 msec (0.034000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.024 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 48 fill 5 msec (0.048000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 53 fill 8 msec (0.053000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.037 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 46 fill 8 msec (0.046000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.032 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 59 fill 10 msec (0.059000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     692 kB
Cost 0.041 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 66 fill 11 msec (0.066000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     716 kB
Cost 0.047 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 9 fill 5 msec (0.009000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.006 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 14 fill 4 msec (0.014000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.010 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 34 fill 5 msec (0.034000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     716 kB
Cost 0.024 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 49 fill 5 msec (0.049000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     716 kB
Cost 0.035 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 56 fill 8 msec (0.056000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.040 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 47 fill 8 msec (0.047000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     712 kB
Cost 0.033 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 39 fill 10 msec (0.039000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 44 fill 10 msec (0.044000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.031 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 17 fill 4 msec (0.017000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.012 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 36 fill 4 msec (0.036000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.025 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 22 fill 6 msec (0.022000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.015 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 40 fill 6 msec (0.040000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.028 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 75 fill 8 msec (0.075000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.052 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 31 fill 9 msec (0.031000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     700 kB
Cost 0.022 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 96 fill 10 msec (0.096000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     672 kB
Cost 0.065 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 103 fill 10 msec (0.103000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.071 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 48 fill 4 msec (0.048000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     692 kB
Cost 0.033 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 57 fill 5 msec (0.057000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 71 fill 6 msec (0.071000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.049 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 83 fill 5 msec (0.083000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.057 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 91 fill 7 msec (0.091000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.063 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 90 fill 8 msec (0.090000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.062 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 31 fill 11 msec (0.031000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     668 kB
Cost 0.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 35 fill 10 msec (0.035000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.024 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 86 fill 3 msec (0.086000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.059 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 23 fill 5 msec (0.023000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 42 fill 5 msec (0.042000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.029 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 30 fill 6 msec (0.030000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 30 fill 8 msec (0.030000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 33 fill 8 msec (0.033000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     684 kB
Cost 0.023 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 53 fill 9 msec (0.053000 one sort cycle)
VmPeak:	    8320 kB
VmHWM:	     680 kB
Cost 0.036 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 57 fill 10 msec (0.057000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.039 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 21 fill 4 msec (0.021000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 26 fill 5 msec (0.026000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.018 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 39 fill 5 msec (0.039000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.027 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 43 fill 6 msec (0.043000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.030 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 49 fill 8 msec (0.049000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (16000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 45 fill 9 msec (0.045000 one sort cycle)
VmPeak:	    8332 kB
VmHWM:	     688 kB
Cost 0.031 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=100 REP=1000
+++++ s0 +++++
Sort (64-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 376 fill 51 msec (0.376000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     752 kB
Cost 0.283 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 580 fill 53 msec (0.580000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     872 kB
Cost 0.506 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 352 fill 21 msec (0.352000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.308 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 393 fill 21 msec (0.393000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     872 kB
Cost 0.343 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 411 fill 27 msec (0.411000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.360 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 456 fill 29 msec (0.456000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.399 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 495 fill 38 msec (0.495000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.434 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 473 fill 40 msec (0.473000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     876 kB
Cost 0.414 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 817 fill 51 msec (0.817000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.575 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1036 fill 54 msec (1.036000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     772 kB
Cost 0.800 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 475 fill 21 msec (0.475000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.365 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1261 fill 21 msec (1.261000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.968 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 590 fill 27 msec (0.590000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.453 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1259 fill 28 msec (1.259000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.962 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1229 fill 38 msec (1.229000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.944 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 756 fill 40 msec (0.756000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.581 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 1111 fill 50 msec (1.111000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     708 kB
Cost 0.787 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1115 fill 54 msec (1.115000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.883 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 298 fill 21 msec (0.298000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.237 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 285 fill 21 msec (0.285000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     788 kB
Cost 0.225 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 664 fill 27 msec (0.664000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.531 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 988 fill 28 msec (0.988000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.790 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1120 fill 39 msec (1.120000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.896 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm timsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 839 fill 41 msec (0.839000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.671 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 637 fill 51 msec (0.637000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.448 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 839 fill 53 msec (0.839000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.664 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 332 fill 21 msec (0.332000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.264 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1072 fill 22 msec (1.072000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.849 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 404 fill 52 msec (0.404000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.320 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1081 fill 28 msec (1.081000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.856 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1024 fill 38 msec (1.024000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.811 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 567 fill 40 msec (0.567000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     792 kB
Cost 0.449 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1338 fill 52 msec (1.338000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     696 kB
Cost 0.931 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1500 fill 53 msec (1.500000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 1.122 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 747 fill 21 msec (0.747000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.559 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1494 fill 22 msec (1.494000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 1.118 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 946 fill 26 msec (0.946000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.708 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1609 fill 28 msec (1.609000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 1.204 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1660 fill 39 msec (1.660000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 1.248 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1137 fill 40 msec (1.137000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.850 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 362 fill 51 msec (0.362000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.249 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 350 fill 53 msec (0.350000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.260 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 323 fill 21 msec (0.323000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.240 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 315 fill 22 msec (0.315000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.234 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 326 fill 26 msec (0.326000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.243 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 330 fill 27 msec (0.330000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.246 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 338 fill 38 msec (0.338000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.251 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 370 fill 40 msec (0.370000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.277 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 304 fill 51 msec (0.304000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     700 kB
Cost 0.213 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 347 fill 52 msec (0.347000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 166 fill 21 msec (0.166000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.127 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 226 fill 21 msec (0.226000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.174 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 232 fill 26 msec (0.232000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.178 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 279 fill 29 msec (0.279000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.214 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 312 fill 39 msec (0.312000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     764 kB
Cost 0.238 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 305 fill 41 msec (0.305000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     768 kB
Cost 0.234 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 294 fill 52 msec (0.294000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     712 kB
Cost 0.209 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 342 fill 53 msec (0.342000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.274 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 93 fill 21 msec (0.093000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     804 kB
Cost 0.075 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 89 fill 21 msec (0.089000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.071 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 179 fill 27 msec (0.179000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.145 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 239 fill 29 msec (0.239000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.193 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 304 fill 39 msec (0.304000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.246 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 249 fill 41 msec (0.249000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     808 kB
Cost 0.201 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 218 fill 52 msec (0.218000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     704 kB
Cost 0.153 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 254 fill 52 msec (0.254000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.202 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 93 fill 21 msec (0.093000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.074 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 168 fill 21 msec (0.168000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.134 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 133 fill 26 msec (0.133000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.106 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 213 fill 29 msec (0.213000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.170 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 231 fill 39 msec (0.231000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     800 kB
Cost 0.185 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 184 fill 40 msec (0.184000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     796 kB
Cost 0.146 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 712 fill 51 msec (0.712000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.490 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 767 fill 52 msec (0.767000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.574 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 458 fill 21 msec (0.458000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.343 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 495 fill 21 msec (0.495000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.370 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 591 fill 25 msec (0.591000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.442 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 639 fill 28 msec (0.639000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.478 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 709 fill 40 msec (0.709000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.533 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 680 fill 41 msec (0.680000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.509 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 263 fill 51 msec (0.263000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     688 kB
Cost 0.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 340 fill 52 msec (0.340000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.254 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 607 fill 21 msec (0.607000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.454 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 303 fill 21 msec (0.303000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.225 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 371 fill 28 msec (0.371000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.276 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 316 fill 28 msec (0.316000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.235 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 357 fill 40 msec (0.357000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.266 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 342 fill 42 msec (0.342000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     744 kB
Cost 0.254 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 262 fill 50 msec (0.262000 one sort cycle)
VmPeak:	    8336 kB
VmHWM:	     696 kB
Cost 0.182 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 312 fill 53 msec (0.312000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.233 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 156 fill 20 msec (0.156000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.117 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 192 fill 21 msec (0.192000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.144 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 202 fill 27 msec (0.202000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.151 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 236 fill 29 msec (0.236000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.177 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 258 fill 39 msec (0.258000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     748 kB
Cost 0.193 GB*sec (VmHwM)
Sort (64-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (80000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 248 fill 40 msec (0.248000 one sort cycle)
VmPeak:	    8396 kB
VmHWM:	     752 kB
Cost 0.186 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=100 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 78 fill 11 msec (0.780000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     796 kB
Cost 0.621 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 125 fill 10 msec (1.250000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.290 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 76 fill 4 msec (0.760000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.784 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 85 fill 4 msec (0.850000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1036 kB
Cost 0.881 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 88 fill 5 msec (0.880000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 0.908 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 97 fill 5 msec (0.970000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1036 kB
Cost 1.005 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 105 fill 8 msec (1.050000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.084 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 102 fill 8 msec (1.020000 one sort cycle)
VmPeak:	    8636 kB
VmHWM:	    1032 kB
Cost 1.053 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 174 fill 10 msec (1.740000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     728 kB
Cost 1.267 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 220 fill 11 msec (2.200000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.883 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 106 fill 4 msec (1.060000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.907 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 267 fill 4 msec (2.670000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     852 kB
Cost 2.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 143 fill 6 msec (1.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.224 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 263 fill 5 msec (2.630000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 2.251 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 261 fill 8 msec (2.610000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 2.234 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 159 fill 8 msec (1.590000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 1.361 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 228 fill 10 msec (2.280000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     736 kB
Cost 1.678 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 234 fill 11 msec (2.340000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 2.115 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 69 fill 4 msec (0.690000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     916 kB
Cost 0.632 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 67 fill 5 msec (0.670000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     900 kB
Cost 0.603 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 140 fill 6 msec (1.400000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     920 kB
Cost 1.288 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 207 fill 6 msec (2.070000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     920 kB
Cost 1.904 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 234 fill 8 msec (2.340000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     908 kB
Cost 2.125 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 179 fill 8 msec (1.790000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     904 kB
Cost 1.618 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 134 fill 11 msec (1.340000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     732 kB
Cost 0.981 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 174 fill 10 msec (1.740000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.587 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 76 fill 4 msec (0.760000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 0.693 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 223 fill 4 msec (2.230000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 2.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 91 fill 6 msec (0.910000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 0.830 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 219 fill 6 msec (2.190000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.997 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 212 fill 7 msec (2.120000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.933 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 121 fill 7 msec (1.210000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     912 kB
Cost 1.104 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 308 fill 11 msec (3.080000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     708 kB
Cost 2.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 307 fill 10 msec (3.070000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.554 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 158 fill 4 msec (1.580000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.315 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 325 fill 4 msec (3.250000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.704 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 205 fill 5 msec (2.050000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.706 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 343 fill 6 msec (3.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.854 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 343 fill 8 msec (3.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.854 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 246 fill 8 msec (2.460000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 2.047 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 76 fill 10 msec (0.760000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     708 kB
Cost 0.538 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 74 fill 10 msec (0.740000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.613 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 70 fill 5 msec (0.700000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.580 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 69 fill 4 msec (0.690000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.571 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 71 fill 5 msec (0.710000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.588 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 71 fill 6 msec (0.710000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.588 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 71 fill 8 msec (0.710000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.591 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 73 fill 8 msec (0.730000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.604 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 66 fill 10 msec (0.660000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     720 kB
Cost 0.475 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 76 fill 10 msec (0.760000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.651 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 40 fill 4 msec (0.400000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.342 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 51 fill 5 msec (0.510000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.437 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 52 fill 5 msec (0.520000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.445 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 5 msec (0.620000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.531 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 9 msec (0.670000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     860 kB
Cost 0.576 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 8 msec (0.620000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     856 kB
Cost 0.531 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 62 fill 10 msec (0.620000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     740 kB
Cost 0.459 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 72 fill 11 msec (0.720000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.657 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 21 fill 4 msec (0.210000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     924 kB
Cost 0.194 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 21 fill 4 msec (0.210000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.192 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 39 fill 5 msec (0.390000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     928 kB
Cost 0.362 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 50 fill 6 msec (0.500000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     928 kB
Cost 0.464 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 62 fill 8 msec (0.620000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     912 kB
Cost 0.565 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 54 fill 8 msec (0.540000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     916 kB
Cost 0.495 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 46 fill 10 msec (0.460000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     732 kB
Cost 0.337 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 51 fill 10 msec (0.510000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.467 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 20 fill 4 msec (0.200000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.183 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 38 fill 4 msec (0.380000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.348 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 31 fill 5 msec (0.310000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.284 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 5 msec (0.470000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.431 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 50 fill 8 msec (0.500000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.458 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 41 fill 8 msec (0.410000 one sort cycle)
VmPeak:	    8552 kB
VmHWM:	     916 kB
Cost 0.376 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 152 fill 11 msec (1.520000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     704 kB
Cost 1.070 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 165 fill 10 msec (1.650000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.373 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 199 fill 4 msec (1.990000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.656 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 114 fill 4 msec (1.140000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.953 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 130 fill 5 msec (1.300000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.082 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 141 fill 5 msec (1.410000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.173 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 152 fill 8 msec (1.520000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.265 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 147 fill 9 msec (1.470000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.223 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 79 fill 10 msec (0.790000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     704 kB
Cost 0.556 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 109 fill 10 msec (1.090000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.907 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 163 fill 4 msec (1.630000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 1.363 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 105 fill 4 msec (1.050000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.869 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 110 fill 5 msec (1.100000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.915 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 121 fill 5 msec (1.210000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 1.007 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 105 fill 8 msec (1.050000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.874 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 108 fill 8 msec (1.080000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     828 kB
Cost 0.894 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 54 fill 10 msec (0.540000 one sort cycle)
VmPeak:	    8356 kB
VmHWM:	     712 kB
Cost 0.384 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 64 fill 10 msec (0.640000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.532 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 33 fill 5 msec (0.330000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.275 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 41 fill 4 msec (0.410000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.341 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 43 fill 5 msec (0.430000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.358 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 48 fill 6 msec (0.480000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.399 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 53 fill 8 msec (0.530000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     836 kB
Cost 0.443 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (160000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 51 fill 8 msec (0.510000 one sort cycle)
VmPeak:	    8480 kB
VmHWM:	     832 kB
Cost 0.424 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=100 REP=100
+++++ s0 +++++
Sort (64-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 245 fill 30 msec (2.450000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     952 kB
Cost 2.332 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 399 fill 31 msec (3.990000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1656 kB
Cost 6.607 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 259 fill 14 msec (2.590000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 4.299 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 283 fill 13 msec (2.830000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 4.698 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 294 fill 16 msec (2.940000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1656 kB
Cost 4.869 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 316 fill 18 msec (3.160000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 5.246 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 349 fill 23 msec (3.490000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 5.793 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm system qsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 339 fill 24 msec (3.390000 one sort cycle)
VmPeak:	    9260 kB
VmHWM:	    1660 kB
Cost 5.627 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 607 fill 31 msec (6.070000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     808 kB
Cost 4.905 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 860 fill 32 msec (8.600000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 10.251 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 409 fill 13 msec (4.090000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 4.875 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1045 fill 13 msec (10.450000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 12.456 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 473 fill 16 msec (4.730000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 5.657 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1020 fill 17 msec (10.200000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 12.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 997 fill 24 msec (9.970000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 11.924 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm yamsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 579 fill 25 msec (5.790000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 6.925 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 797 fill 30 msec (7.970000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     844 kB
Cost 6.727 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 819 fill 31 msec (8.190000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 11.171 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 234 fill 11 msec (2.340000 one sort cycle)
VmPeak:	    9012 kB
VmHWM:	    1348 kB
Cost 3.154 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 245 fill 12 msec (2.450000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1396 kB
Cost 3.420 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 548 fill 15 msec (5.480000 one sort cycle)
VmPeak:	    9056 kB
VmHWM:	    1420 kB
Cost 7.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 798 fill 18 msec (7.980000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1432 kB
Cost 11.427 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 847 fill 24 msec (8.470000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 11.553 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm timsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 784 fill 24 msec (7.840000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1364 kB
Cost 10.694 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 474 fill 30 msec (4.740000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 4.020 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 660 fill 32 msec (6.600000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 9.161 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 297 fill 11 msec (2.970000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 4.110 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 931 fill 13 msec (9.310000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 12.885 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 351 fill 16 msec (3.510000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 4.858 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 872 fill 17 msec (8.720000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1380 kB
Cost 12.034 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 838 fill 23 msec (8.380000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 11.631 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm mmsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 452 fill 24 msec (4.520000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1384 kB
Cost 6.256 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 992 fill 30 msec (9.920000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     784 kB
Cost 7.777 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1079 fill 31 msec (10.790000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 12.344 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 623 fill 13 msec (6.230000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 7.127 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1264 fill 13 msec (12.640000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 14.460 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 747 fill 16 msec (7.470000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 8.546 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1279 fill 17 msec (12.790000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 14.632 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1261 fill 23 msec (12.610000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 14.426 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm symmsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 854 fill 24 msec (8.540000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 9.770 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 240 fill 30 msec (2.400000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     780 kB
Cost 1.872 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 231 fill 31 msec (2.310000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.633 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 216 fill 13 msec (2.160000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.462 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 212 fill 13 msec (2.120000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.417 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 223 fill 16 msec (2.230000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.542 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 228 fill 17 msec (2.280000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.599 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 225 fill 24 msec (2.250000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1140 kB
Cost 2.565 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 227 fill 24 msec (2.270000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 2.597 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 194 fill 30 msec (1.940000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     804 kB
Cost 1.560 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 229 fill 31 msec (2.290000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.730 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 140 fill 12 msec (1.400000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 1.669 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 176 fill 13 msec (1.760000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.098 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 169 fill 16 msec (1.690000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.014 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 203 fill 17 msec (2.030000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 2.428 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 219 fill 23 msec (2.190000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1196 kB
Cost 2.619 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 197 fill 25 msec (1.970000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1192 kB
Cost 2.348 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 207 fill 30 msec (2.070000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 1.755 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 235 fill 32 msec (2.350000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1368 kB
Cost 3.215 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 75 fill 12 msec (0.750000 one sort cycle)
VmPeak:	    9012 kB
VmHWM:	    1356 kB
Cost 1.017 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 76 fill 13 msec (0.760000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1404 kB
Cost 1.067 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 143 fill 16 msec (1.430000 one sort cycle)
VmPeak:	    9056 kB
VmHWM:	    1428 kB
Cost 2.042 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 185 fill 16 msec (1.850000 one sort cycle)
VmPeak:	    9084 kB
VmHWM:	    1440 kB
Cost 2.664 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 212 fill 24 msec (2.120000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.909 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 202 fill 25 msec (2.020000 one sort cycle)
VmPeak:	    9052 kB
VmHWM:	    1372 kB
Cost 2.771 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 151 fill 30 msec (1.510000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     848 kB
Cost 1.280 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 167 fill 32 msec (1.670000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 2.318 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 84 fill 13 msec (0.840000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.166 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 139 fill 13 msec (1.390000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.929 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 112 fill 18 msec (1.120000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.555 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 164 fill 17 msec (1.640000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 2.276 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 170 fill 23 msec (1.700000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 2.360 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 135 fill 25 msec (1.350000 one sort cycle)
VmPeak:	    9024 kB
VmHWM:	    1388 kB
Cost 1.874 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 452 fill 32 msec (4.520000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     784 kB
Cost 3.544 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 497 fill 32 msec (4.970000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 5.686 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 345 fill 12 msec (3.450000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 3.947 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 371 fill 13 msec (3.710000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 4.244 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 405 fill 16 msec (4.050000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 4.633 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 433 fill 17 msec (4.330000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 4.971 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 456 fill 23 msec (4.560000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 5.235 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 451 fill 24 msec (4.510000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 5.159 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 523 fill 30 msec (5.230000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     792 kB
Cost 4.142 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 775 fill 42 msec (7.750000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1156 kB
Cost 8.959 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 941 fill 13 msec (9.410000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1156 kB
Cost 10.878 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 759 fill 12 msec (7.590000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 8.713 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 774 fill 16 msec (7.740000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 8.916 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 758 fill 18 msec (7.580000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1148 kB
Cost 8.702 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 848 fill 24 msec (8.480000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 9.769 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 794 fill 25 msec (7.940000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1152 kB
Cost 9.147 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 163 fill 30 msec (1.630000 one sort cycle)
VmPeak:	    8436 kB
VmHWM:	     792 kB
Cost 1.291 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 193 fill 32 msec (1.930000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 2.208 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 108 fill 12 msec (1.080000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.236 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 130 fill 12 msec (1.300000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.487 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 132 fill 16 msec (1.320000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.510 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 149 fill 16 msec (1.490000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.705 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 165 fill 22 msec (1.650000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.888 GB*sec (VmHwM)
Sort (64-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (480000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 157 fill 25 msec (1.570000 one sort cycle)
VmPeak:	    8792 kB
VmHWM:	    1144 kB
Cost 1.796 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=100 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 87 fill 10 msec (8.700000 one sort cycle)
VmPeak:	    9100 kB
VmHWM:	    1496 kB
Cost 13.015 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 146 fill 10 msec (14.600000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 56.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 100 fill 4 msec (10.000000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3836 kB
Cost 38.360 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 109 fill 4 msec (10.900000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 41.856 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 110 fill 5 msec (11.000000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 42.240 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 122 fill 6 msec (12.200000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 46.848 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 128 fill 8 msec (12.800000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3840 kB
Cost 49.152 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 125 fill 9 msec (12.500000 one sort cycle)
VmPeak:	   11444 kB
VmHWM:	    3836 kB
Cost 47.950 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 215 fill 10 msec (21.500000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1100 kB
Cost 23.650 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 268 fill 11 msec (26.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 62.819 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 146 fill 5 msec (14.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2340 kB
Cost 34.164 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 331 fill 4 msec (33.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2340 kB
Cost 77.454 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 167 fill 5 msec (16.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2348 kB
Cost 39.212 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 328 fill 5 msec (32.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 76.883 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 319 fill 8 msec (31.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 74.774 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 203 fill 9 msec (20.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 47.583 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 270 fill 10 msec (27.000000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1236 kB
Cost 33.372 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 275 fill 10 msec (27.500000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2856 kB
Cost 78.540 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 96 fill 4 msec (9.600000 one sort cycle)
VmPeak:	   10784 kB
VmHWM:	    2872 kB
Cost 27.571 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 96 fill 4 msec (9.600000 one sort cycle)
VmPeak:	   11044 kB
VmHWM:	    3064 kB
Cost 29.414 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 187 fill 6 msec (18.700000 one sort cycle)
VmPeak:	   10988 kB
VmHWM:	    3060 kB
Cost 57.222 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 264 fill 6 msec (26.400000 one sort cycle)
VmPeak:	   10652 kB
VmHWM:	    3068 kB
Cost 80.995 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 280 fill 8 msec (28.000000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 80.080 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 222 fill 9 msec (22.200000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2860 kB
Cost 63.492 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 163 fill 10 msec (16.300000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 20.603 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 214 fill 11 msec (21.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 64.714 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 104 fill 4 msec (10.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 31.491 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 276 fill 9 msec (27.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 83.462 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 134 fill 5 msec (13.400000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 40.522 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 273 fill 6 msec (27.300000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 82.555 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 262 fill 9 msec (26.200000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 79.229 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 153 fill 8 msec (15.300000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 46.267 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 347 fill 10 msec (34.700000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1064 kB
Cost 36.921 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 344 fill 10 msec (34.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 76.918 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 199 fill 4 msec (19.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 44.496 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 383 fill 4 msec (38.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 85.639 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 250 fill 6 msec (25.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 55.900 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 391 fill 6 msec (39.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 87.584 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 406 fill 8 msec (40.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 90.782 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 274 fill 9 msec (27.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 61.157 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 88 fill 11 msec (8.800000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1064 kB
Cost 9.363 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 81 fill 11 msec (8.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 18.079 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 76 fill 4 msec (7.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 16.963 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 75 fill 4 msec (7.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 16.740 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 79 fill 5 msec (7.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 17.633 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 77 fill 6 msec (7.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2232 kB
Cost 17.186 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 78 fill 8 msec (7.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 17.441 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 79 fill 9 msec (7.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2228 kB
Cost 17.601 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 74 fill 10 msec (7.400000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1096 kB
Cost 8.110 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 84 fill 10 msec (8.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 19.690 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 53 fill 4 msec (5.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2340 kB
Cost 12.402 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 64 fill 4 msec (6.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2340 kB
Cost 14.976 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 6 msec (6.200000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2344 kB
Cost 14.533 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 73 fill 6 msec (7.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2348 kB
Cost 17.140 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 81 fill 8 msec (8.100000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2352 kB
Cost 19.051 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 74 fill 8 msec (7.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2348 kB
Cost 17.375 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 69 fill 10 msec (6.900000 one sort cycle)
VmPeak:	    8928 kB
VmHWM:	    1236 kB
Cost 8.528 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 82 fill 11 msec (8.200000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 23.518 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 42 fill 10 msec (4.200000 one sort cycle)
VmPeak:	   10784 kB
VmHWM:	    2880 kB
Cost 12.096 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 37 fill 5 msec (3.700000 one sort cycle)
VmPeak:	   11044 kB
VmHWM:	    3072 kB
Cost 11.366 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 51 fill 6 msec (5.100000 one sort cycle)
VmPeak:	   10988 kB
VmHWM:	    3068 kB
Cost 15.647 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 63 fill 6 msec (6.300000 one sort cycle)
VmPeak:	   10652 kB
VmHWM:	    3076 kB
Cost 19.379 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 73 fill 8 msec (7.300000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 20.936 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 66 fill 8 msec (6.600000 one sort cycle)
VmPeak:	   10764 kB
VmHWM:	    2868 kB
Cost 18.929 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 50 fill 11 msec (5.000000 one sort cycle)
VmPeak:	    8904 kB
VmHWM:	    1264 kB
Cost 6.320 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 59 fill 11 msec (5.900000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 17.865 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 32 fill 3 msec (3.200000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 9.690 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 50 fill 4 msec (5.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3024 kB
Cost 15.120 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 40 fill 5 msec (4.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 12.112 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 56 fill 6 msec (5.600000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 16.957 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 62 fill 8 msec (6.200000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 18.774 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 50 fill 8 msec (5.000000 one sort cycle)
VmPeak:	   10664 kB
VmHWM:	    3028 kB
Cost 15.140 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 166 fill 10 msec (16.600000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1064 kB
Cost 17.662 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 185 fill 10 msec (18.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 41.366 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 126 fill 3 msec (12.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 28.174 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 136 fill 4 msec (13.600000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 30.410 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 153 fill 6 msec (15.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 34.211 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 160 fill 5 msec (16.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 35.776 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 175 fill 7 msec (17.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 39.200 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 173 fill 8 msec (17.300000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2240 kB
Cost 38.752 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 54 fill 10 msec (5.400000 one sort cycle)
VmPeak:	    8712 kB
VmHWM:	    1072 kB
Cost 5.789 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 69 fill 10 msec (6.900000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 15.428 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 38 fill 4 msec (3.800000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 8.497 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 44 fill 4 msec (4.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 9.838 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 45 fill 6 msec (4.500000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 10.062 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 50 fill 6 msec (5.000000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 11.180 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 57 fill 9 msec (5.700000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 12.745 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1600000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 54 fill 9 msec (5.400000 one sort cycle)
VmPeak:	    9884 kB
VmHWM:	    2236 kB
Cost 12.074 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=100 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 272 fill 31 msec (27.200000 one sort cycle)
VmPeak:	   10660 kB
VmHWM:	    3056 kB
Cost 83.123 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 475 fill 31 msec (47.500000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 478.420 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 341 fill 13 msec (34.100000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 343.455 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 366 fill 13 msec (36.600000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 368.635 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 370 fill 18 msec (37.000000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 372.664 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 402 fill 19 msec (40.200000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 404.894 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 444 fill 30 msec (44.400000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 447.197 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 417 fill 32 msec (41.700000 one sort cycle)
VmPeak:	   17692 kB
VmHWM:	   10072 kB
Cost 420.002 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 670 fill 30 msec (67.000000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1924 kB
Cost 128.908 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 819 fill 33 msec (81.900000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5596 kB
Cost 458.312 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 506 fill 13 msec (50.600000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5560 kB
Cost 281.336 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 923 fill 12 msec (92.300000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5560 kB
Cost 513.188 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 546 fill 18 msec (54.600000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5576 kB
Cost 304.450 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 916 fill 19 msec (91.600000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5576 kB
Cost 510.762 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 907 fill 28 msec (90.700000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5584 kB
Cost 506.469 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 629 fill 29 msec (62.900000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5584 kB
Cost 351.234 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 787 fill 31 msec (78.700000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2360 kB
Cost 185.732 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 811 fill 32 msec (81.100000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7208 kB
Cost 584.569 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 323 fill 13 msec (32.300000 one sort cycle)
VmPeak:	   16492 kB
VmHWM:	    7680 kB
Cost 248.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 332 fill 13 msec (33.200000 one sort cycle)
VmPeak:	   15404 kB
VmHWM:	    7020 kB
Cost 233.064 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 564 fill 18 msec (56.400000 one sort cycle)
VmPeak:	   16780 kB
VmHWM:	    8580 kB
Cost 483.912 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 739 fill 19 msec (73.900000 one sort cycle)
VmPeak:	   16376 kB
VmHWM:	    7624 kB
Cost 563.414 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 813 fill 29 msec (81.300000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7724 kB
Cost 627.961 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 711 fill 32 msec (71.100000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7688 kB
Cost 546.617 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 500 fill 30 msec (50.000000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2432 kB
Cost 121.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 627 fill 31 msec (62.700000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 483.542 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 382 fill 13 msec (38.200000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 294.446 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 858 fill 13 msec (85.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 661.346 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 387 fill 18 msec (38.700000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 298.454 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 753 fill 19 msec (75.300000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 580.412 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 726 fill 29 msec (72.600000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 559.891 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 465 fill 30 msec (46.500000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 358.422 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1111 fill 30 msec (111.100000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1844 kB
Cost 204.868 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1014 fill 32 msec (101.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 543.504 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 615 fill 12 msec (61.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 329.640 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1042 fill 13 msec (104.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 558.929 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 731 fill 24 msec (73.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 391.816 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1095 fill 18 msec (109.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 586.920 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1111 fill 29 msec (111.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 595.496 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 863 fill 31 msec (86.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 462.568 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 279 fill 30 msec (27.900000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1840 kB
Cost 51.336 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 263 fill 33 msec (26.300000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 140.863 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 245 fill 13 msec (24.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 131.222 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 241 fill 12 msec (24.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5352 kB
Cost 128.983 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 248 fill 17 msec (24.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 132.829 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 247 fill 19 msec (24.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 132.293 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 252 fill 27 msec (25.200000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 134.971 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 275 fill 29 msec (27.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 147.290 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 237 fill 30 msec (23.700000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1920 kB
Cost 45.504 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 288 fill 33 msec (28.800000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5596 kB
Cost 161.165 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 181 fill 12 msec (18.100000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5560 kB
Cost 100.636 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 210 fill 13 msec (21.000000 one sort cycle)
VmPeak:	   13140 kB
VmHWM:	    5560 kB
Cost 116.760 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 222 fill 18 msec (22.200000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5572 kB
Cost 123.698 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 244 fill 20 msec (24.400000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5572 kB
Cost 135.957 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 269 fill 27 msec (26.900000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5584 kB
Cost 150.210 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 250 fill 30 msec (25.000000 one sort cycle)
VmPeak:	   13272 kB
VmHWM:	    5580 kB
Cost 139.500 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 211 fill 31 msec (21.100000 one sort cycle)
VmPeak:	    9936 kB
VmHWM:	    2364 kB
Cost 49.880 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 254 fill 34 msec (25.400000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7216 kB
Cost 183.286 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 102 fill 14 msec (10.200000 one sort cycle)
VmPeak:	   16492 kB
VmHWM:	    7688 kB
Cost 78.418 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 103 fill 13 msec (10.300000 one sort cycle)
VmPeak:	   15404 kB
VmHWM:	    7028 kB
Cost 72.388 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 156 fill 18 msec (15.600000 one sort cycle)
VmPeak:	   16780 kB
VmHWM:	    8584 kB
Cost 133.910 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 193 fill 19 msec (19.300000 one sort cycle)
VmPeak:	   16376 kB
VmHWM:	    7632 kB
Cost 147.298 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 221 fill 30 msec (22.100000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7728 kB
Cost 170.789 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 208 fill 32 msec (20.800000 one sort cycle)
VmPeak:	   15672 kB
VmHWM:	    7696 kB
Cost 160.077 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 159 fill 31 msec (15.900000 one sort cycle)
VmPeak:	   10076 kB
VmHWM:	    2440 kB
Cost 38.796 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 209 fill 34 msec (20.900000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 161.181 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 100 fill 13 msec (10.000000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7708 kB
Cost 77.080 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 147 fill 13 msec (14.700000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 113.366 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 128 fill 18 msec (12.800000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 98.714 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 175 fill 19 msec (17.500000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 134.960 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 185 fill 29 msec (18.500000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7716 kB
Cost 142.746 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 159 fill 31 msec (15.900000 one sort cycle)
VmPeak:	   15348 kB
VmHWM:	    7712 kB
Cost 122.621 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 554 fill 30 msec (55.400000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1844 kB
Cost 102.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 637 fill 33 msec (63.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 341.432 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 454 fill 14 msec (45.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 243.526 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 476 fill 13 msec (47.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 255.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 530 fill 18 msec (53.000000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 284.080 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 556 fill 19 msec (55.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 298.238 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 591 fill 61 msec (59.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5364 kB
Cost 317.012 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 585 fill 30 msec (58.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5356 kB
Cost 313.326 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 176 fill 31 msec (17.600000 one sort cycle)
VmPeak:	    9492 kB
VmHWM:	    1848 kB
Cost 32.525 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 231 fill 31 msec (23.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 123.816 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 134 fill 14 msec (13.400000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 71.824 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 155 fill 13 msec (15.500000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 83.080 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 161 fill 18 msec (16.100000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 86.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 176 fill 19 msec (17.600000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 94.336 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 198 fill 26 msec (19.800000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 106.128 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (4800000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 187 fill 30 msec (18.700000 one sort cycle)
VmPeak:	   13008 kB
VmHWM:	    5360 kB
Cost 100.232 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=100 REP=10
+++++ s0 +++++
Sort (64-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 961 fill 104 msec (96.100000 one sort cycle)
VmPeak:	   16132 kB
VmHWM:	    8516 kB
Cost 818.388 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1715 fill 108 msec (171.500000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31900 kB
Cost 5470.850 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1244 fill 43 msec (124.400000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31896 kB
Cost 3967.862 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1329 fill 44 msec (132.900000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31896 kB
Cost 4238.978 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1359 fill 73 msec (135.900000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31892 kB
Cost 4334.123 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1448 fill 84 msec (144.800000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31892 kB
Cost 4617.962 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1539 fill 146 msec (153.900000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31896 kB
Cost 4908.794 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1487 fill 182 msec (148.700000 one sort cycle)
VmPeak:	   39572 kB
VmHWM:	   31896 kB
Cost 4742.935 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 2517 fill 102 msec (251.700000 one sort cycle)
VmPeak:	   12356 kB
VmHWM:	    4752 kB
Cost 1196.078 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3394 fill 107 msec (339.400000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17132 kB
Cost 5814.601 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1860 fill 43 msec (186.000000 one sort cycle)
VmPeak:	   24652 kB
VmHWM:	   17064 kB
Cost 3173.904 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3992 fill 43 msec (399.200000 one sort cycle)
VmPeak:	   24652 kB
VmHWM:	   17068 kB
Cost 6813.546 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2102 fill 75 msec (210.200000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17100 kB
Cost 3594.420 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3844 fill 83 msec (384.400000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17116 kB
Cost 6579.390 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3751 fill 145 msec (375.100000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17100 kB
Cost 6414.210 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 2457 fill 159 msec (245.700000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17116 kB
Cost 4205.401 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 3163 fill 104 msec (316.300000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6124 kB
Cost 1937.021 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3294 fill 107 msec (329.400000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 7348.255 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1233 fill 42 msec (123.300000 one sort cycle)
VmPeak:	   31148 kB
VmHWM:	   22356 kB
Cost 2756.495 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1266 fill 43 msec (126.600000 one sort cycle)
VmPeak:	   33544 kB
VmHWM:	   22756 kB
Cost 2880.910 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2583 fill 73 msec (258.300000 one sort cycle)
VmPeak:	   35356 kB
VmHWM:	   24032 kB
Cost 6207.466 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3213 fill 85 msec (321.300000 one sort cycle)
VmPeak:	   35444 kB
VmHWM:	   24132 kB
Cost 7753.612 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 3468 fill 150 msec (346.800000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22308 kB
Cost 7736.414 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm timsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2942 fill 155 msec (294.200000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22304 kB
Cost 6561.837 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 1951 fill 121 msec (195.100000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 1275.954 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2695 fill 105 msec (269.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 6500.340 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1398 fill 44 msec (139.800000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 3371.976 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3511 fill 44 msec (351.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 8468.532 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1617 fill 74 msec (161.700000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 3900.204 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3438 fill 87 msec (343.800000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 8292.456 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3294 fill 146 msec (329.400000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24120 kB
Cost 7945.128 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1966 fill 157 msec (196.600000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 4742.778 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 4034 fill 101 msec (403.400000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4580 kB
Cost 1847.572 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3724 fill 106 msec (372.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 6070.120 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2403 fill 43 msec (240.300000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 3916.890 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4065 fill 43 msec (406.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 6625.950 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2684 fill 74 msec (268.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4374.920 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4144 fill 87 msec (414.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 6754.720 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4175 fill 146 msec (417.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 6805.250 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3046 fill 157 msec (304.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 4964.980 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 1019 fill 102 msec (101.900000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4576 kB
Cost 466.294 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 932 fill 107 msec (93.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1518.787 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 872 fill 43 msec (87.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1421.011 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1045 fill 42 msec (104.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16292 kB
Cost 1702.514 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 888 fill 76 msec (88.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1447.085 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 902 fill 86 msec (90.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1469.899 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 904 fill 146 msec (90.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1473.158 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 904 fill 161 msec (90.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 1473.158 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 837 fill 101 msec (83.700000 one sort cycle)
VmPeak:	   12356 kB
VmHWM:	    4748 kB
Cost 397.408 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 993 fill 106 msec (99.300000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17132 kB
Cost 1701.208 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 684 fill 43 msec (68.400000 one sort cycle)
VmPeak:	   24652 kB
VmHWM:	   17064 kB
Cost 1167.178 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 822 fill 42 msec (82.200000 one sort cycle)
VmPeak:	   24652 kB
VmHWM:	   17068 kB
Cost 1402.990 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 788 fill 76 msec (78.800000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17100 kB
Cost 1347.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 927 fill 85 msec (92.700000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17112 kB
Cost 1586.282 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 959 fill 147 msec (95.900000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17100 kB
Cost 1639.890 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 901 fill 159 msec (90.100000 one sort cycle)
VmPeak:	   24796 kB
VmHWM:	   17116 kB
Cost 1542.152 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 777 fill 104 msec (77.700000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	    6128 kB
Cost 476.146 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 950 fill 106 msec (95.000000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22312 kB
Cost 2119.640 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 398 fill 42 msec (39.800000 one sort cycle)
VmPeak:	   31148 kB
VmHWM:	   22368 kB
Cost 890.246 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 412 fill 44 msec (41.200000 one sort cycle)
VmPeak:	   33544 kB
VmHWM:	   22768 kB
Cost 938.042 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 650 fill 77 msec (65.000000 one sort cycle)
VmPeak:	   35356 kB
VmHWM:	   24040 kB
Cost 1562.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 802 fill 85 msec (80.200000 one sort cycle)
VmPeak:	   35444 kB
VmHWM:	   24140 kB
Cost 1936.028 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 882 fill 150 msec (88.200000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22316 kB
Cost 1968.271 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 769 fill 159 msec (76.900000 one sort cycle)
VmPeak:	   32876 kB
VmHWM:	   22312 kB
Cost 1715.793 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 569 fill 103 msec (56.900000 one sort cycle)
VmPeak:	   14180 kB
VmHWM:	    6540 kB
Cost 372.126 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 735 fill 106 msec (73.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1773.114 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 437 fill 43 msec (43.700000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1054.219 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 642 fill 43 msec (64.200000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1548.761 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 521 fill 77 msec (52.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1256.860 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 705 fill 85 msec (70.500000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1700.742 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 741 fill 147 msec (74.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24124 kB
Cost 1787.588 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 611 fill 155 msec (61.100000 one sort cycle)
VmPeak:	   31760 kB
VmHWM:	   24128 kB
Cost 1474.221 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 1723 fill 104 msec (172.300000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4576 kB
Cost 788.445 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2046 fill 107 msec (204.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 3334.980 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1580 fill 43 msec (158.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2575.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1642 fill 42 msec (164.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2676.460 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1768 fill 76 msec (176.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 2881.840 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1866 fill 87 msec (186.600000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16296 kB
Cost 3040.834 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2058 fill 148 msec (205.800000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 3354.540 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1935 fill 157 msec (193.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 3154.824 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (64-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 577 fill 103 msec (57.700000 one sort cycle)
VmPeak:	   12228 kB
VmHWM:	    4588 kB
Cost 264.728 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 790 fill 107 msec (79.000000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 1288.016 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 461 fill 44 msec (46.100000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 751.430 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 532 fill 44 msec (53.200000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 867.160 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 535 fill 75 msec (53.500000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 872.050 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 607 fill 85 msec (60.700000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 989.653 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 654 fill 146 msec (65.400000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16300 kB
Cost 1066.020 GB*sec (VmHwM)
Sort (64-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (16000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 669 fill 161 msec (66.900000 one sort cycle)
VmPeak:	   23948 kB
VmHWM:	   16304 kB
Cost 1090.738 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000000 MAX=0
+++++ s0 +++++
Sort (64-bit) int[] algorithm system qsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of system qsort 731 msec
VmPeak:	   47380 kB
VmHWM:	   39740 kB
Cost 29049.940 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm system qsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of system qsort 1245 msec
VmPeak:	  164572 kB
VmHWM:	  156936 kB
Cost 195385.320 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] algorithm yamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of yamsort 1674 msec
VmPeak:	   28904 kB
VmHWM:	   21216 kB
Cost 35515.584 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm yamsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of yamsort 1925 msec
VmPeak:	   90656 kB
VmHWM:	   82960 kB
Cost 159698.000 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] algorithm timsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of timsort 1844 msec
VmPeak:	   35340 kB
VmHWM:	   27772 kB
Cost 51211.568 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm timsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of timsort 1863 msec
VmPeak:	  116400 kB
VmHWM:	  108832 kB
Cost 202754.016 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] algorithm mmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of mmsort 1204 msec
VmPeak:	   37484 kB
VmHWM:	   29904 kB
Cost 36004.416 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm mmsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of mmsort 1481 msec
VmPeak:	  125376 kB
VmHWM:	  117796 kB
Cost 174455.876 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] algorithm symmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of symmsort 3722 msec
VmPeak:	   27852 kB
VmHWM:	   20160 kB
Cost 75035.520 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm symmsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of symmsort 3346 msec
VmPeak:	   86448 kB
VmHWM:	   78764 kB
Cost 263544.344 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] algorithm libc _quicksort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of libc _quicksort 830 msec
VmPeak:	   27852 kB
VmHWM:	   20156 kB
Cost 16729.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm libc _quicksort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 879 msec
VmPeak:	   86448 kB
VmHWM:	   78756 kB
Cost 69226.524 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] algorithm template yamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template yamsort 723 msec
VmPeak:	   28904 kB
VmHWM:	   21208 kB
Cost 15333.384 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template yamsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template yamsort 842 msec
VmPeak:	   90656 kB
VmHWM:	   82960 kB
Cost 69852.320 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] algorithm template Swenson tim_sort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson tim_sort 578 msec
VmPeak:	   35340 kB
VmHWM:	   27772 kB
Cost 16052.216 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson tim_sort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 733 msec
VmPeak:	  116400 kB
VmHWM:	  108836 kB
Cost 79776.788 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] algorithm template mmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template mmsort 484 msec
VmPeak:	   37484 kB
VmHWM:	   29900 kB
Cost 14471.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template mmsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template mmsort 635 msec
VmPeak:	  125376 kB
VmHWM:	  117800 kB
Cost 74803.000 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] algorithm template symmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template symmsort 1816 msec
VmPeak:	   27852 kB
VmHWM:	   20156 kB
Cost 36603.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template symmsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template symmsort 2110 msec
VmPeak:	   86448 kB
VmHWM:	   78760 kB
Cost 166183.600 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] algorithm template Swenson quick_sort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson quick_sort 435 msec
VmPeak:	   27852 kB
VmHWM:	   20160 kB
Cost 8769.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson quick_sort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template Swenson quick_sort 489 msec
VmPeak:	   86448 kB
VmHWM:	   78756 kB
Cost 38511.684 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] algorithm template aamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template aamsort 490 msec
VmPeak:	   27852 kB
VmHWM:	   20168 kB
Cost 9882.320 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template aamsort (5000000 elements (80000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template aamsort 629 msec
VmPeak:	   86448 kB
VmHWM:	   78760 kB
Cost 49540.040 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000000 MAX=0
+++++ s0 +++++
Sort (64-bit) int[] algorithm system qsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of system qsort 1550 msec
VmPeak:	   86444 kB
VmHWM:	   78804 kB
Cost 122146.200 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm system qsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of system qsort 2606 msec
VmPeak:	  320820 kB
VmHWM:	  313184 kB
Cost 816157.504 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] algorithm yamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of yamsort 3623 msec
VmPeak:	   49428 kB
VmHWM:	   41780 kB
Cost 151368.940 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm yamsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of yamsort 4057 msec
VmPeak:	  172896 kB
VmHWM:	  165196 kB
Cost 670200.172 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] algorithm timsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of timsort 3690 msec
VmPeak:	   62360 kB
VmHWM:	   54792 kB
Cost 202182.480 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm timsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of timsort 3841 msec
VmPeak:	  224476 kB
VmHWM:	  216908 kB
Cost 833143.628 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] algorithm mmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of mmsort 2523 msec
VmPeak:	   66780 kB
VmHWM:	   59200 kB
Cost 149361.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm mmsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of mmsort 3044 msec
VmPeak:	  242564 kB
VmHWM:	  234984 kB
Cost 715291.296 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] algorithm symmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of symmsort 8008 msec
VmPeak:	   47384 kB
VmHWM:	   39692 kB
Cost 317853.536 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm symmsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of symmsort 7151 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 1121877.484 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] algorithm libc _quicksort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of libc _quicksort 1707 msec
VmPeak:	   47384 kB
VmHWM:	   39684 kB
Cost 67740.588 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm libc _quicksort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 1778 msec
VmPeak:	  164572 kB
VmHWM:	  156880 kB
Cost 278932.640 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] algorithm template yamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template yamsort 1499 msec
VmPeak:	   49428 kB
VmHWM:	   41776 kB
Cost 62622.224 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template yamsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template yamsort 1771 msec
VmPeak:	  172896 kB
VmHWM:	  165200 kB
Cost 292569.200 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] algorithm template Swenson tim_sort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson tim_sort 1206 msec
VmPeak:	   62360 kB
VmHWM:	   54792 kB
Cost 66079.152 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson tim_sort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 1552 msec
VmPeak:	  224476 kB
VmHWM:	  216912 kB
Cost 336647.424 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] algorithm template mmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template mmsort 1010 msec
VmPeak:	   66780 kB
VmHWM:	   59200 kB
Cost 59792.000 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template mmsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template mmsort 1320 msec
VmPeak:	  242564 kB
VmHWM:	  234984 kB
Cost 310178.880 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] algorithm template symmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template symmsort 4272 msec
VmPeak:	   47384 kB
VmHWM:	   39688 kB
Cost 169547.136 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template symmsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template symmsort 4556 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 714763.504 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (64-bit) int[] algorithm template Swenson quick_sort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson quick_sort 893 msec
VmPeak:	   47384 kB
VmHWM:	   39692 kB
Cost 35444.956 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson quick_sort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template Swenson quick_sort 1002 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 157197.768 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (64-bit) int[] algorithm template aamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template aamsort 1031 msec
VmPeak:	   47384 kB
VmHWM:	   39696 kB
Cost 40926.576 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template aamsort (10000000 elements (160000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template aamsort 1355 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 212577.820 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000000 MAX=10
+++++ s0 +++++
Sort (64-bit) int[] algorithm system qsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of system qsort 450 msec
VmPeak:	   47380 kB
VmHWM:	   38768 kB
Cost 17445.600 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm system qsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of system qsort 866 msec
VmPeak:	  164572 kB
VmHWM:	  153032 kB
Cost 132525.712 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] algorithm yamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of yamsort 1182 msec
VmPeak:	   29696 kB
VmHWM:	   22068 kB
Cost 26084.376 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm yamsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of yamsort 1414 msec
VmPeak:	   94028 kB
VmHWM:	   86368 kB
Cost 122124.352 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] algorithm timsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of timsort 1331 msec
VmPeak:	   35340 kB
VmHWM:	   27772 kB
Cost 36964.532 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm timsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of timsort 1410 msec
VmPeak:	  116400 kB
VmHWM:	  108832 kB
Cost 153453.120 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] algorithm mmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of mmsort 866 msec
VmPeak:	   37484 kB
VmHWM:	   29904 kB
Cost 25896.864 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm mmsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of mmsort 1094 msec
VmPeak:	  125376 kB
VmHWM:	  117796 kB
Cost 128868.824 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] algorithm symmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of symmsort 1358 msec
VmPeak:	   27852 kB
VmHWM:	   20160 kB
Cost 27377.280 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm symmsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of symmsort 1216 msec
VmPeak:	   86448 kB
VmHWM:	   78760 kB
Cost 95772.160 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] algorithm libc _quicksort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of libc _quicksort 511 msec
VmPeak:	   27852 kB
VmHWM:	   20160 kB
Cost 10301.760 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm libc _quicksort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 458 msec
VmPeak:	   86448 kB
VmHWM:	   78760 kB
Cost 36072.080 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] algorithm template yamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template yamsort 372 msec
VmPeak:	   29696 kB
VmHWM:	   22068 kB
Cost 8209.296 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template yamsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template yamsort 480 msec
VmPeak:	   94028 kB
VmHWM:	   86368 kB
Cost 41456.640 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] algorithm template Swenson tim_sort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template Swenson tim_sort 311 msec
VmPeak:	   35340 kB
VmHWM:	   27776 kB
Cost 8638.336 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson tim_sort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 476 msec
VmPeak:	  116400 kB
VmHWM:	  108840 kB
Cost 51807.840 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] algorithm template mmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template mmsort 219 msec
VmPeak:	   37484 kB
VmHWM:	   29904 kB
Cost 6548.976 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template mmsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template mmsort 332 msec
VmPeak:	  125376 kB
VmHWM:	  117800 kB
Cost 39109.600 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] algorithm template symmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template symmsort 634 msec
VmPeak:	   27852 kB
VmHWM:	   20156 kB
Cost 12778.904 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template symmsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template symmsort 805 msec
VmPeak:	   86448 kB
VmHWM:	   78764 kB
Cost 63405.020 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (64-bit) int[] algorithm template aamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template aamsort 245 msec
VmPeak:	   27852 kB
VmHWM:	   20164 kB
Cost 4940.180 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template aamsort (5000000 elements (80000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of template aamsort 409 msec
VmPeak:	   86448 kB
VmHWM:	   78756 kB
Cost 32211.204 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000000 MAX=10
+++++ s0 +++++
Sort (64-bit) int[] algorithm system qsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of system qsort 914 msec
VmPeak:	   86444 kB
VmHWM:	   76852 kB
Cost 70242.728 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm system qsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of system qsort 1804 msec
VmPeak:	  320820 kB
VmHWM:	  305364 kB
Cost 550876.656 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (64-bit) int[] algorithm yamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of yamsort 2474 msec
VmPeak:	   51204 kB
VmHWM:	   43544 kB
Cost 107727.856 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm yamsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of yamsort 2943 msec
VmPeak:	  179892 kB
VmHWM:	  172292 kB
Cost 507055.356 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (64-bit) int[] algorithm timsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of timsort 2768 msec
VmPeak:	   62360 kB
VmHWM:	   54792 kB
Cost 151664.256 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm timsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of timsort 2900 msec
VmPeak:	  224476 kB
VmHWM:	  216908 kB
Cost 629033.200 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (64-bit) int[] algorithm mmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of mmsort 1792 msec
VmPeak:	   66780 kB
VmHWM:	   59196 kB
Cost 106079.232 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm mmsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of mmsort 2240 msec
VmPeak:	  242564 kB
VmHWM:	  234984 kB
Cost 526364.160 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (64-bit) int[] algorithm symmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of symmsort 2844 msec
VmPeak:	   47384 kB
VmHWM:	   39692 kB
Cost 112884.048 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm symmsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of symmsort 2488 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 390327.392 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (64-bit) int[] algorithm libc _quicksort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of libc _quicksort 1050 msec
VmPeak:	   47384 kB
VmHWM:	   39688 kB
Cost 41672.400 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm libc _quicksort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 965 msec
VmPeak:	  164572 kB
VmHWM:	  156880 kB
Cost 151389.200 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (64-bit) int[] algorithm template yamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template yamsort 784 msec
VmPeak:	   51204 kB
VmHWM:	   43540 kB
Cost 34135.360 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template yamsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template yamsort 1024 msec
VmPeak:	  179892 kB
VmHWM:	  172292 kB
Cost 176427.008 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (64-bit) int[] algorithm template Swenson tim_sort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template Swenson tim_sort 641 msec
VmPeak:	   62360 kB
VmHWM:	   54792 kB
Cost 35121.672 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template Swenson tim_sort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 869 msec
VmPeak:	  224476 kB
VmHWM:	  216916 kB
Cost 188500.004 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (64-bit) int[] algorithm template mmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template mmsort 455 msec
VmPeak:	   66780 kB
VmHWM:	   59200 kB
Cost 26936.000 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template mmsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template mmsort 716 msec
VmPeak:	  242564 kB
VmHWM:	  234984 kB
Cost 168248.544 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (64-bit) int[] algorithm template symmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template symmsort 1297 msec
VmPeak:	   47384 kB
VmHWM:	   39688 kB
Cost 51475.336 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template symmsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template symmsort 1687 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 264663.308 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (64-bit) int[] algorithm template aamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template aamsort 502 msec
VmPeak:	   47384 kB
VmHWM:	   39696 kB
Cost 19927.392 GB*sec (VmHwM)
Sort (64-bit) struct data[] algorithm template aamsort (10000000 elements (160000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of template aamsort 859 msec
VmPeak:	  164572 kB
VmHWM:	  156884 kB
Cost 134763.356 GB*sec (VmHwM)
-------------------------
–í—Å–∫ –ê–ø—Ä  8 10:05:52 MSK 2012
]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ 
]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ 
]0;avp@avp-ubu1: ~/src/yamsortavp@avp-ubu1:~/src/yamsort$ exit

–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –í—Å–∫ 08 –ê–ø—Ä 2012 10:06:03
