–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –ü–Ω. 02 –∞–ø—Ä. 2012 18:43:54
]0;avp@avp-xub11: ~/src/yamsortavp@avp-xub11:~/src/yamsort$ cat /proc/cpuinfo 
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 23
model name	: Pentium(R) Dual-Core  CPU      E5400  @ 2.70GHz
stepping	: 10
cpu MHz		: 2696.969
cache size	: 6144 KB
fdiv_bug	: no
hlt_bug		: no
f00f_bug	: no
coma_bug	: no
fpu		: yes
fpu_exception	: yes
cpuid level	: 5
wp		: yes
flags		: fpu vme de pse tsc msr mce cx8 apic mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 constant_tsc up pni monitor ssse3
bogomips	: 5393.93
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

]0;avp@avp-xub11: ~/src/yamsortavp@avp-xub11:~/src/yamsort$ ./ms.sh 
–ü–Ω. –∞–ø—Ä.  2 18:44:23 MSK 2012
============TEST measure algorithms N=1000 MAX=0 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 117 fill 17 msec (0.117000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     620 kB
Cost 0.073 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 136 fill 15 msec (0.136000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.086 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 81 fill 3 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 88 fill 3 msec (0.088000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.055 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 97 fill 4 msec (0.097000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     632 kB
Cost 0.061 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 110 fill 4 msec (0.110000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.070 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 117 fill 7 msec (0.117000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.074 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 110 fill 6 msec (0.110000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.070 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 209 fill 14 msec (0.209000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.116 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 222 fill 15 msec (0.222000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 8 fill 3 msec (0.008000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.004 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 244 fill 2 msec (0.244000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.136 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 97 fill 5 msec (0.097000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 260 fill 4 msec (0.260000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 261 fill 7 msec (0.261000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 147 fill 7 msec (0.147000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.081 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 324 fill 17 msec (0.324000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.180 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 348 fill 18 msec (0.348000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.192 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 14 fill 3 msec (0.014000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.008 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 26 fill 1 msec (0.026000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.014 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 149 fill 5 msec (0.149000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 333 fill 4 msec (0.333000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.184 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 350 fill 8 msec (0.350000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.195 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 239 fill 7 msec (0.239000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.133 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 176 fill 16 msec (0.176000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.098 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 193 fill 17 msec (0.193000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.107 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 6 fill 3 msec (0.006000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.003 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 269 fill 2 msec (0.269000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.150 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 67 fill 4 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 252 fill 5 msec (0.252000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.139 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 242 fill 8 msec (0.242000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.135 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 112 fill 3 msec (0.112000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.062 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 278 fill 16 msec (0.278000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.155 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 294 fill 14 msec (0.294000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.163 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 10 fill 4 msec (0.010000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.006 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 134 fill 3 msec (0.134000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 111 fill 4 msec (0.111000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 194 fill 2 msec (0.194000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.107 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 236 fill 6 msec (0.236000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.130 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 173 fill 7 msec (0.173000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.096 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 150 fill 16 msec (0.150000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 142 fill 17 msec (0.142000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.079 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 52 fill 3 msec (0.052000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 44 fill 2 msec (0.044000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.024 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 52 fill 3 msec (0.052000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 89 fill 5 msec (0.089000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.049 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 95 fill 6 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.053 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 68 fill 5 msec (0.068000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.038 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 62 fill 20 msec (0.062000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 84 fill 16 msec (0.084000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 9 fill 2 msec (0.009000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.005 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 2 msec (0.062000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 62 fill 4 msec (0.062000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 69 fill 4 msec (0.069000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.038 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 75 fill 7 msec (0.075000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.041 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 57 fill 6 msec (0.057000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.032 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 108 fill 12 msec (0.108000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.060 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 106 fill 15 msec (0.106000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.059 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 5 fill 3 msec (0.005000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.003 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 4 fill 3 msec (0.004000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.002 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 52 fill 5 msec (0.052000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 95 fill 5 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 104 fill 7 msec (0.104000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.058 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 58 fill 6 msec (0.058000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.032 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 34 fill 15 msec (0.034000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.019 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 56 fill 14 msec (0.056000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.031 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 6 fill 1 msec (0.006000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.003 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 58 fill 2 msec (0.058000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 21 fill 3 msec (0.021000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.012 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 55 fill 5 msec (0.055000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.031 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 67 fill 5 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 36 fill 6 msec (0.036000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.020 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 131 fill 15 msec (0.131000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.072 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 169 fill 31 msec (0.169000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.094 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 16 fill 2 msec (0.016000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.009 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 56 fill 3 msec (0.056000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.031 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 80 fill 4 msec (0.080000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 102 fill 3 msec (0.102000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.057 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 130 fill 7 msec (0.130000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.072 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 103 fill 8 msec (0.103000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.057 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 65 fill 18 msec (0.065000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 85 fill 15 msec (0.085000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 30 fill 2 msec (0.030000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.017 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 49 fill 3 msec (0.049000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 50 fill 3 msec (0.050000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.028 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 58 fill 3 msec (0.058000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 61 fill 5 msec (0.061000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 67 fill 7 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.037 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 60 fill 16 msec (0.060000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 95 fill 13 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 10 fill 3 msec (0.010000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.006 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 61 fill 3 msec (0.061000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 50 fill 4 msec (0.050000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.028 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 74 fill 4 msec (0.074000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.041 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 81 fill 5 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.045 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 2147483646 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 78 fill 6 msec (0.078000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.043 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=0 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 679 fill 82 msec (0.679000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     640 kB
Cost 0.435 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 907 fill 83 msec (0.907000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.610 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 436 fill 13 msec (0.436000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     680 kB
Cost 0.296 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 563 fill 14 msec (0.563000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.381 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 613 fill 20 msec (0.613000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.414 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 732 fill 22 msec (0.732000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     680 kB
Cost 0.498 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 744 fill 35 msec (0.744000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.503 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 701 fill 34 msec (0.701000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.471 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 1212 fill 85 msec (1.212000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.669 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1306 fill 88 msec (1.306000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.726 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 44 fill 12 msec (0.044000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.024 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1338 fill 14 msec (1.338000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.739 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 753 fill 19 msec (0.753000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.419 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1411 fill 23 msec (1.411000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.785 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1417 fill 35 msec (1.417000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.788 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 918 fill 36 msec (0.918000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.510 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 1710 fill 74 msec (1.710000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.944 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1778 fill 89 msec (1.778000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.981 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 50 fill 13 msec (0.050000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.028 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 131 fill 15 msec (0.131000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.072 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 937 fill 18 msec (0.937000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.517 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1353 fill 18 msec (1.353000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.747 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1396 fill 30 msec (1.396000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.771 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1233 fill 35 msec (1.233000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.686 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 968 fill 78 msec (0.968000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.538 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 968 fill 82 msec (0.968000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.534 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 46 fill 13 msec (0.046000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.026 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1029 fill 12 msec (1.029000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.568 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 491 fill 14 msec (0.491000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.271 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1093 fill 20 msec (1.093000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.608 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1016 fill 37 msec (1.016000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.561 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 612 fill 35 msec (0.612000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.338 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1966 fill 84 msec (1.966000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 1.085 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2093 fill 95 msec (2.093000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 1.155 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 57 fill 11 msec (0.057000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 817 fill 13 msec (0.817000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.451 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 705 fill 20 msec (0.705000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.392 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1291 fill 26 msec (1.291000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.713 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1492 fill 34 msec (1.492000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.824 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1145 fill 35 msec (1.145000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.632 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 732 fill 75 msec (0.732000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.404 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 745 fill 81 msec (0.745000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.414 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 281 fill 13 msec (0.281000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.155 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 289 fill 13 msec (0.289000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.161 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 313 fill 20 msec (0.313000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.173 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 547 fill 24 msec (0.547000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.304 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 621 fill 34 msec (0.621000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.343 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 416 fill 33 msec (0.416000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.231 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 451 fill 84 msec (0.451000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.249 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 514 fill 97 msec (0.514000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.284 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 19 fill 13 msec (0.019000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.010 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 316 fill 14 msec (0.316000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.176 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 259 fill 16 msec (0.259000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 393 fill 22 msec (0.393000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.219 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 449 fill 34 msec (0.449000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.248 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 376 fill 30 msec (0.376000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.209 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 581 fill 78 msec (0.581000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.323 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 651 fill 88 msec (0.651000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.362 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 29 fill 11 msec (0.029000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.016 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 41 fill 14 msec (0.041000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.023 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 324 fill 19 msec (0.324000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.179 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 451 fill 22 msec (0.451000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.251 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 492 fill 36 msec (0.492000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.272 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 390 fill 37 msec (0.390000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.215 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 252 fill 83 msec (0.252000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 373 fill 78 msec (0.373000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.207 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 20 fill 14 msec (0.020000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.011 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 262 fill 14 msec (0.262000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.146 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 164 fill 21 msec (0.164000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.091 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 312 fill 11 msec (0.312000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.173 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 312 fill 37 msec (0.312000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.172 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 205 fill 37 msec (0.205000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.114 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 1095 fill 81 msec (1.095000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.604 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1333 fill 96 msec (1.333000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.736 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 89 fill 12 msec (0.089000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.049 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 282 fill 16 msec (0.282000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.156 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 497 fill 20 msec (0.497000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.276 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 672 fill 23 msec (0.672000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.374 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 862 fill 31 msec (0.862000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.476 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 835 fill 36 msec (0.835000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.461 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 399 fill 78 msec (0.399000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.220 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 470 fill 89 msec (0.470000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.259 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 223 fill 12 msec (0.223000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 290 fill 9 msec (0.290000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.161 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 353 fill 19 msec (0.353000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.195 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 397 fill 23 msec (0.397000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.221 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 386 fill 46 msec (0.386000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.213 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 431 fill 36 msec (0.431000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.240 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 337 fill 80 msec (0.337000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.186 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 542 fill 92 msec (0.542000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.299 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 31 fill 14 msec (0.031000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.017 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 308 fill 14 msec (0.308000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 337 fill 21 msec (0.337000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.186 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 443 fill 21 msec (0.443000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.246 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 474 fill 35 msec (0.474000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.262 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 2147483646 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 425 fill 37 msec (0.425000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.235 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=0 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 158 fill 17 msec (1.580000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     656 kB
Cost 1.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 198 fill 18 msec (1.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.449 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 99 fill 7 msec (0.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 0.729 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 119 fill 3 msec (1.190000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 0.876 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 133 fill 4 msec (1.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 0.979 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 155 fill 4 msec (1.550000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.135 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 164 fill 7 msec (1.640000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.207 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 166 fill 8 msec (1.660000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.222 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 275 fill 12 msec (2.750000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.529 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 272 fill 10 msec (2.720000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 6 fill 3 msec (0.060000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 246 fill 3 msec (2.460000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.358 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 164 fill 4 msec (1.640000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.912 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 333 fill 4 msec (3.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.838 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 311 fill 7 msec (3.110000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.717 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 210 fill 8 msec (2.100000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.168 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 348 fill 17 msec (3.480000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.921 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 402 fill 15 msec (4.020000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 2.235 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 13 fill 3 msec (0.130000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.072 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 25 fill 3 msec (0.250000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.139 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 209 fill 3 msec (2.090000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.154 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 330 fill 5 msec (3.300000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.835 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 331 fill 6 msec (3.310000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.827 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 265 fill 8 msec (2.650000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.473 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 205 fill 17 msec (2.050000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 219 fill 17 msec (2.190000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.209 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 8 fill 3 msec (0.080000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 238 fill 2 msec (2.380000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.314 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 109 fill 4 msec (1.090000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.602 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 221 fill 4 msec (2.210000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.229 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 233 fill 7 msec (2.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.286 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 149 fill 6 msec (1.490000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.828 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 442 fill 17 msec (4.420000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 2.440 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 499 fill 17 msec (4.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 2.774 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 12 fill 3 msec (0.120000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.066 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 169 fill 3 msec (1.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.940 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 180 fill 4 msec (1.800000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.994 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 290 fill 5 msec (2.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.601 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 329 fill 6 msec (3.290000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.816 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 269 fill 8 msec (2.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.485 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 169 fill 17 msec (1.690000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.933 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 170 fill 18 msec (1.700000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.938 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 67 fill 3 msec (0.670000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.370 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 63 fill 3 msec (0.630000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.348 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 74 fill 4 msec (0.740000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.411 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 120 fill 4 msec (1.200000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 135 fill 7 msec (1.350000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.745 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 91 fill 8 msec (0.910000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.506 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 116 fill 15 msec (1.160000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.640 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 124 fill 17 msec (1.240000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 6 fill 3 msec (0.060000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 92 fill 3 msec (0.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.508 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 71 fill 5 msec (0.710000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.395 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 84 fill 4 msec (0.840000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.467 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 105 fill 8 msec (1.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.580 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 93 fill 8 msec (0.930000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.513 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 132 fill 17 msec (1.320000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.729 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 147 fill 17 msec (1.470000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.811 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 6 fill 2 msec (0.060000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 8 fill 3 msec (0.080000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 96 fill 5 msec (0.960000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 0.783 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 104 fill 5 msec (1.040000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 0.849 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 115 fill 6 msec (1.150000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.639 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 91 fill 7 msec (0.910000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.502 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 61 fill 16 msec (0.610000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.339 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 81 fill 17 msec (0.810000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.450 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 6 fill 2 msec (0.060000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 57 fill 4 msec (0.570000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.315 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 36 fill 4 msec (0.360000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.199 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 67 fill 5 msec (0.670000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.373 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 69 fill 7 msec (0.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.381 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 50 fill 7 msec (0.500000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.278 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 228 fill 17 msec (2.280000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.268 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 313 fill 17 msec (3.130000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.740 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 22 fill 3 msec (0.220000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.121 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 61 fill 3 msec (0.610000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.339 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 122 fill 4 msec (1.220000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.673 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 158 fill 5 msec (1.580000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.878 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 198 fill 7 msec (1.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.093 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 186 fill 6 msec (1.860000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.027 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 96 fill 15 msec (0.960000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.530 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 109 fill 27 msec (1.090000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.606 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 57 fill 2 msec (0.570000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.315 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 63 fill 2 msec (0.630000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.350 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 79 fill 4 msec (0.790000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.436 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 74 fill 5 msec (0.740000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.411 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 93 fill 6 msec (0.930000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.513 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 96 fill 8 msec (0.960000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.530 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 77 fill 16 msec (0.770000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.425 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 119 fill 18 msec (1.190000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.657 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 8 fill 2 msec (0.080000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 70 fill 3 msec (0.700000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.386 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 74 fill 4 msec (0.740000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.411 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 98 fill 5 msec (0.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.541 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 105 fill 7 msec (1.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.584 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 2147483646 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 96 fill 7 msec (0.960000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.534 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=0 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 502 fill 63 msec (5.020000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 3.695 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 686 fill 56 msec (6.860000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 8.452 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 317 fill 7 msec (3.170000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	     972 kB
Cost 3.081 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 385 fill 9 msec (3.850000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 4.743 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 454 fill 10 msec (4.540000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 5.611 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 537 fill 14 msec (5.370000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1240 kB
Cost 6.659 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 571 fill 21 msec (5.710000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 7.058 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 529 fill 21 msec (5.290000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1240 kB
Cost 6.560 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 995 fill 48 msec (9.950000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 5.492 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1073 fill 50 msec (10.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 8.756 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 21 fill 8 msec (0.210000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 0.172 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1099 fill 8 msec (10.990000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 9.012 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 554 fill 8 msec (5.540000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.543 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1065 fill 14 msec (10.650000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 8.733 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1122 fill 22 msec (11.220000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 9.200 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 744 fill 20 msec (7.440000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.071 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 1260 fill 45 msec (12.600000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 6.955 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1391 fill 54 msec (13.910000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 15.023 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 36 fill 8 msec (0.360000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 0.294 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 77 fill 9 msec (0.770000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 0.631 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 763 fill 9 msec (7.630000 one sort cycle)
VmPeak:	    2804 kB
VmHWM:	    1080 kB
Cost 8.240 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1256 fill 14 msec (12.560000 one sort cycle)
VmPeak:	    2768 kB
VmHWM:	    1084 kB
Cost 13.615 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1459 fill 23 msec (14.590000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 15.816 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1033 fill 19 msec (10.330000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 11.198 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 761 fill 47 msec (7.610000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 4.201 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 812 fill 46 msec (8.120000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 8.770 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 31 fill 8 msec (0.310000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	     904 kB
Cost 0.280 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 932 fill 9 msec (9.320000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 10.066 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 381 fill 13 msec (3.810000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 4.115 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 919 fill 14 msec (9.190000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 9.925 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 898 fill 18 msec (8.980000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 9.734 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 497 fill 23 msec (4.970000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 5.387 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1629 fill 42 msec (16.290000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 8.992 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1703 fill 58 msec (17.030000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 13.896 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 28 fill 8 msec (0.280000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 0.230 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 752 fill 10 msec (7.520000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.136 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 589 fill 11 msec (5.890000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.830 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1109 fill 14 msec (11.090000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 9.049 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1208 fill 22 msec (12.080000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 9.857 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 870 fill 23 msec (8.700000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 7.134 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 535 fill 40 msec (5.350000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 2.975 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 485 fill 51 msec (4.850000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 3.977 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 216 fill 5 msec (2.160000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 1.771 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 214 fill 8 msec (2.140000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.746 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 249 fill 9 msec (2.490000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 393 fill 13 msec (3.930000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.207 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 422 fill 22 msec (4.220000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.444 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 308 fill 21 msec (3.080000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.526 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 331 fill 47 msec (3.310000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.827 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 416 fill 56 msec (4.160000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.395 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 17 fill 8 msec (0.170000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 0.139 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 267 fill 8 msec (2.670000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.189 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 247 fill 11 msec (2.470000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.025 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 335 fill 13 msec (3.350000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.747 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 347 fill 21 msec (3.470000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.832 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 295 fill 25 msec (2.950000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.407 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 433 fill 51 msec (4.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.390 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 543 fill 45 msec (5.430000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 5.864 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 17 fill 9 msec (0.170000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 0.139 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 34 fill 10 msec (0.340000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 0.279 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 264 fill 9 msec (2.640000 one sort cycle)
VmPeak:	    2804 kB
VmHWM:	    1084 kB
Cost 2.862 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 379 fill 13 msec (3.790000 one sort cycle)
VmPeak:	    2768 kB
VmHWM:	    1084 kB
Cost 4.108 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 430 fill 21 msec (4.300000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.661 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 354 fill 25 msec (3.540000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 3.837 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 215 fill 44 msec (2.150000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.187 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 305 fill 55 msec (3.050000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 3.306 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 13 fill 8 msec (0.130000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	     908 kB
Cost 0.118 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 233 fill 8 msec (2.330000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.516 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 125 fill 10 msec (1.250000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 1.350 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 246 fill 13 msec (2.460000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 2.667 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 263 fill 21 msec (2.630000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.840 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 170 fill 26 msec (1.700000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 1.836 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 731 fill 54 msec (7.310000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 4.035 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1015 fill 57 msec (10.150000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 8.282 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 48 fill 8 msec (0.480000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 0.392 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 203 fill 9 msec (2.030000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 1.665 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 436 fill 14 msec (4.360000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 3.575 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 531 fill 13 msec (5.310000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 4.333 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 663 fill 21 msec (6.630000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.437 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 651 fill 29 msec (6.510000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.338 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 290 fill 49 msec (2.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 348 fill 55 msec (3.480000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.854 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 162 fill 9 msec (1.620000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.322 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 205 fill 9 msec (2.050000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 1.681 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 284 fill 12 msec (2.840000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.329 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 254 fill 15 msec (2.540000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 285 fill 21 msec (2.850000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.337 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 326 fill 23 msec (3.260000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.660 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 235 fill 52 msec (2.350000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.307 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 365 fill 54 msec (3.650000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.978 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 21 fill 7 msec (0.210000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 0.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 235 fill 8 msec (2.350000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.918 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 237 fill 11 msec (2.370000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.934 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 292 fill 13 msec (2.920000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.394 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 315 fill 22 msec (3.150000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.583 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 2147483646 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 268 fill 22 msec (2.680000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.187 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=0 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 198 fill 16 msec (19.800000 one sort cycle)
VmPeak:	    2980 kB
VmHWM:	    1272 kB
Cost 25.186 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 357 fill 16 msec (35.700000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 101.531 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 169 fill 3 msec (16.900000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2316 kB
Cost 39.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 251 fill 3 msec (25.100000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 71.585 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 280 fill 0 msec (28.000000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 79.856 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 291 fill 5 msec (29.100000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 82.760 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 304 fill 7 msec (30.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 86.579 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 298 fill 9 msec (29.800000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 84.751 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 359 fill 17 msec (35.900000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 29.438 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 363 fill 20 msec (36.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 68.099 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 10 fill 3 msec (1.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 1.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 321 fill 3 msec (32.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 51.617 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 231 fill 10 msec (23.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 37.145 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 403 fill 5 msec (40.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 64.964 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 395 fill 9 msec (39.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 63.674 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 268 fill 11 msec (26.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 43.094 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 443 fill 18 msec (44.300000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1116 kB
Cost 49.439 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 477 fill 20 msec (47.700000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2136 kB
Cost 101.887 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 15 fill 5 msec (1.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 2.418 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 35 fill 2 msec (3.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 5.642 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 345 fill 6 msec (34.500000 one sort cycle)
VmPeak:	    3928 kB
VmHWM:	    2436 kB
Cost 84.042 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 466 fill 5 msec (46.600000 one sort cycle)
VmPeak:	    4216 kB
VmHWM:	    2600 kB
Cost 121.160 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 487 fill 9 msec (48.700000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 104.413 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 386 fill 9 msec (38.600000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 82.604 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 283 fill 16 msec (28.300000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1084 kB
Cost 30.677 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 374 fill 18 msec (37.400000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2260 kB
Cost 84.524 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 18 fill 2 msec (1.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    1728 kB
Cost 3.110 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 353 fill 3 msec (35.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 79.919 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 216 fill 4 msec (21.600000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 48.902 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 365 fill 6 msec (36.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 82.782 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 373 fill 9 msec (37.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 84.596 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 287 fill 9 msec (28.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 65.092 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 606 fill 12 msec (60.600000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 49.450 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 666 fill 19 msec (66.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 107.093 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 11 fill 3 msec (1.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 1.769 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 227 fill 4 msec (22.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 36.592 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 260 fill 5 msec (26.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 41.912 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 384 fill 4 msec (38.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 61.901 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 437 fill 8 msec (43.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 70.270 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 338 fill 10 msec (33.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 54.486 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 202 fill 17 msec (20.200000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 16.483 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 196 fill 21 msec (19.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 31.517 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 102 fill 3 msec (10.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 16.442 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 85 fill 3 msec (8.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 13.668 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 96 fill 6 msec (9.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 15.475 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 149 fill 1 msec (14.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 23.959 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 168 fill 9 msec (16.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 27.082 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 123 fill 8 msec (12.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 19.778 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 123 fill 19 msec (12.300000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 10.086 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 168 fill 18 msec (16.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 31.450 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 4 fill 4 msec (0.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 0.643 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 116 fill 4 msec (11.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 18.699 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 103 fill 5 msec (10.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 16.604 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 135 fill 8 msec (13.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 21.762 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 140 fill 9 msec (14.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 22.568 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 113 fill 9 msec (11.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 18.170 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 172 fill 18 msec (17.200000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1120 kB
Cost 19.264 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 204 fill 16 msec (20.400000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 43.738 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 8 fill 3 msec (0.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 1.286 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 14 fill 4 msec (1.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 2.257 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 173 fill 2 msec (17.300000 one sort cycle)
VmPeak:	    3928 kB
VmHWM:	    2440 kB
Cost 42.212 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 192 fill 4 msec (19.200000 one sort cycle)
VmPeak:	    4216 kB
VmHWM:	    2604 kB
Cost 49.997 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 163 fill 8 msec (16.300000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 35.012 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 138 fill 9 msec (13.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 29.587 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 84 fill 13 msec (8.400000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1080 kB
Cost 9.072 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 182 fill 22 msec (18.200000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 41.278 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 7 fill 6 msec (0.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    1728 kB
Cost 1.210 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 141 fill 4 msec (14.100000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 31.922 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 111 fill 7 msec (11.100000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 25.219 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 149 fill 5 msec (14.900000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 33.793 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 158 fill 9 msec (15.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 35.834 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 127 fill 10 msec (12.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 28.804 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 303 fill 16 msec (30.300000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 24.725 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 438 fill 19 msec (43.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 70.606 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 20 fill 5 msec (2.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 3.224 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 88 fill 3 msec (8.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 14.186 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 176 fill 5 msec (17.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 28.301 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 225 fill 5 msec (22.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 36.180 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 284 fill 9 msec (28.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 45.667 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 277 fill 10 msec (27.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 44.542 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson quick_sort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 108 fill 17 msec (10.800000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 8.813 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 134 fill 19 msec (13.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 21.547 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 78 fill 3 msec (7.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 12.542 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 95 fill 4 msec (9.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 15.314 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 116 fill 5 msec (11.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 18.699 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 108 fill 5 msec (10.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 17.366 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 123 fill 9 msec (12.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 19.828 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 136 fill 7 msec (13.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 21.923 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 89 fill 17 msec (8.900000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 7.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 143 fill 16 msec (14.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 22.994 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 5 fill 3 msec (0.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 0.806 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 100 fill 4 msec (10.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 16.080 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 95 fill 5 msec (9.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 15.314 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 111 fill 6 msec (11.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 17.849 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 123 fill 9 msec (12.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 19.778 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 2147483646 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 109 fill 10 msec (10.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 17.571 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=0 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 745 fill 51 msec (74.500000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 211.878 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1165 fill 61 msec (116.500000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 881.206 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 505 fill 15 msec (50.500000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    5716 kB
Cost 288.658 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 737 fill 12 msec (73.700000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 557.467 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 842 fill 47 msec (84.200000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 636.889 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 953 fill 26 msec (95.300000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7572 kB
Cost 721.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 991 fill 68 msec (99.100000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 749.592 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 926 fill 65 msec (92.600000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7572 kB
Cost 701.167 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 1151 fill 53 msec (115.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 215.467 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1293 fill 53 msec (129.300000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4308 kB
Cost 557.024 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 38 fill 17 msec (3.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 15.154 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1153 fill 19 msec (115.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 459.355 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 847 fill 27 msec (84.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 337.784 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1255 fill 37 msec (125.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 499.992 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1230 fill 63 msec (123.000000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4260 kB
Cost 523.980 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 975 fill 62 msec (97.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 388.830 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 1368 fill 49 msec (136.800000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2140 kB
Cost 292.752 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1691 fill 62 msec (169.100000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5384 kB
Cost 910.434 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 47 fill 25 msec (4.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 18.744 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 99 fill 21 msec (9.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 39.481 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1064 fill 29 msec (106.400000 one sort cycle)
VmPeak:	    7184 kB
VmHWM:	    5656 kB
Cost 601.798 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1415 fill 34 msec (141.500000 one sort cycle)
VmPeak:	    7288 kB
VmHWM:	    5776 kB
Cost 817.304 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1615 fill 61 msec (161.500000 one sort cycle)
VmPeak:	    7464 kB
VmHWM:	    5904 kB
Cost 953.496 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1273 fill 69 msec (127.300000 one sort cycle)
VmPeak:	    7456 kB
VmHWM:	    5904 kB
Cost 751.579 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 980 fill 55 msec (98.000000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 221.872 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1130 fill 66 msec (113.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 659.468 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 32 fill 20 msec (3.200000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    4068 kB
Cost 13.018 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 893 fill 18 msec (89.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 521.155 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 642 fill 30 msec (64.200000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 374.414 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1053 fill 36 msec (105.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 614.110 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1009 fill 64 msec (100.900000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 588.852 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 760 fill 68 msec (76.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 443.536 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 2115 fill 55 msec (211.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 340.938 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2405 fill 63 msec (240.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 959.114 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 33 fill 22 msec (3.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 13.160 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 583 fill 22 msec (58.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 232.500 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 840 fill 42 msec (84.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 334.656 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1263 fill 33 msec (126.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 503.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1451 fill 66 msec (145.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 578.078 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1225 fill 70 msec (122.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 488.530 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 666 fill 47 msec (66.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 107.359 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 688 fill 65 msec (68.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 274.099 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 269 fill 22 msec (26.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 107.277 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 271 fill 19 msec (27.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 108.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 303 fill 31 msec (30.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 120.836 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 497 fill 37 msec (49.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 198.204 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 569 fill 51 msec (56.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 226.917 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 410 fill 66 msec (41.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 163.508 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 453 fill 50 msec (45.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 84.983 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 550 fill 71 msec (55.000000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4304 kB
Cost 236.720 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 27 fill 20 msec (2.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 10.768 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 373 fill 14 msec (37.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 148.752 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 365 fill 31 msec (36.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 145.416 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 432 fill 51 msec (43.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 172.109 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 514 fill 60 msec (51.400000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4256 kB
Cost 218.758 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 429 fill 68 msec (42.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 170.914 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 524 fill 55 msec (52.400000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2144 kB
Cost 112.346 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 721 fill 57 msec (72.100000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 388.475 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 34 fill 16 msec (3.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 13.559 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 52 fill 20 msec (5.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 20.738 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 508 fill 26 msec (50.800000 one sort cycle)
VmPeak:	    7184 kB
VmHWM:	    5660 kB
Cost 287.528 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 610 fill 40 msec (61.000000 one sort cycle)
VmPeak:	    7288 kB
VmHWM:	    5780 kB
Cost 352.580 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 631 fill 68 msec (63.100000 one sort cycle)
VmPeak:	    7464 kB
VmHWM:	    5904 kB
Cost 372.542 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 570 fill 61 msec (57.000000 one sort cycle)
VmPeak:	    7456 kB
VmHWM:	    5904 kB
Cost 336.528 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 320 fill 51 msec (32.000000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 72.576 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 557 fill 54 msec (55.700000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 324.842 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 35 fill 19 msec (3.500000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    4072 kB
Cost 14.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 423 fill 19 msec (42.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 246.694 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 360 fill 37 msec (36.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 210.096 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 458 fill 34 msec (45.800000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 267.289 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 470 fill 62 msec (47.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 274.104 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 389 fill 63 msec (38.900000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 226.865 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 1135 fill 52 msec (113.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 182.508 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1722 fill 60 msec (172.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 686.734 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 64 fill 21 msec (6.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 25.523 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 261 fill 19 msec (26.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 103.982 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 691 fill 32 msec (69.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 275.571 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 818 fill 35 msec (81.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 325.891 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1018 fill 60 msec (101.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 405.571 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1007 fill 68 msec (100.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 401.189 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson quick_sort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 352 fill 52 msec (35.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 56.602 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 466 fill 56 msec (46.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 185.841 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 248 fill 18 msec (24.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 98.902 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 290 fill 21 msec (29.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 115.536 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 406 fill 32 msec (40.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 161.750 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 387 fill 33 msec (38.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 154.336 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 420 fill 49 msec (42.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 167.328 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 490 fill 62 msec (49.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 195.216 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 316 fill 51 msec (31.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 50.813 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 498 fill 61 msec (49.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 198.602 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 29 fill 21 msec (2.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 11.565 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 317 fill 21 msec (31.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 126.293 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 377 fill 32 msec (37.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 150.348 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 451 fill 29 msec (45.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 179.678 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 456 fill 64 msec (45.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 181.853 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 2147483646 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 417 fill 66 msec (41.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 166.133 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=0 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
system qsort: Total time sort 2544 fill 173 msec (254.400000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    8220 kB
Cost 2091.168 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 4131 fill 192 msec (413.100000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 9894.571 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 1917 fill 76 msec (191.700000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   18152 kB
Cost 3479.738 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 2804 fill 75 msec (280.400000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23956 kB
Cost 6717.262 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3188 fill 122 msec (318.800000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23956 kB
Cost 7637.173 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3315 fill 144 msec (331.500000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 7940.088 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3486 fill 249 msec (348.600000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 8349.667 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3448 fill 268 msec (344.800000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23956 kB
Cost 8260.029 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
yamsort: Total time sort 4050 fill 166 msec (405.000000 one sort cycle)
VmPeak:	    6236 kB
VmHWM:	    4696 kB
Cost 1901.880 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 5056 fill 194 msec (505.600000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12964 kB
Cost 6554.598 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 97 fill 65 msec (9.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 118.030 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4682 fill 84 msec (468.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 5698.930 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3147 fill 119 msec (314.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3829.270 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 5018 fill 147 msec (501.800000 one sort cycle)
VmPeak:	   14056 kB
VmHWM:	   12552 kB
Cost 6298.594 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 5050 fill 193 msec (505.000000 one sort cycle)
VmPeak:	   14328 kB
VmHWM:	   12788 kB
Cost 6457.940 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3505 fill 274 msec (350.500000 one sort cycle)
VmPeak:	   14056 kB
VmHWM:	   12460 kB
Cost 4367.230 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
timsort: Total time sort 5509 fill 168 msec (550.900000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5872 kB
Cost 3234.885 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 6420 fill 183 msec (642.000000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 10741.944 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 150 fill 74 msec (15.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 182.580 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 284 fill 72 msec (28.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 345.685 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 4143 fill 129 msec (414.300000 one sort cycle)
VmPeak:	   19208 kB
VmHWM:	   17484 kB
Cost 7243.621 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5913 fill 138 msec (591.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18004 kB
Cost 10645.765 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5910 fill 246 msec (591.000000 one sort cycle)
VmPeak:	   19500 kB
VmHWM:	   17740 kB
Cost 10484.340 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 4750 fill 257 msec (475.000000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 7947.700 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
mmsort: Total time sort 3449 fill 171 msec (344.900000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6360 kB
Cost 2193.564 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4213 fill 194 msec (421.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 7622.160 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 99 fill 67 msec (9.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   12272 kB
Cost 121.493 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4236 fill 68 msec (423.600000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18088 kB
Cost 7662.077 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2263 fill 124 msec (226.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 4094.220 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4435 fill 139 msec (443.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 8025.576 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4273 fill 246 msec (427.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 7730.712 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2990 fill 250 msec (299.000000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 5410.704 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
symmsort: Total time sort 7897 fill 166 msec (789.700000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 3566.285 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 8960 fill 195 msec (896.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 10906.112 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 104 fill 76 msec (10.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 126.547 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2335 fill 77 msec (233.500000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2842.162 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3358 fill 114 msec (335.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4087.358 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4948 fill 148 msec (494.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 6022.706 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 5700 fill 238 msec (570.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 6935.760 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4752 fill 215 msec (475.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 5782.234 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 2416 fill 172 msec (241.600000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4512 kB
Cost 1090.099 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 2563 fill 200 msec (256.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 3119.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1004 fill 72 msec (100.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1221.667 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1047 fill 75 msec (104.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1274.408 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1146 fill 119 msec (114.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1394.453 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1798 fill 136 msec (179.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2187.806 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 2038 fill 241 msec (203.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2480.654 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
libc _quicksort: Total time sort 1482 fill 259 msec (148.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1803.298 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 1692 fill 165 msec (169.200000 one sort cycle)
VmPeak:	    6236 kB
VmHWM:	    4700 kB
Cost 795.240 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 2229 fill 210 msec (222.900000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12964 kB
Cost 2889.676 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 83 fill 69 msec (8.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 101.028 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1531 fill 66 msec (153.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1863.533 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1378 fill 127 msec (137.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1677.302 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1727 fill 147 msec (172.700000 one sort cycle)
VmPeak:	   14056 kB
VmHWM:	   12552 kB
Cost 2167.730 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1792 fill 260 msec (179.200000 one sort cycle)
VmPeak:	   14328 kB
VmHWM:	   12792 kB
Cost 2292.326 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1545 fill 275 msec (154.500000 one sort cycle)
VmPeak:	   14056 kB
VmHWM:	   12460 kB
Cost 1925.070 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 2151 fill 164 msec (215.100000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5876 kB
Cost 1263.928 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2834 fill 199 msec (283.400000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 4741.849 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 134 fill 89 msec (13.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 163.105 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 149 fill 74 msec (14.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 181.303 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 1904 fill 123 msec (190.400000 one sort cycle)
VmPeak:	   19208 kB
VmHWM:	   17488 kB
Cost 3329.715 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2373 fill 140 msec (237.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18008 kB
Cost 4273.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2368 fill 233 msec (236.800000 one sort cycle)
VmPeak:	   19500 kB
VmHWM:	   17748 kB
Cost 4202.726 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2015 fill 267 msec (201.500000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3372.304 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 1158 fill 177 msec (115.800000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6360 kB
Cost 736.488 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 2055 fill 204 msec (205.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 3718.728 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 63 fill 75 msec (6.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   12276 kB
Cost 77.339 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1699 fill 80 msec (169.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 3073.831 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1370 fill 119 msec (137.000000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2479.152 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1792 fill 136 msec (179.200000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 3243.520 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1869 fill 242 msec (186.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 3382.142 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1475 fill 257 msec (147.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2669.160 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 3771 fill 173 msec (377.100000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4512 kB
Cost 1701.475 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 5816 fill 196 msec (581.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 7076.909 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 159 fill 72 msec (15.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 193.471 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 947 fill 71 msec (94.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1152.310 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2493 fill 111 msec (249.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3033.482 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2948 fill 123 msec (294.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3587.126 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3626 fill 235 msec (362.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4413.567 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3553 fill 253 msec (355.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4324.712 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson quick_sort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 1316 fill 168 msec (131.600000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 594.306 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1681 fill 214 msec (168.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2045.441 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 843 fill 76 msec (84.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1026.100 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 1096 fill 80 msec (109.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1334.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 1500 fill 124 msec (150.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1825.800 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 1429 fill 127 msec (142.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1739.379 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 1583 fill 240 msec (158.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1926.194 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson quick_sort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson quick_sort: Total time sort 1788 fill 265 msec (178.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2176.354 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 2147483646 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 1107 fill 161 msec (110.700000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4512 kB
Cost 499.478 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1559 fill 179 msec (155.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1896.991 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 63 fill 49 msec (6.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 76.658 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 1272 fill 69 msec (127.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1547.770 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 1283 fill 118 msec (128.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1561.668 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 1632 fill 139 msec (163.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1985.818 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 1650 fill 238 msec (165.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2007.720 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 2147483646 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template aamsort: Total time sort 1420 fill 281 msec (142.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1727.856 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000 MAX=10 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 114 fill 15 msec (0.114000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     624 kB
Cost 0.071 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 138 fill 19 msec (0.138000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.087 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 134 fill 2 msec (0.134000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.084 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 131 fill 4 msec (0.131000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 131 fill 6 msec (0.131000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     632 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 143 fill 6 msec (0.143000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.090 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 135 fill 8 msec (0.135000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.086 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 134 fill 8 msec (0.134000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.085 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 183 fill 17 msec (0.183000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.101 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 202 fill 19 msec (0.202000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.112 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 173 fill 3 msec (0.173000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.095 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 204 fill 4 msec (0.204000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.113 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 198 fill 5 msec (0.198000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.109 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 203 fill 5 msec (0.203000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.113 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 195 fill 7 msec (0.195000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.108 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 195 fill 8 msec (0.195000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.108 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 280 fill 22 msec (0.280000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.156 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 310 fill 15 msec (0.310000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 310 fill 4 msec (0.310000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 301 fill 4 msec (0.301000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.167 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 286 fill 5 msec (0.286000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.159 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 293 fill 5 msec (0.293000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.163 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 302 fill 7 msec (0.302000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.167 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 314 fill 9 msec (0.314000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.173 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 152 fill 16 msec (0.152000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.084 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 163 fill 18 msec (0.163000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.090 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 162 fill 4 msec (0.162000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.089 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 179 fill 4 msec (0.179000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.100 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 163 fill 5 msec (0.163000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.091 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 173 fill 5 msec (0.173000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.096 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 182 fill 8 msec (0.182000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.100 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 169 fill 10 msec (0.169000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.093 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 255 fill 14 msec (0.255000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.141 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 227 fill 19 msec (0.227000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.125 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 218 fill 4 msec (0.218000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.120 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 230 fill 4 msec (0.230000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.127 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 221 fill 6 msec (0.221000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 233 fill 6 msec (0.233000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.129 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 252 fill 4 msec (0.252000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 233 fill 7 msec (0.233000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.130 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 95 fill 16 msec (0.095000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.053 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 86 fill 20 msec (0.086000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 89 fill 3 msec (0.089000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.049 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 91 fill 4 msec (0.091000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 94 fill 5 msec (0.094000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 86 fill 6 msec (0.086000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 84 fill 8 msec (0.084000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.046 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 82 fill 8 msec (0.082000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.046 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 53 fill 16 msec (0.053000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 19 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 95 fill 4 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.053 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 3 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 5 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 73 fill 6 msec (0.073000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 67 fill 7 msec (0.067000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 82 fill 8 msec (0.082000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.046 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 78 fill 21 msec (0.078000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 98 fill 14 msec (0.098000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 90 fill 4 msec (0.090000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.050 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 91 fill 4 msec (0.091000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 83 fill 5 msec (0.083000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.046 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 92 fill 6 msec (0.092000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 96 fill 7 msec (0.096000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.053 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 89 fill 8 msec (0.089000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.049 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 35 fill 17 msec (0.035000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.019 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 49 fill 18 msec (0.049000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 42 fill 4 msec (0.042000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.023 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 49 fill 4 msec (0.049000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 59 fill 5 msec (0.059000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 49 fill 4 msec (0.049000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 44 fill 7 msec (0.044000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.024 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 45 fill 8 msec (0.045000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.025 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 113 fill 17 msec (0.113000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 135 fill 20 msec (0.135000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 134 fill 3 msec (0.134000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 140 fill 2 msec (0.140000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.078 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 135 fill 6 msec (0.135000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 140 fill 5 msec (0.140000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.077 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 143 fill 8 msec (0.143000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.079 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 137 fill 9 msec (0.137000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.076 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 197 fill 13 msec (0.197000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.110 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 323 fill 21 msec (0.323000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.180 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 299 fill 3 msec (0.299000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.166 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 275 fill 4 msec (0.275000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.152 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 293 fill 5 msec (0.293000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.162 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 267 fill 6 msec (0.267000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.147 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 301 fill 6 msec (0.301000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.166 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 337 fill 9 msec (0.337000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.187 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 58 fill 15 msec (0.058000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 85 fill 19 msec (0.085000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 92 fill 4 msec (0.092000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 78 fill 4 msec (0.078000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 72 fill 6 msec (0.072000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 81 fill 5 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.045 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 79 fill 6 msec (0.079000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 9 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 84 fill 8 msec (0.084000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.046 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=10 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 590 fill 88 msec (0.590000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     640 kB
Cost 0.378 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 772 fill 100 msec (0.772000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.522 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 723 fill 20 msec (0.723000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.486 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 785 fill 17 msec (0.785000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.528 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 745 fill 27 msec (0.745000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 813 fill 25 msec (0.813000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.546 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 788 fill 39 msec (0.788000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     680 kB
Cost 0.536 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 787 fill 41 msec (0.787000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.532 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 1026 fill 79 msec (1.026000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.566 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1196 fill 94 msec (1.196000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.660 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1096 fill 19 msec (1.096000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.605 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1203 fill 19 msec (1.203000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.664 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1124 fill 31 msec (1.124000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.620 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1219 fill 23 msec (1.219000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.673 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1191 fill 40 msec (1.191000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.657 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1130 fill 41 msec (1.130000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.624 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 1382 fill 85 msec (1.382000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.768 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1533 fill 81 msec (1.533000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.852 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1397 fill 20 msec (1.397000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.777 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1514 fill 16 msec (1.514000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.836 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1337 fill 26 msec (1.337000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.738 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1625 fill 27 msec (1.625000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.897 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1596 fill 39 msec (1.596000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.881 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1463 fill 26 msec (1.463000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.813 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 795 fill 76 msec (0.795000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.439 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 839 fill 94 msec (0.839000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.466 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 771 fill 12 msec (0.771000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.426 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 850 fill 18 msec (0.850000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.473 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 785 fill 19 msec (0.785000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.436 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 871 fill 28 msec (0.871000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.484 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 848 fill 43 msec (0.848000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.468 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 785 fill 43 msec (0.785000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.436 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1208 fill 96 msec (1.208000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.672 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1276 fill 99 msec (1.276000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.704 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1260 fill 16 msec (1.260000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.701 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1350 fill 17 msec (1.350000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.745 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1263 fill 24 msec (1.263000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.702 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1333 fill 24 msec (1.333000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.736 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1343 fill 39 msec (1.343000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.741 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1258 fill 41 msec (1.258000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.699 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 498 fill 53 msec (0.498000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.277 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 428 fill 86 msec (0.428000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.238 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 449 fill 13 msec (0.449000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.250 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 454 fill 17 msec (0.454000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.251 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 540 fill 28 msec (0.540000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 525 fill 26 msec (0.525000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.290 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 513 fill 41 msec (0.513000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.283 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 528 fill 34 msec (0.528000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.291 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 330 fill 81 msec (0.330000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.182 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 451 fill 91 msec (0.451000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.251 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 427 fill 16 msec (0.427000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.236 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 406 fill 18 msec (0.406000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.224 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 400 fill 23 msec (0.400000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.222 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 439 fill 26 msec (0.439000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.244 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 436 fill 36 msec (0.436000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.241 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 432 fill 41 msec (0.432000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.238 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 450 fill 88 msec (0.450000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.248 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 510 fill 97 msec (0.510000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.282 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 463 fill 16 msec (0.463000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.256 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 499 fill 19 msec (0.499000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.277 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 462 fill 26 msec (0.462000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.257 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 513 fill 23 msec (0.513000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.283 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 546 fill 38 msec (0.546000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.301 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 506 fill 39 msec (0.506000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.281 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 170 fill 88 msec (0.170000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.094 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 254 fill 103 msec (0.254000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 253 fill 18 msec (0.253000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.141 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 292 fill 17 msec (0.292000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.161 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 264 fill 22 msec (0.264000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.146 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 281 fill 26 msec (0.281000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.155 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 278 fill 35 msec (0.278000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.153 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 280 fill 33 msec (0.280000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.156 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 692 fill 84 msec (0.692000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.385 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 908 fill 99 msec (0.908000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 812 fill 15 msec (0.812000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.451 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 839 fill 16 msec (0.839000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.466 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 865 fill 36 msec (0.865000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.481 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 888 fill 21 msec (0.888000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.490 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 959 fill 39 msec (0.959000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.529 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 886 fill 41 msec (0.886000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.493 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 4079 fill 96 msec (4.079000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 2.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7266 fill 97 msec (7.266000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 4.011 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7288 fill 18 msec (7.288000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 4.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7156 fill 18 msec (7.156000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 3.950 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 6837 fill 22 msec (6.837000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 3.801 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7271 fill 28 msec (7.271000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 4.014 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7306 fill 42 msec (7.306000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 4.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 7429 fill 40 msec (7.429000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 4.101 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 251 fill 80 msec (0.251000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 383 fill 88 msec (0.383000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.211 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 349 fill 20 msec (0.349000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.193 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 439 fill 18 msec (0.439000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.244 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 426 fill 25 msec (0.426000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.235 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 454 fill 24 msec (0.454000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.251 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 457 fill 37 msec (0.457000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.254 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 9 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 442 fill 42 msec (0.442000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.244 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=10 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 127 fill 19 msec (1.270000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     656 kB
Cost 0.833 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 231 fill 21 msec (2.310000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.691 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 165 fill 4 msec (1.650000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.208 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 176 fill 3 msec (1.760000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.288 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 173 fill 5 msec (1.730000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.266 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 178 fill 5 msec (1.780000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.303 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 173 fill 9 msec (1.730000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.273 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 163 fill 9 msec (1.630000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.200 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 241 fill 16 msec (2.410000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.340 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 275 fill 16 msec (2.750000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.529 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 238 fill 4 msec (2.380000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.314 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 286 fill 4 msec (2.860000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.590 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 245 fill 5 msec (2.450000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.362 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 269 fill 5 msec (2.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.485 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 277 fill 6 msec (2.770000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.540 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 246 fill 9 msec (2.460000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.368 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 291 fill 18 msec (2.910000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.606 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 341 fill 20 msec (3.410000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.882 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 316 fill 4 msec (3.160000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.744 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 334 fill 0 msec (3.340000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.844 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 304 fill 6 msec (3.040000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.678 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 388 fill 5 msec (3.880000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.142 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 341 fill 8 msec (3.410000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.882 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 309 fill 9 msec (3.090000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.706 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 154 fill 18 msec (1.540000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.856 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 192 fill 20 msec (1.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.060 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 164 fill 4 msec (1.640000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.905 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 190 fill 4 msec (1.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.056 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 178 fill 4 msec (1.780000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.983 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 185 fill 4 msec (1.850000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 194 fill 9 msec (1.940000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.079 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 180 fill 8 msec (1.800000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.001 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 241 fill 16 msec (2.410000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.330 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 279 fill 21 msec (2.790000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.540 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 253 fill 4 msec (2.530000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.397 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 269 fill 4 msec (2.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.485 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 292 fill 5 msec (2.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 280 fill 6 msec (2.800000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.557 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 290 fill 8 msec (2.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 265 fill 9 msec (2.650000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.463 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 121 fill 19 msec (1.210000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.668 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 104 fill 18 msec (1.040000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.574 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 119 fill 4 msec (1.190000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 118 fill 4 msec (1.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.656 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 119 fill 5 msec (1.190000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 114 fill 5 msec (1.140000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.629 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 111 fill 7 msec (1.110000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.617 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 159 fill 8 msec (1.590000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.878 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 81 fill 17 msec (0.810000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.447 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 99 fill 20 msec (0.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.546 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 94 fill 3 msec (0.940000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.519 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 95 fill 4 msec (0.950000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.524 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 98 fill 5 msec (0.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.545 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 96 fill 6 msec (0.960000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.530 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 90 fill 8 msec (0.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.497 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 89 fill 8 msec (0.890000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.491 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 100 fill 17 msec (1.000000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.556 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 107 fill 23 msec (1.070000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.595 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 97 fill 4 msec (0.970000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.539 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 118 fill 4 msec (1.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.656 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 108 fill 5 msec (1.080000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.600 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 112 fill 5 msec (1.120000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.618 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 110 fill 8 msec (1.100000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.612 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 105 fill 8 msec (1.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.580 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 47 fill 15 msec (0.470000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.261 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 66 fill 17 msec (0.660000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.364 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 58 fill 4 msec (0.580000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.322 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 58 fill 4 msec (0.580000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.322 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 53 fill 5 msec (0.530000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.293 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 51 fill 6 msec (0.510000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.284 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 70 fill 7 msec (0.700000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.386 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 61 fill 8 msec (0.610000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.337 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 145 fill 15 msec (1.450000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.800 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 201 fill 18 msec (2.010000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.110 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 181 fill 3 msec (1.810000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.999 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 189 fill 4 msec (1.890000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 192 fill 5 msec (1.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.060 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 205 fill 6 msec (2.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 197 fill 9 msec (1.970000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.095 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 198 fill 8 msec (1.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.093 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 1667 fill 18 msec (16.670000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 9.202 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2833 fill 22 msec (28.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 23.117 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2973 fill 5 msec (29.730000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 24.260 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2970 fill 4 msec (29.700000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 24.235 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2933 fill 5 msec (29.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     820 kB
Cost 24.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2957 fill 6 msec (29.570000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     820 kB
Cost 24.247 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2929 fill 9 msec (29.290000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     820 kB
Cost 24.018 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 3001 fill 9 msec (30.010000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     816 kB
Cost 24.488 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 54 fill 14 msec (0.540000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.300 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 98 fill 20 msec (0.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.541 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 87 fill 3 msec (0.870000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.480 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 100 fill 3 msec (1.000000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.556 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 93 fill 5 msec (0.930000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.517 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 92 fill 5 msec (0.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.508 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 96 fill 8 msec (0.960000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.530 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 9 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 92 fill 9 msec (0.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.508 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=10 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 425 fill 48 msec (4.250000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 3.128 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 589 fill 53 msec (5.890000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 7.280 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 539 fill 9 msec (5.390000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 6.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 585 fill 12 msec (5.850000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 7.207 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 550 fill 15 msec (5.500000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 6.798 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 582 fill 15 msec (5.820000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1240 kB
Cost 7.217 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 568 fill 19 msec (5.680000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 6.998 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 556 fill 28 msec (5.560000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 6.850 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 826 fill 54 msec (8.260000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 4.560 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 811 fill 47 msec (8.110000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 6.650 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 728 fill 9 msec (7.280000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.970 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 961 fill 11 msec (9.610000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.842 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 905 fill 13 msec (9.050000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.385 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 941 fill 16 msec (9.410000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.679 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 932 fill 22 msec (9.320000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.605 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 886 fill 18 msec (8.860000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 7.265 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 1104 fill 52 msec (11.040000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 6.138 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1171 fill 70 msec (11.710000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 12.694 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1132 fill 11 msec (11.320000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 12.226 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1205 fill 11 msec (12.050000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 13.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1164 fill 16 msec (11.640000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 12.618 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1214 fill 10 msec (12.140000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 13.111 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1203 fill 24 msec (12.030000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 13.041 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1170 fill 29 msec (11.700000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 12.636 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 615 fill 45 msec (6.150000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 3.419 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 650 fill 65 msec (6.500000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 7.046 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 633 fill 10 msec (6.330000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 6.862 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 695 fill 11 msec (6.950000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 7.534 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 658 fill 14 msec (6.580000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 7.133 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 680 fill 17 msec (6.800000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 7.344 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 687 fill 18 msec (6.870000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 7.447 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 649 fill 22 msec (6.490000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 7.009 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 803 fill 54 msec (8.030000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 4.433 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 907 fill 64 msec (9.070000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.401 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 873 fill 10 msec (8.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.124 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 964 fill 11 msec (9.640000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.866 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 821 fill 14 msec (8.210000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.699 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 797 fill 12 msec (7.970000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 6.535 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 779 fill 18 msec (7.790000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.357 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 760 fill 26 msec (7.600000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.202 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 473 fill 52 msec (4.730000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 2.630 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 401 fill 56 msec (4.010000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 3.288 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 383 fill 11 msec (3.830000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 3.141 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 391 fill 11 msec (3.910000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.191 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 419 fill 15 msec (4.190000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.419 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 384 fill 14 msec (3.840000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.133 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 380 fill 23 msec (3.800000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.101 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 381 fill 28 msec (3.810000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.109 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 254 fill 56 msec (2.540000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.412 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 305 fill 64 msec (3.050000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 316 fill 9 msec (3.160000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.591 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 307 fill 10 msec (3.070000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.505 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 318 fill 15 msec (3.180000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.608 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 309 fill 19 msec (3.090000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.521 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 322 fill 21 msec (3.220000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.628 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 290 fill 25 msec (2.900000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.378 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 334 fill 54 msec (3.340000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.844 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 400 fill 64 msec (4.000000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 4.320 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 390 fill 8 msec (3.900000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.228 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 404 fill 10 msec (4.040000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.379 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 392 fill 15 msec (3.920000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.249 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 407 fill 11 msec (4.070000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.412 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 405 fill 22 msec (4.050000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 4.374 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 399 fill 29 msec (3.990000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.325 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 122 fill 54 msec (1.220000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.673 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 207 fill 59 msec (2.070000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.236 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 204 fill 8 msec (2.040000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.203 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 202 fill 7 msec (2.020000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.182 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 208 fill 13 msec (2.080000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 2.255 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 216 fill 18 msec (2.160000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 2.341 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 210 fill 20 msec (2.100000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.268 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 206 fill 27 msec (2.060000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.225 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 399 fill 51 msec (3.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.202 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 598 fill 65 msec (5.980000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.904 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 573 fill 13 msec (5.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.699 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 586 fill 10 msec (5.860000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.805 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 606 fill 13 msec (6.060000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 4.969 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 633 fill 16 msec (6.330000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.191 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 613 fill 28 msec (6.130000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 610 fill 27 msec (6.100000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 4.978 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 14351 fill 54 msec (143.510000 one sort cycle)
VmPeak:	    2488 kB
VmHWM:	     816 kB
Cost 117.104 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 25778 fill 60 msec (257.780000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 279.434 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26430 fill 10 msec (264.300000 one sort cycle)
VmPeak:	    2712 kB
VmHWM:	    1084 kB
Cost 286.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26089 fill 11 msec (260.890000 one sort cycle)
VmPeak:	    2708 kB
VmHWM:	    1084 kB
Cost 282.805 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26759 fill 15 msec (267.590000 one sort cycle)
VmPeak:	    2708 kB
VmHWM:	    1080 kB
Cost 288.997 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26104 fill 15 msec (261.040000 one sort cycle)
VmPeak:	    2708 kB
VmHWM:	    1080 kB
Cost 281.923 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26644 fill 34 msec (266.440000 one sort cycle)
VmPeak:	    2708 kB
VmHWM:	    1080 kB
Cost 287.755 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 26029 fill 29 msec (260.290000 one sort cycle)
VmPeak:	    2708 kB
VmHWM:	    1080 kB
Cost 281.113 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 163 fill 46 msec (1.630000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.900 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 281 fill 61 msec (2.810000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.293 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 273 fill 11 msec (2.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.239 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 287 fill 11 msec (2.870000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.353 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 276 fill 13 msec (2.760000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 282 fill 16 msec (2.820000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.312 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 315 fill 32 msec (3.150000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.570 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 9 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 261 fill 24 msec (2.610000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.130 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=10 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 159 fill 15 msec (15.900000 one sort cycle)
VmPeak:	    2980 kB
VmHWM:	    1276 kB
Cost 20.288 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 299 fill 23 msec (29.900000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 85.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 290 fill 4 msec (29.000000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 82.708 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 314 fill 5 msec (31.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 89.553 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 290 fill 6 msec (29.000000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 82.592 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 312 fill 8 msec (31.200000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 88.733 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 312 fill 8 msec (31.200000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 88.858 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 303 fill 8 msec (30.300000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 86.294 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 305 fill 18 msec (30.500000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 24.888 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 329 fill 18 msec (32.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 61.589 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 357 fill 4 msec (35.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 66.973 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 352 fill 4 msec (35.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 65.894 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 340 fill 6 msec (34.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 63.648 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 331 fill 6 msec (33.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 62.096 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 348 fill 10 msec (34.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 65.146 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 326 fill 10 msec (32.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 61.027 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 395 fill 19 msec (39.500000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1112 kB
Cost 43.924 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 430 fill 17 msec (43.000000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2136 kB
Cost 91.848 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 399 fill 5 msec (39.900000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 85.386 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 428 fill 5 msec (42.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2136 kB
Cost 91.421 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 397 fill 7 msec (39.700000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 84.958 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 415 fill 7 msec (41.500000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 88.810 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 412 fill 10 msec (41.200000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 88.333 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 414 fill 10 msec (41.400000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 88.762 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 215 fill 20 msec (21.500000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1084 kB
Cost 23.306 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 295 fill 22 msec (29.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 66.788 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 281 fill 8 msec (28.100000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2260 kB
Cost 63.506 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 295 fill 7 msec (29.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 66.788 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 287 fill 6 msec (28.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 65.092 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 297 fill 7 msec (29.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 67.241 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 320 fill 7 msec (32.000000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 72.448 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 279 fill 9 msec (27.900000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 63.166 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 270 fill 17 msec (27.000000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 22.140 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 302 fill 20 msec (30.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 48.562 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 315 fill 5 msec (31.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 50.778 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 324 fill 5 msec (32.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 52.099 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 313 fill 5 msec (31.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 50.330 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 335 fill 6 msec (33.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 53.868 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 329 fill 9 msec (32.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 53.035 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 310 fill 10 msec (31.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 49.848 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 159 fill 16 msec (15.900000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 12.974 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 154 fill 20 msec (15.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 24.825 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 166 fill 7 msec (16.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 26.693 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 184 fill 1 msec (18.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 29.661 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 148 fill 5 msec (14.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 23.798 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 163 fill 4 msec (16.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 26.276 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 156 fill 11 msec (15.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 25.085 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 154 fill 10 msec (15.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 24.763 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 100 fill 18 msec (10.000000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 8.200 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 130 fill 22 msec (13.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 24.336 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 124 fill 5 msec (12.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 23.213 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 126 fill 5 msec (12.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 23.587 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 124 fill 6 msec (12.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 23.262 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 133 fill 7 msec (13.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 24.898 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 111 fill 11 msec (11.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 20.779 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 117 fill 5 msec (11.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 21.902 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 124 fill 12 msec (12.400000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1116 kB
Cost 13.838 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 130 fill 21 msec (13.000000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 27.872 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 136 fill 5 msec (13.600000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 29.104 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 148 fill 4 msec (14.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 31.672 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 149 fill 5 msec (14.900000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 32.005 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 158 fill 6 msec (15.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 33.938 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 151 fill 11 msec (15.100000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 32.435 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 175 fill 10 msec (17.500000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 37.590 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 57 fill 17 msec (5.700000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1080 kB
Cost 6.156 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 144 fill 21 msec (14.400000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 32.659 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 135 fill 4 msec (13.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 30.564 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 135 fill 5 msec (13.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 30.564 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 133 fill 5 msec (13.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 30.218 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 143 fill 6 msec (14.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 32.490 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 137 fill 11 msec (13.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 31.126 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 135 fill 12 msec (13.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 30.618 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 148 fill 14 msec (14.800000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 12.136 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 237 fill 19 msec (23.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 38.204 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 216 fill 4 msec (21.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 34.733 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 224 fill 5 msec (22.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 36.019 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 243 fill 6 msec (24.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 39.172 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 242 fill 7 msec (24.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 39.010 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 223 fill 20 msec (22.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 35.858 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 249 fill 6 msec (24.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 40.039 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 58 fill 16 msec (5.800000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 4.756 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 107 fill 20 msec (10.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 17.206 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 126 fill 4 msec (12.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 20.261 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 110 fill 4 msec (11.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 17.732 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 111 fill 7 msec (11.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 17.893 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 114 fill 7 msec (11.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 18.331 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 113 fill 8 msec (11.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 18.170 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 9 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 123 fill 8 msec (12.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 19.828 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=10 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 564 fill 57 msec (56.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 160.402 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 948 fill 64 msec (94.800000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7300 kB
Cost 692.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 910 fill 19 msec (91.000000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7308 kB
Cost 665.028 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 935 fill 22 msec (93.500000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7308 kB
Cost 683.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 902 fill 27 msec (90.200000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7300 kB
Cost 658.460 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 958 fill 41 msec (95.800000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7308 kB
Cost 700.106 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 945 fill 61 msec (94.500000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7308 kB
Cost 690.606 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 951 fill 71 msec (95.100000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7304 kB
Cost 694.610 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 942 fill 57 msec (94.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 176.719 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1088 fill 67 msec (108.800000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4420 kB
Cost 480.896 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1041 fill 25 msec (104.100000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4396 kB
Cost 457.624 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1135 fill 18 msec (113.500000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4392 kB
Cost 498.492 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1063 fill 36 msec (106.300000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4424 kB
Cost 470.271 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1135 fill 29 msec (113.500000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4424 kB
Cost 502.124 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1080 fill 59 msec (108.000000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4436 kB
Cost 479.088 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1054 fill 68 msec (105.400000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4424 kB
Cost 466.290 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 1091 fill 48 msec (109.100000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2140 kB
Cost 233.474 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1401 fill 62 msec (140.100000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 754.859 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1353 fill 20 msec (135.300000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 728.996 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1369 fill 21 msec (136.900000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 737.617 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1412 fill 36 msec (141.200000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 761.350 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1508 fill 51 msec (150.800000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 813.114 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1456 fill 59 msec (145.600000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 785.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1382 fill 81 msec (138.200000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 745.174 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 693 fill 79 msec (69.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 156.895 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 884 fill 61 msec (88.400000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 515.549 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 851 fill 22 msec (85.100000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 496.644 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 910 fill 18 msec (91.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 530.712 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 858 fill 29 msec (85.800000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 500.729 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 907 fill 34 msec (90.700000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 528.962 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 926 fill 75 msec (92.600000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 540.414 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 851 fill 69 msec (85.100000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 496.644 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 818 fill 61 msec (81.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 131.534 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1006 fill 65 msec (100.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 400.790 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1030 fill 25 msec (103.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 410.764 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1167 fill 22 msec (116.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 464.933 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1013 fill 30 msec (101.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 403.579 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1147 fill 31 msec (114.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 456.965 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 958 fill 60 msec (95.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 382.050 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 874 fill 57 msec (87.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 348.551 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 548 fill 57 msec (54.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 88.338 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 522 fill 67 msec (52.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 208.174 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 488 fill 20 msec (48.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 194.419 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 522 fill 21 msec (52.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 207.965 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 492 fill 34 msec (49.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 196.013 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 510 fill 38 msec (51.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 203.388 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 511 fill 62 msec (51.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 203.582 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 520 fill 69 msec (52.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 207.168 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 323 fill 66 msec (32.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 60.595 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 586 fill 75 msec (58.600000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4420 kB
Cost 259.012 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 453 fill 20 msec (45.300000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4392 kB
Cost 198.958 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 446 fill 21 msec (44.600000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4396 kB
Cost 196.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 439 fill 31 msec (43.900000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4424 kB
Cost 194.214 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 448 fill 39 msec (44.800000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4424 kB
Cost 198.195 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 453 fill 61 msec (45.300000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4432 kB
Cost 200.770 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 458 fill 64 msec (45.800000 one sort cycle)
VmPeak:	    5980 kB
VmHWM:	    4428 kB
Cost 202.802 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 413 fill 52 msec (41.300000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2144 kB
Cost 88.547 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 586 fill 73 msec (58.600000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 315.971 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 554 fill 20 msec (55.400000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 298.495 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 566 fill 13 msec (56.600000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 304.961 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 586 fill 33 msec (58.600000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5396 kB
Cost 316.206 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 602 fill 33 msec (60.200000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 324.598 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 586 fill 63 msec (58.600000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5396 kB
Cost 316.206 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 559 fill 67 msec (55.900000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5396 kB
Cost 301.636 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 209 fill 55 msec (20.900000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 47.318 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 406 fill 65 msec (40.600000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 236.942 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 387 fill 19 msec (38.700000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 225.853 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 410 fill 21 msec (41.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 239.112 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 422 fill 29 msec (42.200000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 246.279 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 404 fill 36 msec (40.400000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 235.613 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 396 fill 94 msec (39.600000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 231.106 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 395 fill 75 msec (39.500000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 230.364 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 487 fill 56 msec (48.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 78.310 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 815 fill 60 msec (81.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 325.022 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 748 fill 18 msec (74.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 298.003 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 757 fill 19 msec (75.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 301.589 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 801 fill 31 msec (80.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 319.439 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 787 fill 29 msec (78.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 313.856 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 818 fill 63 msec (81.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 326.218 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 798 fill 70 msec (79.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 318.242 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 187 fill 57 msec (18.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 30.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 412 fill 64 msec (41.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 164.306 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 397 fill 21 msec (39.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 158.165 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 413 fill 21 msec (41.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 164.539 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 405 fill 32 msec (40.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 161.352 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 420 fill 37 msec (42.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 167.496 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 422 fill 66 msec (42.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 168.125 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 9 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 398 fill 69 msec (39.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 158.563 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=10 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
system qsort: Total time sort 2059 fill 206 msec (205.900000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    8220 kB
Cost 1692.498 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3739 fill 237 msec (373.900000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23424 kB
Cost 8758.234 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3402 fill 69 msec (340.200000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23428 kB
Cost 7970.206 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3735 fill 81 msec (373.500000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23428 kB
Cost 8750.358 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3399 fill 129 msec (339.900000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23432 kB
Cost 7964.537 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3471 fill 129 msec (347.100000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23424 kB
Cost 8130.470 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3414 fill 243 msec (341.400000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23424 kB
Cost 7996.954 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3439 fill 247 msec (343.900000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23428 kB
Cost 8056.889 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
yamsort: Total time sort 3662 fill 188 msec (366.200000 one sort cycle)
VmPeak:	    6368 kB
VmHWM:	    4872 kB
Cost 1784.126 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4264 fill 223 msec (426.400000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 5640.419 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4237 fill 68 msec (423.700000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 5603.009 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4324 fill 75 msec (432.400000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 5719.787 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4045 fill 121 msec (404.500000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 5350.726 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4318 fill 137 msec (431.800000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 5710.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4329 fill 248 msec (432.900000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13444 kB
Cost 5819.908 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4153 fill 275 msec (415.300000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 5491.927 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
timsort: Total time sort 4570 fill 181 msec (457.000000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5872 kB
Cost 2683.504 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5297 fill 232 msec (529.700000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 8862.940 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5272 fill 68 msec (527.200000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 8821.110 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5316 fill 79 msec (531.600000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 8894.731 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5606 fill 116 msec (560.600000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 9379.959 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5376 fill 142 msec (537.600000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 8997.274 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5260 fill 255 msec (526.000000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 8803.136 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5354 fill 274 msec (535.400000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 8960.454 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
mmsort: Total time sort 2862 fill 179 msec (286.200000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6360 kB
Cost 1820.232 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3700 fill 235 msec (370.000000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18088 kB
Cost 6692.560 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3531 fill 79 msec (353.100000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18088 kB
Cost 6386.873 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3895 fill 77 msec (389.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18088 kB
Cost 7045.276 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3555 fill 137 msec (355.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 6433.128 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3766 fill 163 msec (376.600000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 6814.954 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3536 fill 277 msec (353.600000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 6397.331 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3403 fill 291 msec (340.300000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 6156.708 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
symmsort: Total time sort 2941 fill 224 msec (294.100000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4512 kB
Cost 1326.979 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3938 fill 227 msec (393.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4791.758 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3796 fill 71 msec (379.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4620.491 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3904 fill 73 msec (390.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4751.949 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3628 fill 121 msec (362.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4416.002 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3763 fill 150 msec (376.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4578.818 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3878 fill 240 msec (387.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4718.750 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 3796 fill 274 msec (379.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4618.973 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 2084 fill 173 msec (208.400000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 941.134 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1929 fill 213 msec (192.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2347.207 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1949 fill 73 msec (194.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2371.543 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1806 fill 64 msec (180.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2197.541 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1815 fill 128 msec (181.500000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2209.218 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1875 fill 138 msec (187.500000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2282.250 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1890 fill 250 msec (189.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2300.508 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1858 fill 273 msec (185.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2261.558 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 1146 fill 190 msec (114.600000 one sort cycle)
VmPeak:	    6368 kB
VmHWM:	    4880 kB
Cost 559.248 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1703 fill 218 msec (170.300000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 2252.728 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1661 fill 79 msec (166.100000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 2197.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1713 fill 79 msec (171.300000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13228 kB
Cost 2265.956 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1670 fill 143 msec (167.000000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 2208.408 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1691 fill 142 msec (169.100000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 2236.178 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1724 fill 235 msec (172.400000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13440 kB
Cost 2317.056 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1728 fill 259 msec (172.800000 one sort cycle)
VmPeak:	   15004 kB
VmHWM:	   13224 kB
Cost 2285.107 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 1534 fill 155 msec (153.400000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5872 kB
Cost 900.765 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2237 fill 209 msec (223.700000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 3742.948 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2084 fill 79 msec (208.400000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3487.782 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2131 fill 77 msec (213.100000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3566.442 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2147 fill 128 msec (214.700000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3593.219 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2167 fill 138 msec (216.700000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16740 kB
Cost 3627.558 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2238 fill 246 msec (223.800000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16740 kB
Cost 3746.412 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2143 fill 276 msec (214.300000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3586.525 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 690 fill 211 msec (69.000000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6364 kB
Cost 439.116 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1561 fill 220 msec (156.100000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2824.786 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1552 fill 76 msec (155.200000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 2807.878 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1578 fill 92 msec (157.800000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 2854.918 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1559 fill 121 msec (155.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 2821.790 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1539 fill 134 msec (153.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2784.974 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1607 fill 242 msec (160.700000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2908.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1568 fill 297 msec (156.800000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 2838.080 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 1572 fill 241 msec (157.200000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 709.915 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2956 fill 216 msec (295.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 3598.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2682 fill 79 msec (268.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3263.458 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2696 fill 89 msec (269.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 3281.571 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2889 fill 115 msec (288.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3515.335 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2931 fill 136 msec (293.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3566.441 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2947 fill 250 msec (294.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 3587.088 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 2814 fill 260 msec (281.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 3424.075 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 9 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 608 fill 227 msec (60.800000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 274.573 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1580 fill 236 msec (158.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1922.544 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1522 fill 72 msec (152.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1851.970 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1568 fill 73 msec (156.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1907.942 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1466 fill 126 msec (146.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1783.829 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1769 fill 148 msec (176.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2152.519 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1608 fill 252 msec (160.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1956.614 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 9 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1614 fill 295 msec (161.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1963.915 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000 MAX=100 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 135 fill 21 msec (0.135000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     628 kB
Cost 0.085 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 157 fill 15 msec (0.157000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.100 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 117 fill 4 msec (0.117000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.073 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 138 fill 6 msec (0.138000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.087 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 132 fill 8 msec (0.132000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 181 fill 7 msec (0.181000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     632 kB
Cost 0.114 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 140 fill 9 msec (0.140000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     636 kB
Cost 0.089 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 133 fill 8 msec (0.133000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     628 kB
Cost 0.084 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 213 fill 17 msec (0.213000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.118 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 222 fill 18 msec (0.222000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 138 fill 4 msec (0.138000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.076 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 336 fill 4 msec (0.336000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.185 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 156 fill 5 msec (0.156000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.086 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 258 fill 5 msec (0.258000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.143 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 272 fill 8 msec (0.272000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.151 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 187 fill 6 msec (0.187000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.104 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 323 fill 13 msec (0.323000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.178 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 404 fill 19 msec (0.404000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.223 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 71 fill 4 msec (0.071000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.039 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 117 fill 1 msec (0.117000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.065 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 235 fill 3 msec (0.235000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.131 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 371 fill 5 msec (0.371000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.205 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 378 fill 7 msec (0.378000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.209 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 264 fill 8 msec (0.264000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.146 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 160 fill 16 msec (0.160000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.088 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 180 fill 17 msec (0.180000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.099 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 92 fill 4 msec (0.092000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.051 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 223 fill 3 msec (0.223000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.123 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 97 fill 6 msec (0.097000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 285 fill 3 msec (0.285000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.157 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 230 fill 5 msec (0.230000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.128 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 115 fill 8 msec (0.115000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.064 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 255 fill 19 msec (0.255000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.141 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 306 fill 9 msec (0.306000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.169 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 134 fill 2 msec (0.134000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.075 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 202 fill 3 msec (0.202000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.112 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 149 fill 4 msec (0.149000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 232 fill 4 msec (0.232000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.128 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 247 fill 7 msec (0.247000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.137 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 184 fill 6 msec (0.184000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.102 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 89 fill 12 msec (0.089000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.049 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 71 fill 21 msec (0.071000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.039 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 77 fill 3 msec (0.077000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 57 fill 2 msec (0.057000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 81 fill 2 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.045 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 80 fill 2 msec (0.080000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 81 fill 3 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.045 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 95 fill 5 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.052 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 49 fill 15 msec (0.049000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     556 kB
Cost 0.027 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 60 fill 13 msec (0.060000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.033 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 38 fill 4 msec (0.038000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.021 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 54 fill 3 msec (0.054000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.030 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 45 fill 5 msec (0.045000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.025 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 66 fill 5 msec (0.066000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 71 fill 7 msec (0.071000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.039 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 61 fill 8 msec (0.061000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.034 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 100 fill 17 msec (0.100000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.055 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 113 fill 13 msec (0.113000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 57 fill 3 msec (0.057000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.031 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 41 fill 4 msec (0.041000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.023 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 78 fill 3 msec (0.078000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.043 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 93 fill 6 msec (0.093000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 95 fill 8 msec (0.095000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 91 fill 7 msec (0.091000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.051 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 42 fill 13 msec (0.042000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.023 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 69 fill 15 msec (0.069000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.038 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 37 fill 4 msec (0.037000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.021 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 61 fill 3 msec (0.061000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.034 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 47 fill 1 msec (0.047000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.026 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 68 fill 5 msec (0.068000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.038 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 65 fill 8 msec (0.065000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 50 fill 7 msec (0.050000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.028 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 134 fill 16 msec (0.134000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.074 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 167 fill 13 msec (0.167000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.092 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 97 fill 3 msec (0.097000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 128 fill 4 msec (0.128000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.071 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 112 fill 8 msec (0.112000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.062 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 139 fill 4 msec (0.139000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.077 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 151 fill 4 msec (0.151000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.083 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 150 fill 6 msec (0.150000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.083 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 46 fill 14 msec (0.046000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.025 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 55 fill 25 msec (0.055000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.031 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 299 fill 3 msec (0.299000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.165 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 73 fill 3 msec (0.073000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.041 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 108 fill 6 msec (0.108000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.060 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 68 fill 6 msec (0.068000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.038 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 64 fill 8 msec (0.064000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 81 fill 6 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.045 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (1000 elements (4000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 54 fill 16 msec (0.054000 one sort cycle)
VmPeak:	    2200 kB
VmHWM:	     552 kB
Cost 0.030 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 86 fill 20 msec (0.086000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.047 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 65 fill 4 msec (0.065000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.036 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 72 fill 3 msec (0.072000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value ascending  30 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 73 fill 5 msec (0.073000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.041 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value descending  40 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 81 fill 6 msec (0.081000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.045 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value descending  100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 82 fill 8 msec (0.082000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     556 kB
Cost 0.046 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (1000 elements (12000 bytes) 99 max-value ascending  110 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 75 fill 8 msec (0.075000 one sort cycle)
VmPeak:	    2208 kB
VmHWM:	     552 kB
Cost 0.041 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000 MAX=100 REP=1000
+++++ s0 +++++
Sort (32-bit) int[] 1000 loops algorithm system qsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 671 fill 85 msec (0.671000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     636 kB
Cost 0.427 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 851 fill 93 msec (0.851000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.572 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 607 fill 16 msec (0.607000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     680 kB
Cost 0.413 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 736 fill 18 msec (0.736000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.495 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 701 fill 24 msec (0.701000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     676 kB
Cost 0.474 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 750 fill 27 msec (0.750000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     680 kB
Cost 0.510 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 775 fill 33 msec (0.775000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.521 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm system qsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 763 fill 39 msec (0.763000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     672 kB
Cost 0.513 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 1000 loops algorithm yamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 1151 fill 97 msec (1.151000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.635 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1274 fill 86 msec (1.274000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.708 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 778 fill 19 msec (0.778000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.429 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1377 fill 18 msec (1.377000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.766 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 905 fill 21 msec (0.905000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.503 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1391 fill 27 msec (1.391000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.768 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1406 fill 37 msec (1.406000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.776 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm yamsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1039 fill 34 msec (1.039000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.574 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 1000 loops algorithm timsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 1524 fill 54 msec (1.524000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.841 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1442 fill 83 msec (1.442000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.802 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 584 fill 17 msec (0.584000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.325 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 594 fill 19 msec (0.594000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.328 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1155 fill 22 msec (1.155000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.638 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1433 fill 23 msec (1.433000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.791 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1640 fill 36 msec (1.640000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.905 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm timsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1306 fill 35 msec (1.306000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.726 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 1000 loops algorithm mmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 854 fill 78 msec (0.854000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.471 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 884 fill 78 msec (0.884000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.488 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 465 fill 17 msec (0.465000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.259 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1034 fill 14 msec (1.034000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.575 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 547 fill 19 msec (0.547000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.302 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1047 fill 27 msec (1.047000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.582 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1033 fill 33 msec (1.033000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.570 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm mmsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 702 fill 40 msec (0.702000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.390 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 1000 loops algorithm symmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1819 fill 78 msec (1.819000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 1.004 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 2071 fill 87 msec (2.071000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 1.151 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1341 fill 18 msec (1.341000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.746 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1815 fill 19 msec (1.815000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 1.002 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1418 fill 19 msec (1.418000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.783 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1520 fill 23 msec (1.520000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.845 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1798 fill 34 msec (1.798000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.992 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm symmsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1582 fill 31 msec (1.582000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.873 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 1000 loops algorithm libc _quicksort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 568 fill 79 msec (0.568000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.316 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 536 fill 75 msec (0.536000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 499 fill 16 msec (0.499000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.275 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 533 fill 16 msec (0.533000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.294 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 529 fill 23 msec (0.529000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.292 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 544 fill 29 msec (0.544000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.300 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 538 fill 31 msec (0.538000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.297 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm libc _quicksort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 515 fill 35 msec (0.515000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.284 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 1000 loops algorithm template yamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 416 fill 69 msec (0.416000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.231 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 524 fill 76 msec (0.524000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.291 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 284 fill 16 msec (0.284000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.157 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 457 fill 12 msec (0.457000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 383 fill 20 msec (0.383000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.211 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 454 fill 20 msec (0.454000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 463 fill 37 msec (0.463000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.256 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template yamsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 430 fill 37 msec (0.430000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.237 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson tim_sort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 528 fill 77 msec (0.528000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.291 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 578 fill 89 msec (0.578000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.319 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 211 fill 15 msec (0.211000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.117 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 232 fill 14 msec (0.232000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.128 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 388 fill 14 msec (0.388000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.214 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 489 fill 25 msec (0.489000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.270 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 577 fill 38 msec (0.577000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.319 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson tim_sort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 431 fill 37 msec (0.431000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.238 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 1000 loops algorithm template mmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 221 fill 79 msec (0.221000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.122 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 344 fill 92 msec (0.344000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.190 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 192 fill 16 msec (0.192000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.107 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 328 fill 15 msec (0.328000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.182 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 217 fill 22 msec (0.217000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.121 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 325 fill 23 msec (0.325000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.179 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 333 fill 39 msec (0.333000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.185 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template mmsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 258 fill 38 msec (0.258000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.142 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 1000 loops algorithm template symmsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 954 fill 73 msec (0.954000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     552 kB
Cost 0.527 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1218 fill 85 msec (1.218000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.672 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 789 fill 14 msec (0.789000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.436 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 752 fill 12 msec (0.752000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.415 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 763 fill 20 msec (0.763000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.421 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 851 fill 27 msec (0.851000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.473 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1134 fill 31 msec (1.134000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.631 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template symmsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1156 fill 32 msec (1.156000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.643 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 1000 loops algorithm template Swenson quick_sort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 626 fill 71 msec (0.626000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.348 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 931 fill 81 msec (0.931000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.514 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2014 fill 19 msec (2.014000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 1.120 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 871 fill 15 msec (0.871000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.481 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 1077 fill 23 msec (1.077000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.595 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 908 fill 23 msec (0.908000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.501 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 901 fill 36 msec (0.901000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.497 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template Swenson quick_sort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 984 fill 39 msec (0.984000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.547 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 1000 loops algorithm template aamsort (5000 elements (20000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 292 fill 84 msec (0.292000 one sort cycle)
VmPeak:	    2216 kB
VmHWM:	     556 kB
Cost 0.162 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 486 fill 91 msec (0.486000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.270 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 362 fill 18 msec (0.362000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.201 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 445 fill 16 msec (0.445000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.247 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value ascending  150 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 369 fill 24 msec (0.369000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.204 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value descending  200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 495 fill 24 msec (0.495000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.273 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value descending  500 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 451 fill 37 msec (0.451000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     556 kB
Cost 0.251 GB*sec (VmHwM)
Sort (32-bit) struct data[] 1000 loops algorithm template aamsort (5000 elements (60000 bytes) 99 max-value ascending  550 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 418 fill 41 msec (0.418000 one sort cycle)
VmPeak:	    2256 kB
VmHWM:	     552 kB
Cost 0.231 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000 MAX=100 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 129 fill 17 msec (1.290000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     660 kB
Cost 0.851 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 195 fill 18 msec (1.950000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.435 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 141 fill 2 msec (1.410000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     732 kB
Cost 1.032 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 154 fill 4 msec (1.540000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.133 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 146 fill 2 msec (1.460000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     740 kB
Cost 1.080 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 156 fill 6 msec (1.560000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.148 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 175 fill 8 msec (1.750000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.288 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 179 fill 3 msec (1.790000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     736 kB
Cost 1.317 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 281 fill 15 msec (2.810000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.562 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 245 fill 21 msec (2.450000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.352 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 174 fill 4 msec (1.740000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.967 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 304 fill 1 msec (3.040000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.678 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 179 fill 5 msec (1.790000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.995 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 305 fill 4 msec (3.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 284 fill 5 msec (2.840000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.568 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 220 fill 4 msec (2.200000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.214 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 325 fill 17 msec (3.250000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.794 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 348 fill 18 msec (3.480000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.921 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 138 fill 2 msec (1.380000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.767 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 138 fill 3 msec (1.380000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.767 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 222 fill 5 msec (2.220000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.225 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 307 fill 6 msec (3.070000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.707 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 345 fill 6 msec (3.450000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.918 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 276 fill 8 msec (2.760000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.535 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 180 fill 17 msec (1.800000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 1.001 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 182 fill 18 msec (1.820000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.005 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 118 fill 4 msec (1.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.656 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 253 fill 4 msec (2.530000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.397 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 127 fill 4 msec (1.270000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.701 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 192 fill 5 msec (1.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.068 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 191 fill 8 msec (1.910000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 130 fill 6 msec (1.300000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.723 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 303 fill 14 msec (3.030000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.673 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 342 fill 19 msec (3.420000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.902 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 259 fill 4 msec (2.590000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.430 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 402 fill 4 msec (4.020000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.219 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 305 fill 4 msec (3.050000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 414 fill 5 msec (4.140000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.285 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 408 fill 7 msec (4.080000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.252 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 344 fill 7 msec (3.440000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.899 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 119 fill 12 msec (1.190000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 123 fill 18 msec (1.230000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.684 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 107 fill 3 msec (1.070000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.595 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 124 fill 4 msec (1.240000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.689 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 118 fill 5 msec (1.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.651 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 115 fill 2 msec (1.150000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.635 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 128 fill 7 msec (1.280000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.712 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 122 fill 6 msec (1.220000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.673 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 88 fill 11 msec (0.880000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.486 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 103 fill 19 msec (1.030000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.569 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 81 fill 3 msec (0.810000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.447 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 99 fill 4 msec (0.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.546 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 88 fill 4 msec (0.880000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.486 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 99 fill 4 msec (0.990000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.550 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 100 fill 8 msec (1.000000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.556 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 98 fill 7 msec (0.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.541 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 120 fill 17 msec (1.200000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.662 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 118 fill 18 msec (1.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.656 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 57 fill 4 msec (0.570000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.317 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 57 fill 3 msec (0.570000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.315 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 83 fill 5 msec (0.830000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     820 kB
Cost 0.681 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 100 fill 5 msec (1.000000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.556 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 113 fill 5 msec (1.130000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.624 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 107 fill 9 msec (1.070000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.595 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 54 fill 17 msec (0.540000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     556 kB
Cost 0.300 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 75 fill 10 msec (0.750000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.417 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 40 fill 3 msec (0.400000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.222 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 65 fill 4 msec (0.650000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.361 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 45 fill 5 msec (0.450000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.250 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 76 fill 5 msec (0.760000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.423 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 78 fill 5 msec (0.780000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.431 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 58 fill 9 msec (0.580000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.322 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 180 fill 19 msec (1.800000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.994 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 267 fill 18 msec (2.670000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.485 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 218 fill 3 msec (2.180000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.212 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 198 fill 1 msec (1.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.093 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 210 fill 4 msec (2.100000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.159 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 242 fill 2 msec (2.420000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.346 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 262 fill 7 msec (2.620000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.446 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 253 fill 8 msec (2.530000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.407 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 206 fill 13 msec (2.060000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 1.137 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 329 fill 15 msec (3.290000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.816 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 567 fill 3 msec (5.670000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 3.153 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 329 fill 4 msec (3.290000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.829 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 333 fill 5 msec (3.330000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.838 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 341 fill 3 msec (3.410000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.896 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 343 fill 8 msec (3.430000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.893 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 325 fill 7 msec (3.250000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.807 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (10000 elements (40000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 54 fill 16 msec (0.540000 one sort cycle)
VmPeak:	    2236 kB
VmHWM:	     552 kB
Cost 0.298 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 98 fill 20 msec (0.980000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.545 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 68 fill 3 msec (0.680000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.378 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 92 fill 4 msec (0.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.508 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value ascending  300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 80 fill 5 msec (0.800000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.445 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value descending  400 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 90 fill 6 msec (0.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.500 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value descending  1000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 89 fill 7 msec (0.890000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.491 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (10000 elements (120000 bytes) 99 max-value ascending  1100 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 91 fill 7 msec (0.910000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 0.502 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=30000 MAX=100 REP=100
+++++ s0 +++++
Sort (32-bit) int[] 100 loops algorithm system qsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 438 fill 69 msec (4.380000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     740 kB
Cost 3.241 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 588 fill 52 msec (5.880000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 7.268 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 447 fill 11 msec (4.470000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 5.507 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 498 fill 11 msec (4.980000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 6.135 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 495 fill 15 msec (4.950000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 6.118 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 519 fill 17 msec (5.190000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 6.415 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 560 fill 25 msec (5.600000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1232 kB
Cost 6.899 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm system qsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 552 fill 26 msec (5.520000 one sort cycle)
VmPeak:	    2900 kB
VmHWM:	    1236 kB
Cost 6.823 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 100 loops algorithm yamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 869 fill 49 msec (8.690000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 4.797 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 925 fill 62 msec (9.250000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 7.548 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 620 fill 10 msec (6.200000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 5.084 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1082 fill 8 msec (10.820000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 8.872 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 692 fill 12 msec (6.920000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 5.647 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1074 fill 17 msec (10.740000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 8.764 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 987 fill 15 msec (9.870000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 8.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm yamsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 673 fill 23 msec (6.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 5.492 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 100 loops algorithm timsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 937 fill 32 msec (9.370000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 5.210 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1041 fill 42 msec (10.410000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 11.284 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 341 fill 9 msec (3.410000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	    1084 kB
Cost 3.696 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 495 fill 6 msec (4.950000 one sort cycle)
VmPeak:	    2768 kB
VmHWM:	    1080 kB
Cost 5.346 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 881 fill 8 msec (8.810000 one sort cycle)
VmPeak:	    2776 kB
VmHWM:	    1084 kB
Cost 9.550 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1167 fill 12 msec (11.670000 one sort cycle)
VmPeak:	    2804 kB
VmHWM:	    1084 kB
Cost 12.650 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1268 fill 16 msec (12.680000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 13.694 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm timsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1036 fill 18 msec (10.360000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 11.189 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 100 loops algorithm mmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 647 fill 51 msec (6.470000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 3.597 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 691 fill 57 msec (6.910000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 7.463 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 374 fill 11 msec (3.740000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 4.054 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 861 fill 10 msec (8.610000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 9.333 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 437 fill 14 msec (4.370000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 4.737 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 813 fill 16 msec (8.130000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 8.813 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 830 fill 12 msec (8.300000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 8.964 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm mmsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 523 fill 34 msec (5.230000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 5.669 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 100 loops algorithm symmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1191 fill 53 msec (11.910000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 6.622 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1287 fill 52 msec (12.870000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 10.553 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 913 fill 10 msec (9.130000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 7.487 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1341 fill 10 msec (13.410000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 10.943 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1015 fill 15 msec (10.150000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 8.323 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1421 fill 15 msec (14.210000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 11.595 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1375 fill 23 msec (13.750000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 11.220 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm symmsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1072 fill 26 msec (10.720000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 8.790 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 100 loops algorithm libc _quicksort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 423 fill 42 msec (4.230000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 2.352 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 394 fill 50 msec (3.940000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.215 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 361 fill 10 msec (3.610000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.946 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 373 fill 11 msec (3.730000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.044 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 367 fill 14 msec (3.670000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.995 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 397 fill 9 msec (3.970000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 3.240 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 331 fill 16 msec (3.310000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.701 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm libc _quicksort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 306 fill 17 msec (3.060000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.497 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 100 loops algorithm template yamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 239 fill 49 msec (2.390000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 1.319 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 263 fill 41 msec (2.630000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.157 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 181 fill 8 msec (1.810000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.477 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 272 fill 11 msec (2.720000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.230 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 266 fill 15 msec (2.660000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.171 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 325 fill 15 msec (3.250000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.652 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 361 fill 27 msec (3.610000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.960 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template yamsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 287 fill 22 msec (2.870000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.353 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson tim_sort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 390 fill 45 msec (3.900000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 2.153 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 478 fill 55 msec (4.780000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 5.162 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 172 fill 5 msec (1.720000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	    1080 kB
Cost 1.858 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 249 fill 10 msec (2.490000 one sort cycle)
VmPeak:	    2768 kB
VmHWM:	    1080 kB
Cost 2.689 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 331 fill 18 msec (3.310000 one sort cycle)
VmPeak:	    2776 kB
VmHWM:	    1084 kB
Cost 3.588 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 393 fill 14 msec (3.930000 one sort cycle)
VmPeak:	    2804 kB
VmHWM:	    1084 kB
Cost 4.260 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 456 fill 29 msec (4.560000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1084 kB
Cost 4.943 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson tim_sort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 387 fill 24 msec (3.870000 one sort cycle)
VmPeak:	    2744 kB
VmHWM:	    1080 kB
Cost 4.180 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 100 loops algorithm template mmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 145 fill 46 msec (1.450000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 0.806 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 226 fill 52 msec (2.260000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.441 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 161 fill 9 msec (1.610000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 1.739 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 261 fill 10 msec (2.610000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 2.829 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 174 fill 16 msec (1.740000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1084 kB
Cost 1.886 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 275 fill 7 msec (2.750000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.970 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 263 fill 19 msec (2.630000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.840 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template mmsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 196 fill 26 msec (1.960000 one sort cycle)
VmPeak:	    2724 kB
VmHWM:	    1080 kB
Cost 2.117 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 100 loops algorithm template symmsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 572 fill 48 msec (5.720000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 3.157 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 843 fill 57 msec (8.430000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.879 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 633 fill 10 msec (6.330000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 5.165 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 679 fill 10 msec (6.790000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 5.541 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 672 fill 15 msec (6.720000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 5.484 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 784 fill 15 msec (7.840000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.397 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 812 fill 22 msec (8.120000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 6.626 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template symmsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 777 fill 26 msec (7.770000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 6.371 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] 100 loops algorithm template Swenson quick_sort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson quick_sort: Total time sort 1563 fill 54 msec (15.630000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     552 kB
Cost 8.628 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2652 fill 59 msec (26.520000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 21.640 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 3258 fill 10 msec (32.580000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 26.585 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2367 fill 8 msec (23.670000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 19.409 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2476 fill 10 msec (24.760000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 20.303 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2608 fill 17 msec (26.080000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 21.281 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2617 fill 23 msec (26.170000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 21.355 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template Swenson quick_sort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template Swenson quick_sort: Total time sort 2631 fill 24 msec (26.310000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 21.469 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] 100 loops algorithm template aamsort (30000 elements (120000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 192 fill 50 msec (1.920000 one sort cycle)
VmPeak:	    2316 kB
VmHWM:	     556 kB
Cost 1.068 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 348 fill 42 msec (3.480000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.854 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 237 fill 5 msec (2.370000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 1.934 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 254 fill 16 msec (2.540000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.073 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value ascending  900 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 252 fill 15 msec (2.520000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.056 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value descending  1200 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 315 fill 12 msec (3.150000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.570 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value descending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 294 fill 17 msec (2.940000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     820 kB
Cost 2.411 GB*sec (VmHwM)
Sort (32-bit) struct data[] 100 loops algorithm template aamsort (30000 elements (360000 bytes) 99 max-value ascending  3300 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 287 fill 24 msec (2.870000 one sort cycle)
VmPeak:	    2552 kB
VmHWM:	     816 kB
Cost 2.342 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=100000 MAX=100 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 164 fill 12 msec (16.400000 one sort cycle)
VmPeak:	    2980 kB
VmHWM:	    1276 kB
Cost 20.926 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 327 fill 21 msec (32.700000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 93.130 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 272 fill 5 msec (27.200000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 77.357 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 284 fill 3 msec (28.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 80.997 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 281 fill 5 msec (28.100000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 80.029 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 302 fill 6 msec (30.200000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 86.010 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 304 fill 10 msec (30.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2844 kB
Cost 86.458 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 303 fill 10 msec (30.300000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2852 kB
Cost 86.416 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 292 fill 18 msec (29.200000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 23.827 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 335 fill 20 msec (33.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 62.712 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 230 fill 4 msec (23.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 37.076 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 386 fill 4 msec (38.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 72.259 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 269 fill 6 msec (26.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 50.464 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 377 fill 7 msec (37.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 70.725 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 369 fill 9 msec (36.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 69.077 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 279 fill 10 msec (27.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 52.229 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 370 fill 18 msec (37.000000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1112 kB
Cost 41.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 453 fill 15 msec (45.300000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2140 kB
Cost 96.942 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 180 fill 4 msec (18.000000 one sort cycle)
VmPeak:	    3820 kB
VmHWM:	    2144 kB
Cost 38.592 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 261 fill 5 msec (26.100000 one sort cycle)
VmPeak:	    3944 kB
VmHWM:	    2404 kB
Cost 62.744 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 371 fill 4 msec (37.100000 one sort cycle)
VmPeak:	    4152 kB
VmHWM:	    2612 kB
Cost 96.905 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 457 fill 7 msec (45.700000 one sort cycle)
VmPeak:	    4188 kB
VmHWM:	    2588 kB
Cost 118.272 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 428 fill 13 msec (42.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 91.763 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 388 fill 10 msec (38.800000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 83.187 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 220 fill 18 msec (22.000000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1080 kB
Cost 23.760 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 338 fill 17 msec (33.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2260 kB
Cost 76.388 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 218 fill 4 msec (21.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 49.355 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 366 fill 3 msec (36.600000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 82.862 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 258 fill 6 msec (25.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 58.514 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 349 fill 6 msec (34.900000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 79.153 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 354 fill 10 msec (35.400000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 80.287 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 264 fill 3 msec (26.400000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 59.875 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 322 fill 12 msec (32.200000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 26.275 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 366 fill 14 msec (36.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 58.853 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 248 fill 2 msec (24.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 39.978 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 370 fill 4 msec (37.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 59.496 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 351 fill 4 msec (35.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 56.581 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 488 fill 6 msec (48.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 78.666 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 468 fill 11 msec (46.800000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 75.254 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 402 fill 9 msec (40.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 64.642 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 151 fill 17 msec (15.100000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 12.382 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 141 fill 19 msec (14.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 22.673 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 141 fill 3 msec (14.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 22.729 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 159 fill 2 msec (15.900000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 25.567 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 153 fill 4 msec (15.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 24.602 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 155 fill 3 msec (15.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 24.986 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 140 fill 12 msec (14.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 22.512 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 150 fill 10 msec (15.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 24.180 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 98 fill 21 msec (9.800000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 7.997 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 135 fill 21 msec (13.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 25.272 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 97 fill 5 msec (9.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 18.158 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 131 fill 3 msec (13.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 21.117 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 120 fill 6 msec (12.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 22.512 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 124 fill 6 msec (12.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1876 kB
Cost 23.262 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 130 fill 11 msec (13.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 24.336 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 103 fill 11 msec (10.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 19.282 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 141 fill 18 msec (14.100000 one sort cycle)
VmPeak:	    2808 kB
VmHWM:	    1120 kB
Cost 15.792 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 177 fill 19 msec (17.700000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2144 kB
Cost 37.949 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 98 fill 4 msec (9.800000 one sort cycle)
VmPeak:	    3820 kB
VmHWM:	    2140 kB
Cost 20.972 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 145 fill 4 msec (14.500000 one sort cycle)
VmPeak:	    3944 kB
VmHWM:	    2400 kB
Cost 34.800 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 183 fill 5 msec (18.300000 one sort cycle)
VmPeak:	    4152 kB
VmHWM:	    2616 kB
Cost 47.873 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 200 fill 6 msec (20.000000 one sort cycle)
VmPeak:	    4188 kB
VmHWM:	    2592 kB
Cost 51.840 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 177 fill 10 msec (17.700000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 38.020 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 133 fill 9 msec (13.300000 one sort cycle)
VmPeak:	    3812 kB
VmHWM:	    2148 kB
Cost 28.568 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 69 fill 12 msec (6.900000 one sort cycle)
VmPeak:	    2784 kB
VmHWM:	    1084 kB
Cost 7.480 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 150 fill 17 msec (15.000000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 33.960 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 126 fill 3 msec (12.600000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 28.577 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 157 fill 5 msec (15.700000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 35.545 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 132 fill 0 msec (13.200000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 29.938 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 178 fill 3 msec (17.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2268 kB
Cost 40.370 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 158 fill 10 msec (15.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 35.898 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 145 fill 7 msec (14.500000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2272 kB
Cost 32.944 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 219 fill 13 msec (21.900000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     820 kB
Cost 17.958 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 312 fill 19 msec (31.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 50.294 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 274 fill 3 msec (27.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 44.169 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 262 fill 4 msec (26.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 42.234 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 267 fill 6 msec (26.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 42.934 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 306 fill 5 msec (30.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 49.205 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 317 fill 10 msec (31.700000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 50.974 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 316 fill 12 msec (31.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 50.813 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (100000 elements (400000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 76 fill 11 msec (7.600000 one sort cycle)
VmPeak:	    2592 kB
VmHWM:	     816 kB
Cost 6.202 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 115 fill 20 msec (11.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 18.538 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 94 fill 4 msec (9.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 15.153 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 110 fill 4 msec (11.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 17.732 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value ascending  3000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 92 fill 4 msec (9.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 14.830 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value descending  4000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 112 fill 6 msec (11.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 18.010 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value descending  10000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 111 fill 10 msec (11.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 17.849 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (100000 elements (1200000 bytes) 99 max-value ascending  11000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 105 fill 9 msec (10.500000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 16.926 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=300000 MAX=100 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 614 fill 55 msec (61.400000 one sort cycle)
VmPeak:	    4540 kB
VmHWM:	    2848 kB
Cost 174.867 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 961 fill 71 msec (96.100000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7568 kB
Cost 727.285 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 826 fill 24 msec (82.600000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7568 kB
Cost 625.117 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 922 fill 15 msec (92.200000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7572 kB
Cost 698.138 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 894 fill 28 msec (89.400000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7572 kB
Cost 676.937 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 901 fill 35 msec (90.100000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7568 kB
Cost 681.877 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 929 fill 56 msec (92.900000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 702.696 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 928 fill 55 msec (92.800000 one sort cycle)
VmPeak:	    9228 kB
VmHWM:	    7564 kB
Cost 701.939 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 913 fill 56 msec (91.300000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 170.914 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1099 fill 67 msec (109.900000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4316 kB
Cost 474.328 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 831 fill 14 msec (83.100000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4288 kB
Cost 356.333 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 1016 fill 16 msec (101.600000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4288 kB
Cost 435.661 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 709 fill 20 msec (70.900000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4304 kB
Cost 305.154 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 928 fill 26 msec (92.800000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4300 kB
Cost 399.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 909 fill 62 msec (90.900000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4304 kB
Cost 391.234 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 961 fill 66 msec (96.100000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4312 kB
Cost 414.383 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 1155 fill 41 msec (115.500000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2140 kB
Cost 247.170 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1478 fill 60 msec (147.800000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5388 kB
Cost 796.346 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 781 fill 19 msec (78.100000 one sort cycle)
VmPeak:	    7428 kB
VmHWM:	    5920 kB
Cost 462.352 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 773 fill 17 msec (77.300000 one sort cycle)
VmPeak:	    6912 kB
VmHWM:	    5312 kB
Cost 410.618 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1163 fill 29 msec (116.300000 one sort cycle)
VmPeak:	    7348 kB
VmHWM:	    5844 kB
Cost 679.657 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1349 fill 39 msec (134.900000 one sort cycle)
VmPeak:	    7356 kB
VmHWM:	    5752 kB
Cost 775.945 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1459 fill 82 msec (145.900000 one sort cycle)
VmPeak:	    7468 kB
VmHWM:	    5892 kB
Cost 859.643 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 1276 fill 68 msec (127.600000 one sort cycle)
VmPeak:	    7440 kB
VmHWM:	    5856 kB
Cost 747.226 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 778 fill 50 msec (77.800000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 176.139 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 930 fill 63 msec (93.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 542.748 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 690 fill 21 msec (69.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 402.408 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1001 fill 16 msec (100.100000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 583.783 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 713 fill 28 msec (71.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 415.822 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 991 fill 21 msec (99.100000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 577.951 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 1011 fill 63 msec (101.100000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 590.020 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 824 fill 56 msec (82.400000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 480.886 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 1210 fill 55 msec (121.000000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 195.052 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1446 fill 66 msec (144.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 576.665 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1173 fill 21 msec (117.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 467.323 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1304 fill 13 msec (130.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 520.035 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 947 fill 29 msec (94.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 377.285 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1502 fill 28 msec (150.200000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 598.397 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1479 fill 49 msec (147.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 589.825 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 1333 fill 53 msec (133.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 531.600 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 501 fill 49 msec (50.100000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1608 kB
Cost 80.561 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 504 fill 55 msec (50.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 200.794 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 456 fill 18 msec (45.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 181.670 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 479 fill 20 msec (47.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 191.025 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 500 fill 27 msec (50.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 199.400 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 486 fill 34 msec (48.600000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 193.622 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 450 fill 95 msec (45.000000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 179.280 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 477 fill 67 msec (47.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 190.037 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 334 fill 55 msec (33.400000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1872 kB
Cost 62.525 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 475 fill 44 msec (47.500000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4312 kB
Cost 204.820 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 355 fill 17 msec (35.500000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4284 kB
Cost 152.082 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 427 fill 18 msec (42.700000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4284 kB
Cost 182.927 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 392 fill 27 msec (39.200000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4304 kB
Cost 168.717 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 435 fill 36 msec (43.500000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4300 kB
Cost 187.050 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 464 fill 57 msec (46.400000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4300 kB
Cost 199.520 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 391 fill 92 msec (39.100000 one sort cycle)
VmPeak:	    5848 kB
VmHWM:	    4312 kB
Cost 168.599 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 443 fill 44 msec (44.300000 one sort cycle)
VmPeak:	    3816 kB
VmHWM:	    2140 kB
Cost 94.802 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 629 fill 69 msec (62.900000 one sort cycle)
VmPeak:	    7048 kB
VmHWM:	    5392 kB
Cost 339.157 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 454 fill 21 msec (45.400000 one sort cycle)
VmPeak:	    7428 kB
VmHWM:	    5920 kB
Cost 268.768 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 405 fill 18 msec (40.500000 one sort cycle)
VmPeak:	    6912 kB
VmHWM:	    5312 kB
Cost 215.136 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 570 fill 25 msec (57.000000 one sort cycle)
VmPeak:	    7348 kB
VmHWM:	    5844 kB
Cost 333.108 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 600 fill 30 msec (60.000000 one sort cycle)
VmPeak:	    7356 kB
VmHWM:	    5756 kB
Cost 345.360 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 595 fill 57 msec (59.500000 one sort cycle)
VmPeak:	    7468 kB
VmHWM:	    5892 kB
Cost 350.574 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 573 fill 66 msec (57.300000 one sort cycle)
VmPeak:	    7440 kB
VmHWM:	    5860 kB
Cost 335.778 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 233 fill 49 msec (23.300000 one sort cycle)
VmPeak:	    3824 kB
VmHWM:	    2264 kB
Cost 52.751 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 447 fill 58 msec (44.700000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 260.690 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 394 fill 16 msec (39.400000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 229.781 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 443 fill 21 msec (44.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 258.358 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 393 fill 31 msec (39.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 229.355 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 492 fill 25 msec (49.200000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 287.131 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 460 fill 54 msec (46.000000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5836 kB
Cost 268.456 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 413 fill 53 msec (41.300000 one sort cycle)
VmPeak:	    7340 kB
VmHWM:	    5832 kB
Cost 240.862 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 686 fill 38 msec (68.600000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 110.583 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 928 fill 51 msec (92.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 369.715 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 708 fill 21 msec (70.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 282.067 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 938 fill 18 msec (93.800000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 374.074 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1001 fill 29 msec (100.100000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 399.199 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1009 fill 25 msec (100.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 402.389 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1104 fill 48 msec (110.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 439.834 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 1044 fill 58 msec (104.400000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 415.930 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (300000 elements (1200000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 222 fill 53 msec (22.200000 one sort cycle)
VmPeak:	    3372 kB
VmHWM:	    1612 kB
Cost 35.786 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 423 fill 61 msec (42.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 168.523 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 335 fill 15 msec (33.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 133.464 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 409 fill 20 msec (40.900000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 162.946 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value ascending  9000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 407 fill 17 msec (40.700000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 162.312 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value descending  12000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 425 fill 32 msec (42.500000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 169.490 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value descending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 413 fill 68 msec (41.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3988 kB
Cost 164.704 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (300000 elements (3600000 bytes) 99 max-value ascending  33000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 383 fill 65 msec (38.300000 one sort cycle)
VmPeak:	    5716 kB
VmHWM:	    3984 kB
Cost 152.587 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=1000000 MAX=100 REP=10
+++++ s0 +++++
Sort (32-bit) int[] 10 loops algorithm system qsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
system qsort: Total time sort 2103 fill 158 msec (210.300000 one sort cycle)
VmPeak:	   10012 kB
VmHWM:	    8224 kB
Cost 1729.507 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3571 fill 198 msec (357.100000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23956 kB
Cost 8554.688 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3152 fill 67 msec (315.200000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 7549.670 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3248 fill 66 msec (324.800000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 7779.610 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3006 fill 84 msec (300.600000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 7199.971 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3230 fill 135 msec (323.000000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 7736.496 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3475 fill 192 msec (347.500000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23952 kB
Cost 8323.320 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm system qsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
system qsort: Total time sort 3135 fill 229 msec (313.500000 one sort cycle)
VmPeak:	   25636 kB
VmHWM:	   23956 kB
Cost 7510.206 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] 10 loops algorithm yamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
yamsort: Total time sort 3500 fill 165 msec (350.000000 one sort cycle)
VmPeak:	    6236 kB
VmHWM:	    4704 kB
Cost 1646.400 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4069 fill 181 msec (406.900000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12960 kB
Cost 5273.424 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3164 fill 64 msec (316.400000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12912 kB
Cost 4085.357 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4291 fill 68 msec (429.100000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12912 kB
Cost 5540.539 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3367 fill 110 msec (336.700000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12924 kB
Cost 4351.511 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4615 fill 122 msec (461.500000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12916 kB
Cost 5960.734 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 4549 fill 200 msec (454.900000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12932 kB
Cost 5882.767 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm yamsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
yamsort: Total time sort 3559 fill 263 msec (355.900000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12956 kB
Cost 4611.040 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] 10 loops algorithm timsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
timsort: Total time sort 4678 fill 187 msec (467.800000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5868 kB
Cost 2745.050 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 4528 fill 148 msec (452.800000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 7576.250 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2417 fill 63 msec (241.700000 one sort cycle)
VmPeak:	   18436 kB
VmHWM:	   16868 kB
Cost 4076.996 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 2906 fill 64 msec (290.600000 one sort cycle)
VmPeak:	   18716 kB
VmHWM:	   17164 kB
Cost 4987.858 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 4368 fill 126 msec (436.800000 one sort cycle)
VmPeak:	   19696 kB
VmHWM:	   18188 kB
Cost 7944.518 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5390 fill 122 msec (539.000000 one sort cycle)
VmPeak:	   19772 kB
VmHWM:	   18140 kB
Cost 9777.460 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 5323 fill 235 msec (532.300000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 8908.573 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm timsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
timsort: Total time sort 4634 fill 171 msec (463.400000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 7755.462 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] 10 loops algorithm mmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
mmsort: Total time sort 2540 fill 162 msec (254.000000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6364 kB
Cost 1616.456 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3564 fill 183 msec (356.400000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 6447.989 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2445 fill 70 msec (244.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 4423.494 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 4145 fill 65 msec (414.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18092 kB
Cost 7499.134 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2669 fill 110 msec (266.900000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 4829.822 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3978 fill 124 msec (397.800000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 7198.589 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 3831 fill 228 msec (383.100000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 6932.578 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm mmsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
mmsort: Total time sort 2595 fill 175 msec (259.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 4695.912 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] 10 loops algorithm symmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
symmsort: Total time sort 4116 fill 162 msec (411.600000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 1858.786 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 5171 fill 187 msec (517.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 6294.141 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4029 fill 62 msec (402.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4902.487 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 5147 fill 63 msec (514.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 6262.870 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4352 fill 115 msec (435.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 5297.254 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4497 fill 133 msec (449.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 5473.748 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 5429 fill 209 msec (542.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 6608.179 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm symmsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
symmsort: Total time sort 4649 fill 290 msec (464.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 5658.763 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] 10 loops algorithm libc _quicksort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
libc _quicksort: Total time sort 1830 fill 173 msec (183.000000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4512 kB
Cost 825.696 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1778 fill 202 msec (177.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2164.182 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1746 fill 60 msec (174.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 2125.231 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1912 fill 69 msec (191.200000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2326.522 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1776 fill 115 msec (177.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2161.037 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1669 fill 110 msec (166.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 2030.839 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1417 fill 203 msec (141.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1724.772 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm libc _quicksort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
libc _quicksort: Total time sort 1411 fill 194 msec (141.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1716.905 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] 10 loops algorithm template yamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template yamsort: Total time sort 1218 fill 166 msec (121.800000 one sort cycle)
VmPeak:	    6236 kB
VmHWM:	    4712 kB
Cost 573.922 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1720 fill 194 msec (172.000000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12964 kB
Cost 2229.808 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1421 fill 57 msec (142.100000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12916 kB
Cost 1835.364 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1581 fill 71 msec (158.100000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12916 kB
Cost 2042.020 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1449 fill 124 msec (144.900000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12920 kB
Cost 1872.108 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1704 fill 129 msec (170.400000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12920 kB
Cost 2201.568 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1688 fill 239 msec (168.800000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12928 kB
Cost 2182.246 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template yamsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template yamsort: Total time sort 1530 fill 246 msec (153.000000 one sort cycle)
VmPeak:	   14460 kB
VmHWM:	   12956 kB
Cost 1982.268 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] 10 loops algorithm template Swenson tim_sort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template Swenson tim_sort: Total time sort 1724 fill 165 msec (172.400000 one sort cycle)
VmPeak:	    7596 kB
VmHWM:	    5876 kB
Cost 1013.022 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2303 fill 199 msec (230.300000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16732 kB
Cost 3853.380 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 1467 fill 83 msec (146.700000 one sort cycle)
VmPeak:	   18436 kB
VmHWM:	   16868 kB
Cost 2474.536 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 1514 fill 112 msec (151.400000 one sort cycle)
VmPeak:	   18716 kB
VmHWM:	   17168 kB
Cost 2599.235 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 1982 fill 85 msec (198.200000 one sort cycle)
VmPeak:	   19696 kB
VmHWM:	   18196 kB
Cost 3606.447 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2077 fill 132 msec (207.700000 one sort cycle)
VmPeak:	   19772 kB
VmHWM:	   18144 kB
Cost 3768.509 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2208 fill 234 msec (220.800000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16740 kB
Cost 3696.192 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template Swenson tim_sort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template Swenson tim_sort: Total time sort 2046 fill 246 msec (204.600000 one sort cycle)
VmPeak:	   18384 kB
VmHWM:	   16736 kB
Cost 3424.186 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] 10 loops algorithm template mmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template mmsort: Total time sort 791 fill 164 msec (79.100000 one sort cycle)
VmPeak:	    7928 kB
VmHWM:	    6360 kB
Cost 503.076 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1646 fill 212 msec (164.600000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2978.602 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1410 fill 69 msec (141.000000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2551.536 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1631 fill 109 msec (163.100000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 2951.458 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1465 fill 139 msec (146.500000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 2651.650 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1746 fill 119 msec (174.600000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18096 kB
Cost 3159.562 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1727 fill 218 msec (172.700000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 3125.870 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template mmsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template mmsort: Total time sort 1560 fill 248 msec (156.000000 one sort cycle)
VmPeak:	   19644 kB
VmHWM:	   18100 kB
Cost 2823.600 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] 10 loops algorithm template symmsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template symmsort: Total time sort 2177 fill 167 msec (217.700000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 983.133 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3548 fill 216 msec (354.800000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4318.626 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3301 fill 66 msec (330.100000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4016.657 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3477 fill 71 msec (347.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4230.814 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3580 fill 99 msec (358.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4356.144 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3736 fill 134 msec (373.600000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 4547.459 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3794 fill 215 msec (379.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4616.539 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template symmsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is stable
get array fill time
template symmsort: Total time sort 3714 fill 261 msec (371.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 4519.195 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=100
+++++ s11 +++++
Sort (32-bit) int[] 10 loops algorithm template aamsort (1000000 elements (4000000 bytes) 99 max-value)
verify: OK
get array fill time
template aamsort: Total time sort 629 fill 141 msec (62.900000 one sort cycle)
VmPeak:	    6108 kB
VmHWM:	    4516 kB
Cost 284.056 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value random)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1257 fill 164 msec (125.700000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1530.020 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value ascending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1289 fill 61 msec (128.900000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1568.971 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value descending)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1485 fill 60 msec (148.500000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1806.948 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value ascending  30000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1374 fill 108 msec (137.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1672.433 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value descending  40000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1493 fill 113 msec (149.300000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12168 kB
Cost 1816.682 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value descending  100000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1530 fill 215 msec (153.000000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1862.316 GB*sec (VmHwM)
Sort (32-bit) struct data[] 10 loops algorithm template aamsort (1000000 elements (12000000 bytes) 99 max-value ascending  110000 keys randomly interchanged)
verify: OK
sort is unstable
get array fill time
template aamsort: Total time sort 1474 fill 222 msec (147.400000 one sort cycle)
VmPeak:	   13920 kB
VmHWM:	   12172 kB
Cost 1794.153 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000000 MAX=0
+++++ s0 +++++
Sort (32-bit) int[] algorithm system qsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of system qsort 1380 msec
VmPeak:	   41260 kB
VmHWM:	   39680 kB
Cost 54758.400 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm system qsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of system qsort 2257 msec
VmPeak:	  119388 kB
VmHWM:	  117552 kB
Cost 265314.864 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] algorithm yamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of yamsort 2284 msec
VmPeak:	   22660 kB
VmHWM:	   21152 kB
Cost 48311.168 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm yamsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of yamsort 2737 msec
VmPeak:	   63900 kB
VmHWM:	   62064 kB
Cost 169869.168 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] algorithm timsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of timsort 2655 msec
VmPeak:	   29220 kB
VmHWM:	   27684 kB
Cost 73501.020 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm timsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of timsort 2898 msec
VmPeak:	   83260 kB
VmHWM:	   81600 kB
Cost 236476.800 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] algorithm mmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of mmsort 1424 msec
VmPeak:	   31364 kB
VmHWM:	   29856 kB
Cost 42514.944 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm mmsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of mmsort 2192 msec
VmPeak:	   89960 kB
VmHWM:	   88200 kB
Cost 193334.400 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] algorithm symmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of symmsort 4409 msec
VmPeak:	   21732 kB
VmHWM:	   20088 kB
Cost 88567.992 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm symmsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of symmsort 5475 msec
VmPeak:	   60796 kB
VmHWM:	   59160 kB
Cost 323901.000 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] algorithm libc _quicksort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of libc _quicksort 1260 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 25315.920 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm libc _quicksort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 1350 msec
VmPeak:	   60796 kB
VmHWM:	   59164 kB
Cost 79871.400 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] algorithm template yamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template yamsort 971 msec
VmPeak:	   22660 kB
VmHWM:	   21156 kB
Cost 20542.476 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template yamsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template yamsort 1294 msec
VmPeak:	   63900 kB
VmHWM:	   62064 kB
Cost 80310.816 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] algorithm template Swenson tim_sort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson tim_sort 1110 msec
VmPeak:	   29220 kB
VmHWM:	   27688 kB
Cost 30733.680 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson tim_sort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 1511 msec
VmPeak:	   83260 kB
VmHWM:	   81604 kB
Cost 123303.644 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] algorithm template mmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template mmsort 630 msec
VmPeak:	   31364 kB
VmHWM:	   29860 kB
Cost 18811.800 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template mmsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template mmsort 1137 msec
VmPeak:	   89960 kB
VmHWM:	   88200 kB
Cost 100283.400 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] algorithm template symmsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template symmsort 2275 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 45709.300 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template symmsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template symmsort 4018 msec
VmPeak:	   60796 kB
VmHWM:	   59164 kB
Cost 237720.952 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] algorithm template Swenson quick_sort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson quick_sort 758 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 15229.736 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson quick_sort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template Swenson quick_sort 995 msec
VmPeak:	   60796 kB
VmHWM:	   59164 kB
Cost 58868.180 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] algorithm template aamsort (5000000 elements (20000000 bytes) 2147483646 max-value)
verify: OK
time of template aamsort 675 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 13562.100 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template aamsort (5000000 elements (60000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template aamsort 1307 msec
VmPeak:	   60796 kB
VmHWM:	   59160 kB
Cost 77322.120 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000000 MAX=0
+++++ s0 +++++
Sort (32-bit) int[] algorithm system qsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of system qsort 2952 msec
VmPeak:	   80324 kB
VmHWM:	   78488 kB
Cost 231696.576 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm system qsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of system qsort 4758 msec
VmPeak:	  236572 kB
VmHWM:	  234752 kB
Cost 1116950.016 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] algorithm yamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of yamsort 4899 msec
VmPeak:	   43308 kB
VmHWM:	   41696 kB
Cost 204268.704 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm yamsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of yamsort 5085 msec
VmPeak:	  125484 kB
VmHWM:	  123840 kB
Cost 629726.400 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] algorithm timsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of timsort 5305 msec
VmPeak:	   56240 kB
VmHWM:	   54660 kB
Cost 289971.300 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm timsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of timsort 6281 msec
VmPeak:	  164316 kB
VmHWM:	  162772 kB
Cost 1022370.932 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] algorithm mmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of mmsort 3501 msec
VmPeak:	   60660 kB
VmHWM:	   58896 kB
Cost 206194.896 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm mmsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of mmsort 4576 msec
VmPeak:	  177848 kB
VmHWM:	  176112 kB
Cost 805888.512 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] algorithm symmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of symmsort 8536 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 338230.464 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm symmsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of symmsort 11543 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 1359396.024 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] algorithm libc _quicksort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of libc _quicksort 2604 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 103180.896 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm libc _quicksort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 2714 msec
VmPeak:	  119388 kB
VmHWM:	  117508 kB
Cost 318916.712 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] algorithm template yamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template yamsort 1978 msec
VmPeak:	   43308 kB
VmHWM:	   41696 kB
Cost 82474.688 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template yamsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template yamsort 2367 msec
VmPeak:	  125484 kB
VmHWM:	  123840 kB
Cost 293129.280 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] algorithm template Swenson tim_sort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson tim_sort 1948 msec
VmPeak:	   56240 kB
VmHWM:	   54656 kB
Cost 106469.888 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson tim_sort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 3110 msec
VmPeak:	  164316 kB
VmHWM:	  162780 kB
Cost 506245.800 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] algorithm template mmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template mmsort 1323 msec
VmPeak:	   60660 kB
VmHWM:	   59164 kB
Cost 78273.972 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template mmsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template mmsort 2307 msec
VmPeak:	  177848 kB
VmHWM:	  176112 kB
Cost 406290.384 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] algorithm template symmsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template symmsort 5242 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 207709.008 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template symmsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is stable
time of template symmsort 8721 msec
VmPeak:	  119388 kB
VmHWM:	  117772 kB
Cost 1027089.612 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Sort (32-bit) int[] algorithm template Swenson quick_sort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template Swenson quick_sort 1518 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 60149.232 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson quick_sort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template Swenson quick_sort 1664 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 195965.952 GB*sec (VmHwM)
-------------------------
+++++ s11 +++++
Sort (32-bit) int[] algorithm template aamsort (10000000 elements (40000000 bytes) 2147483646 max-value)
verify: OK
time of template aamsort 1131 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 44814.744 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template aamsort (10000000 elements (120000000 bytes) 2147483646 max-value random)
verify: OK
sort is unstable
time of template aamsort 2694 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 317266.992 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=5000000 MAX=10
+++++ s0 +++++
Sort (32-bit) int[] algorithm system qsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of system qsort 1096 msec
VmPeak:	   41260 kB
VmHWM:	   38632 kB
Cost 42340.672 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm system qsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of system qsort 1851 msec
VmPeak:	  119388 kB
VmHWM:	  114652 kB
Cost 212220.852 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] algorithm yamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of yamsort 1790 msec
VmPeak:	   23584 kB
VmHWM:	   21936 kB
Cost 39265.440 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm yamsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of yamsort 2167 msec
VmPeak:	   66480 kB
VmHWM:	   64704 kB
Cost 140213.568 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] algorithm timsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of timsort 2109 msec
VmPeak:	   29220 kB
VmHWM:	   27688 kB
Cost 58393.992 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm timsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of timsort 2579 msec
VmPeak:	   83260 kB
VmHWM:	   81600 kB
Cost 210446.400 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] algorithm mmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of mmsort 1189 msec
VmPeak:	   31364 kB
VmHWM:	   29860 kB
Cost 35503.540 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm mmsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of mmsort 1652 msec
VmPeak:	   89960 kB
VmHWM:	   88200 kB
Cost 145706.400 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] algorithm symmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of symmsort 1390 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 27927.880 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm symmsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of symmsort 1927 msec
VmPeak:	   60796 kB
VmHWM:	   59164 kB
Cost 114009.028 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] algorithm libc _quicksort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of libc _quicksort 848 msec
VmPeak:	   21732 kB
VmHWM:	   20088 kB
Cost 17034.624 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm libc _quicksort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 754 msec
VmPeak:	   60796 kB
VmHWM:	   59160 kB
Cost 44606.640 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] algorithm template yamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template yamsort 567 msec
VmPeak:	   23584 kB
VmHWM:	   21936 kB
Cost 12437.712 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template yamsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template yamsort 832 msec
VmPeak:	   66480 kB
VmHWM:	   64708 kB
Cost 53837.056 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] algorithm template Swenson tim_sort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template Swenson tim_sort 697 msec
VmPeak:	   29220 kB
VmHWM:	   27692 kB
Cost 19301.324 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson tim_sort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 1142 msec
VmPeak:	   83260 kB
VmHWM:	   81604 kB
Cost 93191.768 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] algorithm template mmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template mmsort 384 msec
VmPeak:	   31364 kB
VmHWM:	   29856 kB
Cost 11464.704 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template mmsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template mmsort 868 msec
VmPeak:	   89960 kB
VmHWM:	   88200 kB
Cost 76557.600 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] algorithm template symmsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template symmsort 900 msec
VmPeak:	   21732 kB
VmHWM:	   20092 kB
Cost 18082.800 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template symmsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template symmsort 1670 msec
VmPeak:	   60796 kB
VmHWM:	   59160 kB
Cost 98797.200 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (32-bit) int[] algorithm template aamsort (5000000 elements (20000000 bytes) 9 max-value)
verify: OK
time of template aamsort 414 msec
VmPeak:	   21732 kB
VmHWM:	   20088 kB
Cost 8316.432 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template aamsort (5000000 elements (60000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of template aamsort 1038 msec
VmPeak:	   60796 kB
VmHWM:	   59164 kB
Cost 61412.232 GB*sec (VmHwM)
-------------------------
============TEST measure algorithms N=10000000 MAX=10
+++++ s0 +++++
Sort (32-bit) int[] algorithm system qsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of system qsort 2136 msec
VmPeak:	   80324 kB
VmHWM:	   76640 kB
Cost 163703.040 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm system qsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of system qsort 3877 msec
VmPeak:	  236572 kB
VmHWM:	  228948 kB
Cost 887631.396 GB*sec (VmHwM)
-------------------------
+++++ s1 +++++
Sort (32-bit) int[] algorithm yamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of yamsort 3803 msec
VmPeak:	   45080 kB
VmHWM:	   43508 kB
Cost 165460.924 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm yamsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of yamsort 4547 msec
VmPeak:	  130988 kB
VmHWM:	  129120 kB
Cost 587108.640 GB*sec (VmHwM)
-------------------------
+++++ s2 +++++
Sort (32-bit) int[] algorithm timsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of timsort 3750 msec
VmPeak:	   56240 kB
VmHWM:	   54656 kB
Cost 204960.000 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm timsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of timsort 5127 msec
VmPeak:	  164316 kB
VmHWM:	  162776 kB
Cost 834552.552 GB*sec (VmHwM)
-------------------------
+++++ s3 +++++
Sort (32-bit) int[] algorithm mmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of mmsort 2747 msec
VmPeak:	   60660 kB
VmHWM:	   58896 kB
Cost 161787.312 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm mmsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of mmsort 3553 msec
VmPeak:	  177848 kB
VmHWM:	  176116 kB
Cost 625740.148 GB*sec (VmHwM)
-------------------------
+++++ s4 +++++
Sort (32-bit) int[] algorithm symmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of symmsort 2773 msec
VmPeak:	   41264 kB
VmHWM:	   39624 kB
Cost 109877.352 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm symmsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of symmsort 4097 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 482495.496 GB*sec (VmHwM)
-------------------------
+++++ s5 +++++
Sort (32-bit) int[] algorithm libc _quicksort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of libc _quicksort 2167 msec
VmPeak:	   41264 kB
VmHWM:	   39628 kB
Cost 85873.876 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm libc _quicksort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of libc _quicksort 2042 msec
VmPeak:	  119388 kB
VmHWM:	  117508 kB
Cost 239951.336 GB*sec (VmHwM)
-------------------------
+++++ s6 +++++
Sort (32-bit) int[] algorithm template yamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template yamsort 1172 msec
VmPeak:	   45080 kB
VmHWM:	   43508 kB
Cost 50991.376 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template yamsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template yamsort 1857 msec
VmPeak:	  130988 kB
VmHWM:	  129124 kB
Cost 239783.268 GB*sec (VmHwM)
-------------------------
+++++ s7 +++++
Sort (32-bit) int[] algorithm template Swenson tim_sort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template Swenson tim_sort 1698 msec
VmPeak:	   56240 kB
VmHWM:	   54664 kB
Cost 92819.472 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template Swenson tim_sort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template Swenson tim_sort 2496 msec
VmPeak:	  164316 kB
VmHWM:	  162776 kB
Cost 406288.896 GB*sec (VmHwM)
-------------------------
+++++ s8 +++++
Sort (32-bit) int[] algorithm template mmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template mmsort 819 msec
VmPeak:	   60660 kB
VmHWM:	   59164 kB
Cost 48455.316 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template mmsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template mmsort 1922 msec
VmPeak:	  177848 kB
VmHWM:	  176112 kB
Cost 338487.264 GB*sec (VmHwM)
-------------------------
+++++ s9 +++++
Sort (32-bit) int[] algorithm template symmsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template symmsort 1846 msec
VmPeak:	   41264 kB
VmHWM:	   39628 kB
Cost 73153.288 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template symmsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is stable
time of template symmsort 3750 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 441630.000 GB*sec (VmHwM)
-------------------------
+++++ s10 +++++
Swenson quick_sort too slow for MAX=10
+++++ s11 +++++
Sort (32-bit) int[] algorithm template aamsort (10000000 elements (40000000 bytes) 9 max-value)
verify: OK
time of template aamsort 892 msec
VmPeak:	   41264 kB
VmHWM:	   39628 kB
Cost 35348.176 GB*sec (VmHwM)
Sort (32-bit) struct data[] algorithm template aamsort (10000000 elements (120000000 bytes) 9 max-value random)
verify: OK
sort is unstable
time of template aamsort 2294 msec
VmPeak:	  119388 kB
VmHWM:	  117768 kB
Cost 270159.792 GB*sec (VmHwM)
-------------------------
–ü–Ω. –∞–ø—Ä.  2 19:23:55 MSK 2012
]0;avp@avp-xub11: ~/src/yamsortavp@avp-xub11:~/src/yamsort$ exit

–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ü–Ω. 02 –∞–ø—Ä. 2012 19:24:08
